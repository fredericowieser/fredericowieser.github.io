<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lifecycle on Fred Wieser</title>
    <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/</link>
    <description>Recent content in lifecycle on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 25 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/overview/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/overview/</guid>
      
      <description>Overview Component lifecycle events are processed in a set of lifecycle methods. These methods can be overridden to perform additional operations in Components during Component initialization and rendering.
The Component lifecycle events in these notes operate separately from Blazor Server&amp;rsquo;s reconnection event handlers. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-7.0 General lifecycle Only the first render: Create component&amp;rsquo;s instance Run SetParametersAsync Call OnInitialized{Async} Every time: Call OnParametersSet{Async} Render SetParametersAsync() Sets the value of each property with the [Parameter] or [CascadingParameter] attribute that has a corresponding value in the ParameterView.</description>
      
    </item>
    
    <item>
      <title>component rendering</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/component-rendering/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/component-rendering/</guid>
      
      <description>Overview Components must render when they are first added to the component hierarchy by a parent component. Components may render at other times according to their own logic and conventions. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/rendering?view=aspnetcore-7.0 Rendering Flow In most cases, ComponentBase conventions result in the correct subset of component rerenders after an event occurs. Developers are not required to provide manual logic to tell the framework which components to rerender and when to rerender them.</description>
      
    </item>
    
    <item>
      <title>statehaschanged considerations</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/statehaschanged-considerations/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/statehaschanged-considerations/</guid>
      
      <description>Overview StateHasChanged() is called to notify the Component that its state has changed. When applicable, calling this method can cause the Component to be rerendered. This is necessary when the Component updates due to an external change (like an event from a service). In these cases, the Component does not update automatically.
StateHasChanged() is called automatically for EventCallback methods.
Problem Credit: Blazor University
When code is called by a non-UI event, a thread locking/synchronization mechanism is normally required if we intend to manipulate state.</description>
      
    </item>
    
  </channel>
</rss>
