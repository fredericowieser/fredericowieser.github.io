<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generic on Fred Wieser</title>
    <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/</link>
    <description>Recent content in generic on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 29 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/wieserpedia/_net/types/collections/generic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>inheritance</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/inheritance/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/inheritance/</guid>
      
      <description>Generic Collection Inheritance This visual describes the primary generic collection types in .NET and the interfaces they inherit.</description>
      
    </item>
    
    <item>
      <title>sets</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/sets/</link>
      <pubDate>Sun, 09 Jan 2022 17:34:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/sets/</guid>
      
      <description>Sets Sets are useful when performing set operations between two collections.
Other Sets SortedSet&amp;lt;T&amp;gt; A collection of unique objects that are maintained in sorted order.</description>
      
    </item>
    
    <item>
      <title>trees</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/trees/</link>
      <pubDate>Tue, 16 Nov 2021 07:51:53 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/trees/</guid>
      
      <description>Trees A collection of nodes where each node can be linked to more nodes.
Nodes are collected by links.
Useful for nonlinear data. 2 is the parent (root) node. 3 and 4 are both parent and child nodes. Binary Trees A tree whose nodes have no more than 2 children.
Binary Search Trees A binary tree that is ordered.
Items to the left must be less than the parent. Items to the right must be greater than the parent.</description>
      
    </item>
    
    <item>
      <title>hashset</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/hashset/</link>
      <pubDate>Mon, 15 Nov 2021 20:30:01 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/hashset/</guid>
      
      <description>HashSet An unordered collection of unique items.
Namespace Systems.Collections.Generic Inheritance Object -&amp;gt; HashSet&amp;lt;T&amp;gt;
Construction var hs = new HashSet&amp;lt;type&amp;gt;(); Methods .Add(elem) // Add elem to the set. Returns boolean if element was not already in the set. .Contains(elem) // Return Boolean if elem is in the hashset. </description>
      
    </item>
    
    <item>
      <title>stacks</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/stacks/</link>
      <pubDate>Mon, 15 Nov 2021 16:42:50 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/stacks/</guid>
      
      <description>Stack A last-in, first-out collection of objects.
Namespace Systems.Collections.Generic
Inheritance Object –&amp;gt; Stack&amp;lt;T&amp;gt;
Construction var stk = new Stack&amp;lt;type&amp;gt;(); Methods .Peek() // Return, but do not remove, the element at the top of the stack. Throws exception on empty stack. .Pop() // Remove and return the element at the top of the stack. .Push(elem) // Push elem onto stack. .TryPeek(out var1) // Return, but do not remove, the element at the top of the stack and store it in var1.</description>
      
    </item>
    
    <item>
      <title>queues</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/queues/</link>
      <pubDate>Mon, 15 Nov 2021 16:23:15 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/queues/</guid>
      
      <description>Queue A first-in, first-out collection of objects.
Namespace Systems.Collections.Generic
Inheritance Object –&amp;gt; Queue&amp;lt;T&amp;gt;
Notes A queue contains elements in the order they were added. Queues are FIFO: Elements are inserted at the end (enqueue) and removed from the beginning (dequeue). Queues do not have indices. Other Queues PriorityQueue Items in a PriorityQueue have a priority value as well as a position value.
Construction var queue = new Queue&amp;lt;*type*&amp;gt;; Methods .Enqueue(*elem*) // Add *elem* to the end of the queue.</description>
      
    </item>
    
    <item>
      <title>linked lists</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/linked-lists/</link>
      <pubDate>Mon, 15 Nov 2021 14:18:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/linked-lists/</guid>
      
      <description>Linked Lists Namespace
Systems.Collections.Generic Inheritance
Object –&amp;gt; LinkedList&amp;lt;T&amp;gt;
A doubly-linked list. Each element is a node which has a reference to its previous and next items.
Nodes are ordered one after another. Nodes are not stored contiguously. Nodes are linked using pointers. Nodes do not have indices. The size of a linked list is dynamic. Linked Lists provide better performance compared to Lists when frequently inserting and removing items from the middle of the list.</description>
      
    </item>
    
    <item>
      <title>lists</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/lists/</link>
      <pubDate>Sat, 13 Nov 2021 11:21:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/lists/</guid>
      
      <description>Lists Lists are ordered collections that can hold any object. Implements IList&amp;lt;T&amp;gt;. Allows for duplicate items. Inherits from System.Collections.Generic implicitly.
List&amp;lt;T&amp;gt; is not thread safe. Use ImmutableList&amp;lt;T&amp;gt; instead.
For a heterogeneous collection of objects, use List&amp;lt;Object&amp;gt;.
Other Lists SortedList&amp;lt;TKey, TValue&amp;gt; A collection of key/value pairs that are sorted by key and accessible by key or index.
Creating Declare a new List of strings:
var names = new List&amp;lt;string&amp;gt;Angle brackets are used for Generics.</description>
      
    </item>
    
    <item>
      <title>dictionaries</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/dictionaries/</link>
      <pubDate>Sat, 13 Nov 2021 11:20:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/dictionaries/</guid>
      
      <description>Dictionary A series of key-value pairs. Object –&amp;gt; Dictionary&amp;lt;TKey, TValue&amp;gt;
Type safe. Invalid key throws exception. Namespace
System.Collections.Generic Implements
IDictionary&amp;lt;TKey, TValue&amp;gt;
Items in a dictionary are instances of a struct.
Other Dictionaries SortedDictionary&amp;lt;TKey, TValue&amp;gt; A collection of key/value pairs that are sorted by key.
Construction` Dictionary&amp;lt;key-type, value-type&amp;gt; d = new(); // or Dictionary&amp;lt;TKey, TValue&amp;gt; d = new() { { key1, value1 } … }; Accessing d[key]
Iterating foreach (KeyValuePair&amp;lt;TKey, TValue&amp;gt; item in d) { Console.</description>
      
    </item>
    
  </channel>
</rss>
