<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>objects on Fred Wieser</title>
    <link>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/</link>
    <description>Recent content in objects on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 30 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/wieserpedia/_net/types/reference-types/objects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>object and collection initializers</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/object-and-collection-initializers/</link>
      <pubDate>Sun, 06 Mar 2022 17:36:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/object-and-collection-initializers/</guid>
      
      <description>Object Initializers Objects can be initialized when declared. Using object initializers works even when the initialization doesn&amp;rsquo;t match a constructor as long as a parameterless constructor exists.
The compiler processes object initializers by first accessing the parameterless instance constructor and then processing the member initializations:
public class StudentName { public int ID { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public StudentName() { } // This is the parameterless constructor that is accessed… public StudentName(string first, string last) { // …not this one.</description>
      
    </item>
    
    <item>
      <title>objects</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/objects/</link>
      <pubDate>Tue, 09 Nov 2021 20:44:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/objects/</guid>
      
      <description>Objects Because all objects implicitly inherit from Object, they have these methods:
ToString() — Converts the class object to a string representation. GetHashCode() — Returns the unique hash code of the object. GetType() — Returns the Type of the object which represents its class. Creating new() allocates memory, invokes a constructor, and returns a reference to the instance:
SomeClass variable = new(); var variable = new Class(arg1, arg2, …); var p1 = new Point(0, 0); var p2 = new Point(10, 20); Checking the Type of an Object (is Keyword) Use the is keyword:</description>
      
    </item>
    
  </channel>
</rss>
