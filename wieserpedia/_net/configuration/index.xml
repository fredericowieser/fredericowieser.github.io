<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>configuration on Fred Wieser</title>
    <link>http://localhost:1313/wieserpedia/_net/configuration/</link>
    <description>Recent content in configuration on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 29 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/wieserpedia/_net/configuration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/overview/</link>
      <pubDate>Thu, 30 Dec 2021 14:12:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/overview/</guid>
      
      <description>Configuration Providers Configuration providers exist for settings files, environment variables, Azure key vault, Azure app configuration, command-line arguments, custom providers, key-per-file, and in-memory .NET objects.
Prefer Microsoft.Extensions.Configuration over System.Configuration.
Prefer Microsoft.Extensions.ConfigurationManager over System.ConfigurationManager.
Packages Microsoft.Extensions.Configuration Microsoft.Extensions.Hosting — Not required unless using a Generic Host. Microsoft.Extensions.Configuration.Binder — Bind an object to data in configuration providers. Microsoft.Extensions.Configuration.Json — JSON configuration provider. Microsoft.Extensions.Configuration.EnvironmentVariables — Environment variables provider. Note: System.Configuration.ConfigurationBuilder != Microsoft.Extensions.Configuration.ConfigurationBuilder.
Binding Configuration values can be bound to instances of .</description>
      
    </item>
    
    <item>
      <title>options pattern</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/options-pattern/</link>
      <pubDate>Wed, 20 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/options-pattern/</guid>
      
      <description>Overview [Documentation] The options pattern uses classes to provide strongly-typed access to groups of related settings. It uses configuration files like configuration in .NET.
This pattern supports a mechanism to validate configuration data.
Configuring and Using Options High-level Process:
Create options classes that model the configuration data Add instances of Option&amp;lt;TOption&amp;gt; to the DI container Inject the Option&amp;lt;TOption&amp;gt; instances into classes that need them 1. Create Options Classes Options classes must:</description>
      
    </item>
    
    <item>
      <title>implementation</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/implementation/</link>
      <pubDate>Tue, 23 Aug 2022 17:15:19 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/implementation/</guid>
      
      <description>Example Install packages:
dotnet add package Microsoft.Extensions.Configuration.Json dotnet add package Microsoft.Extensions.Configuration.Binder dotnet add package Microsoft.Extensions.Configuration.EnvironmentVariables # Only if using environment variables. Assuming this appsettings.json file:
{ &amp;#34;Settings&amp;#34;: { &amp;#34;KeyOne&amp;#34;: 1, &amp;#34;KeyTwo&amp;#34;: true, &amp;#34;KeyThree&amp;#34;: { &amp;#34;Message&amp;#34;: &amp;#34;Oh, that&amp;#39;s nice...&amp;#34; } } } Set the file properties:
Build action = Content Copy to Output Directory = Copy always or Copy if newer // Assuming this code for settings object:
public class Settings { public int KeyOne { get; set; } public bool KeyTwo { get; set; } public NestedSettings KeyThree { get; set; } = null!</description>
      
    </item>
    
  </channel>
</rss>
