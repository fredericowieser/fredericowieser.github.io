<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xaml on Fred Wieser</title>
    <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/</link>
    <description>Recent content in xaml on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 30 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>styles</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/styles/</link>
      <pubDate>Sat, 31 Dec 2022 09:16:27 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/styles/</guid>
      
      <description>Overview Styles allow you to apply the same property values to multiple elements in XAML.
Benefits of Styles Styles allow you to apply common style property values to multiple controls without having to define them on each control individually.
Creating Styles Styles can be created in the Resources property of the parent element of the elements being styled:
MainWindow.xaml
&amp;lt;!-- ... --&amp;gt; &amp;lt;!-- Customer detail --&amp;gt; &amp;lt;StackPanel Grid.Row=&amp;#34;1&amp;#34; Grid.Column=&amp;#34;1&amp;#34; Margin=&amp;#34;10&amp;#34; Visibility=&amp;#34;{x:Bind ViewModel.</description>
      
    </item>
    
    <item>
      <title>dependency injection</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/dependency-injection/</link>
      <pubDate>Thu, 29 Dec 2022 21:44:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/dependency-injection/</guid>
      
      <description>Overview The MainWindow knows how to create the MainViewModel with a customer data provider.
This is problematic because MainWindow&amp;rsquo;s responsibility is only to be the MainWindow of our application. Knowing how to instantiate a MainViewModel is outside of its scope.
MainViewModel is a dependency that MainWindow needs (and stores in its MainViewModel property below).
Manually Inject the MainViewModel Dependency into MainWindow Adjust MainWindow so its constructor takes a MainViewModel as a parameter (required for DI):</description>
      
    </item>
    
    <item>
      <title>data binding</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-binding/</link>
      <pubDate>Mon, 12 Dec 2022 16:39:12 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-binding/</guid>
      
      <description>Data Binding Linking properties of objects in the View to those in the Data layer so that changes in one are reflected in the other. Makes event handlers unnecessary. Can be implemented in XAML or code, but more common in XAML. Bind the Firstname textbox to the selected item in the ListView:
This is the ListView that holds the names. Add an x:Name to it:
&amp;lt;!-- ... --&amp;gt; &amp;lt;ListView Grid.Row=&amp;#34;1&amp;#34; x:Name=&amp;#34;customerListView&amp;#34; ScrollViewer.</description>
      
    </item>
    
    <item>
      <title>namespaces</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/namespaces/</link>
      <pubDate>Mon, 12 Dec 2022 16:30:39 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/namespaces/</guid>
      
      <description>&amp;lt;!-- x:Class maps to `Microsoft.UI.Xaml`, `.Controls`, `.Data`, `.Input`, `.Shapes` --&amp;gt; &amp;lt;!-- xmlns — This is the *default* namespace because it does not have a prefix --&amp;gt; &amp;lt;!-- xmlns:x — Defines attributes for the XAML language, like the `x:Name` attribute --&amp;gt; &amp;lt;!-- xmlns:d — Designer namespace that defines properties like DesignWidth, DesignHeight; since XAML does not have a designer, this namespace is not needed --&amp;gt; &amp;lt;!-- xmlns:mc — The markup compatibility namespace defines the Ignorable attribute --&amp;gt; &amp;lt;!</description>
      
    </item>
    
    <item>
      <title>usercontrols</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/usercontrols/</link>
      <pubDate>Mon, 12 Dec 2022 13:39:26 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/usercontrols/</guid>
      
      <description>UserControls UserControls compartmentalize XAML.
Creating New folder &amp;gt; &amp;ldquo;Controls&amp;rdquo; &amp;gt; New item &amp;gt; WinUI &amp;gt; User Control (WinUI 3) &amp;gt; &amp;ldquo;HeaderControl&amp;rdquo;
HeaderControl.xaml
&amp;lt;!-- Create a UserControl tag to hold the control: --&amp;gt; &amp;lt;UserControl x:Class=&amp;#34;WiredBrainCoffee.CustomersApp.Controls.HeaderControl&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:WiredBrainCoffee.CustomersApp.Controls&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34;&amp;gt; &amp;lt;Grid Background=&amp;#34;#F05A28&amp;#34;&amp;gt; &amp;lt;StackPanel HorizontalAlignment=&amp;#34;Center&amp;#34; Orientation=&amp;#34;Horizontal&amp;#34;&amp;gt; &amp;lt;Image Source=&amp;#34;/Images/logo.png&amp;#34; Width=&amp;#34;100&amp;#34; Margin=&amp;#34;5&amp;#34;/&amp;gt; &amp;lt;TextBlock Text=&amp;#34;Customers App&amp;#34; FontSize=&amp;#34;30&amp;#34; VerticalAlignment=&amp;#34;Center&amp;#34; Foreground=&amp;#34;White&amp;#34;/&amp;gt; &amp;lt;TextBlock Text=&amp;#34;Version 1.0&amp;#34; FontSize=&amp;#34;16&amp;#34; VerticalAlignment=&amp;#34;Bottom&amp;#34; Margin=&amp;#34;10 0 0 22&amp;#34; Foreground=&amp;#34;#333333&amp;#34;/&amp;gt; &amp;lt;/StackPanel&amp;gt; &amp;lt;/Grid&amp;gt; &amp;lt;/UserControl&amp;gt; HeaderControl.xaml.cs code-behind:</description>
      
    </item>
    
    <item>
      <title>building a layout</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/building-a-layout/</link>
      <pubDate>Sun, 11 Dec 2022 18:27:01 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/building-a-layout/</guid>
      
      <description>MainWindow.xaml
&amp;lt;Window x:Class=&amp;#34;WiredBrainCoffee.CustomersApp.MainWindow&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:WiredBrainCoffee.CustomersApp&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34;&amp;gt; &amp;lt;!-- A `Grid` with two columns and three rows: --&amp;gt; &amp;lt;Grid Background=&amp;#34;#222222&amp;#34;&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;#34;*&amp;#34;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;!-- For the header: --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;!-- For Navigation and Customer Details --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;*&amp;#34;/&amp;gt; &amp;lt;!-- For the border element: --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- Header: a horizontal `StackPanel` with an image and two TextBlocks: ----&amp;gt; &amp;lt;!-- This grid defines the background: --&amp;gt; &amp;lt;Grid Grid.</description>
      
    </item>
    
    <item>
      <title>elements and attributes</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/elements-and-attributes/</link>
      <pubDate>Fri, 09 Dec 2022 20:33:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/elements-and-attributes/</guid>
      
      <description>Elements &amp;amp; Attributes Attribute Syntax Button is an element; in XAML, elements are mapped to Classes.
&amp;lt;Button&amp;gt; Content=&amp;#34;Add customer&amp;#34; &amp;lt;/Button&amp;gt; ^ Closing element tag.
Since the element has no content between the opening/closing tags, it can instead be written as a self-closing element:
&amp;lt;Button x:Name=&amp;#34;btnAddCustomer&amp;#34; This is a a special XAML attribute. Content=&amp;#34;Add customer&amp;#34; `Content` is an *attribute*; in XAML, attributes can map to *properties*. Clicked=&amp;#34;Button_Click&amp;#34; /&amp;gt; This attribute is mapped to an event of the button, Button_Click.</description>
      
    </item>
    
  </channel>
</rss>
