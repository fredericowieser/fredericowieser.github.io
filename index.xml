<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About on Fred Wieser</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in About on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 25 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/decide-the-neuroscience-of-breaking-bias/overview/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/decide-the-neuroscience-of-breaking-bias/overview/</guid>
      
      <description>Abstract A training from the NeuroLeadership Institute.
&amp;ldquo;Knowing bias will help you stop being biased.&amp;rdquo; This is not true. Bias in the brain operates automatically, unconsciously, and habitually.
If you have a brain, you have bias.
Cognitive biases — mental shortcuts we use to process the world around us. They occur automatically and unconsciously. These biases cause problems:
Errors in thinking — in our efforts to simplify, we overlook important information or assume we already know it.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/overview/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/overview/</guid>
      
      <description>Abstract The goal of machine learning is to use data to create a predictive model. Machine learning models encapsulate a function to calculate an output based on one or more inputs. It creates a model from data.
Consists of two phases:
Training — the process of defining the function. Inferencing — using the model to predict new values. Training Machine Learning Models Consider an ML model that predicts ice cream sales based on the weather:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/overview/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/overview/</guid>
      
      <description>Abstract In supervised machine learning, training data includes both feature values and label values. Models are trained by finding a relationship between the features and labels in past observations so that unknown labels can be predicted in future cases.
Supervised machine learning approaches are categorized as follows:
Regression Binary classification Multi-class classification </description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/unsupervised/overview/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/unsupervised/overview/</guid>
      
      <description>Abstract In unsupervised machine learning, models are trained using data that consists only of feature values without any known labels. The models determine relationships between the features of the observations in the training data.
Clustering [Reference] Identifies similarities between observations based on their features and groups them into discrete clusters. The label is the cluster to which the observation is assigned based only on its features. Examples: Flowers based on their size, number of leaves, and number of petals.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/overview/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/overview/</guid>
      
      <description>Abstract TODO: Define AI
Branches of AI:
Computer Vision Image classification — classifying images based on their contents Object detection — classify individual objects with an image and identify their location in the image Semantic segmentation — individual pixels are classified according to the object to which they belong; used to create overlays and highlights in an image Image analysis — extracting information (&amp;ldquo;tags&amp;rdquo;) from images to catalog the image or create descriptive captions Face detection, analysis, and recognition — a specialized form of object detection that locates human faces Optical character recognition — detects and reads text in images Document Intelligence — managing, processing, and using high volumes of a variety of unstructured data in forms and documents.</description>
      
    </item>
    
    <item>
      <title>pipelines</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/overview/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/overview/</guid>
      
      <description>Abstract [Documentation] Pipelines are designed to simplify high performance I/O operations with .NET.
Pipelines are available in System.IO.Pipelines Nuget package.
Pipe Pipe is used to create a PipeReader/PipeWriter pair, accessible via properties on the Pipe. All data written in the PipeWriter is available in the PipeReader:
var pipe = new Pipe(); PipeReader reader = pipe.Reader; PipeWriter writer = pipe.Writer; async Task ProcessLinesAsync(Socket socket) { var pipe = new Pipe(); Task writing = FillPipeAsync(socket, pipe.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/overview/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/overview/</guid>
      
      <description>Abstract [Documentation] Moq is a simple, minimalistic mocking framework.
Installation dotnet add package Moq In test project:
using Moq; // If mocking a class with a protected member: using Moq.Protected; Overview Assumptions Assume this interface:
public interface IDateTimeProvider { DayOfWeek DayOfWeek(); string Name { get; set; } } Assume a concrete class with one method with two overloads:
public class RateCalculator { public decimal GetPayRate(decimal baseRate) { return DateTime.Now.DayOfWeek == DayOfWeek.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/overview/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/overview/</guid>
      
      <description>Abstract [Documentation] NSubstitute is a mocking framework for .NET. It abstracts the difference between a mock, stub, fake, spy, or test double.
NSubstitute requires interfaces. On a limited basis, it can work with virtual members of a concrete class, but any non-virtual code will actually execute.
Installation dotnet add package NSubstitute dotnet add package NSubstitute.Analyzers.CSharp # optional In test project:
using NSubstitute; Usage Assuming this interface:
public interface ICalculator { int Add(int a, int b); string Mode { get; set; } event EventHandler PoweringUp; } Arrange var calculator = Substitute.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/overview/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/overview/</guid>
      
      <description>Abstract [Documentation] Unit testing:
reduces the amount of time needed to perform functional tests, which require running the application and performing a series of steps. protects against regression. serves as executable documentation. helps ensure code is less coupled. Good unit tests are fast (run in milliseconds), isolated (have no dependencies), repeatable (always return the same results), self-checking (identify whether they pass or fail), and timely (shouldn&amp;rsquo;t take a disproportionately long time to write).</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/overview/</link>
      <pubDate>Sat, 21 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/overview/</guid>
      
      <description>Abstract [Documentation] .NET supports various testing paradigms.
Types of Tests Unit tests — test individual components or methods (&amp;ldquo;units of work&amp;rdquo;). They only test code within the developer&amp;rsquo;s control and not infrastructure. Integration tests — tests two or more components&amp;rsquo; ability to function together (their &amp;ldquo;integration&amp;rdquo;). Load tests — tests whether a system can handle a specified load. Testing Frameworks xUnit — free; open-source; a project of the .NET Foundation. NUnit — ported from JUnit; a project of the .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/overview/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/overview/</guid>
      
      <description>Overview [Documentation] Availability: Visual Studio Enterprise Edition, Visual Studio 2019 Update 6+
Code isolation is a testing strategy that isolates code under test from the rest of the application. This allows for testing the specific functionality of the code in isolation. If a test fails, the cause is in the isolated code, not somewhere else. It also enables testing code even if other parts of the application are not yet functional.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/overview/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/overview/</guid>
      
      <description>Abstract [Documentation] An overview of the testing tools available in Visual Studio:
Tool Description Availability Test Explorer Create, manage, and run unit tests All editions All code Live Unit Testing Executes unit tests automatically and in real time as code changes are made Enterprise edition .NET code IntelliTest Automatically generates unit tests and test data Enterprise edition .NET Framework Code Coverage Determines what portion of a project&amp;rsquo;s code is actually being tested Enterprise edition All code Microsoft Fakes Isolate code under test from other parts of the application Enterprise edition .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/overview/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/overview/</guid>
      
      <description>Abstract [Documentation] The System.IO namespace contains types to:
Read or write files Read or modify directories Read or write data streams Compress or decompress files Communicate via pipes and serial ports Asynchronous I/O: Synchronous I/O operations block the UI thread until complete. Use asynchronous operations to prevent this.
Overview of Types for Files/Directories Type Static or Instance methods Description File static For manipulating files, creating FileStream objects FileInfo instance For manipulating files, creating FileStream objects Directory static For manipulating directories DirectoryInfo instance For manipulating directories Path both For manipulating paths See Notes on File IO.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/minimal-apis/overview/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/minimal-apis/overview/</guid>
      
      <description>Abstract [Documentation] Minimal APIs are a simplified approach to building fast HTTP APIs with ASP.NET Core that skip traditional scaffolding and avoid unnecessary controllers. They fluently declare API routes and actions:
var app = WebApplication.Create(args); app.MapGet(&amp;#34;/&amp;#34;, () =&amp;gt; &amp;#34;Hello World!&amp;#34;); app.MapGet(&amp;#34;/users/{userId}/books/{bookId}&amp;#34;, (int userId, int bookId) =&amp;gt; $&amp;#34;The user id is {userId} and book id is {bookId}&amp;#34;); app.Run(); Middleware Sequencing in Minimal API Apps [Documentation] WebApplication adds the following middleware:
Sequence Middleware Conditions 1 UseDeveloperExceptionPage HostingEnvironment == &amp;ldquo;Development&amp;rdquo; 2 UseRouting Endpoints are configured (like with app.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/overview/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/overview/</guid>
      
      <description>Abstract [Documentation] Roslyn Analyzers inspect C#/VB code for style, quality, maintainability, design, and other issues. They are made up of code analysis rules. These rules work together with Visual Studio.
Code analysis rules consist of:
Code style analysis rules Diagnostic ID prefix `IDExxxx Built into Visual Studio and (since .NET 5) the .NET SDK Configured in text editor options or EditorConfig file Code quality analysis rules Diagnostic ID prefix CAxxxx Included (since .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/edge/webview2/overview/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/edge/webview2/overview/</guid>
      
      <description>Overview [Documentation] Edge WebView2 is a control that allows for embedding web technologies (HTML/CSS/JS) into native apps. It uses Microsoft Edge as the rendering engine to display the web content in the app.
WebView2 provides a hybrid approach between the extremes of websites and PWAs on one end of the spectrum and fully native apps on the other end.
Supported platforms:
.NET Framework 4.5+ .NET Core 3.1 .NET 5 .NET 6 WinUI 2.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/scottplot.net/overview/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/scottplot.net/overview/</guid>
      
      <description>ScottPlot ScottPlot is a plotting library for .NET.
Documentation: https://scottplot.net/cookbook/4.1/category/quickstart/#scatter-plot Versions There are two major versions of ScottPlot:
4.1 — stable 5.0 — beta Creating Plots A ScottPlot.Plot can hold one or more Plottables:
using ScottPlot; // width = 350 var plot = new Plot(350, 350); Scatter Plots Documentation: https://scottplot.net/cookbook/4.1/#scatter-plot
Simple // sample data double[] xs = DataGen.Consecutive(51); double[] sin = DataGen.Sin(51); double[] cos = DataGen.Cos(51); // add two scatter plots: plot.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/dependency-injection/overview/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/dependency-injection/overview/</guid>
      
      <description>Abstract https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-guidelines https://scottlilly.com/c-design-patterns-the-dependency-injection-pattern/ https://auth0.com/blog/dependency-injection-in-dotnet-core/
Dependency Injection is a design pattern used to achieve Inversion of Control between classes and their dependencies. A dependency is an object that another object depends on.
IoC Container Implements IServiceProvider Dependencies managed by this container are called services. Microsoft.Extensions.DependencyInjection.IServiceCollection. Functions of the IoC Container Registration — mapping a type to a class so that the IoC can create the correct dependency instance. Resolution — resolving dependencies by creating an object and injecting it into the requesting class.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/overview/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/overview/</guid>
      
      <description>Abstract .NET supports serialization and deserialization for JSON; XML and SOAP; and Binary data.
Serialization — Converting types/objects to JSON. Deserialization — Converting JSON to types/objects. Documentation: https://learn.microsoft.com/en-us/dotnet/standard/serialization/ </description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/overview/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/overview/</guid>
      
      <description>Abstract An architecture decision record (ADR) is a document that captures an important architecture decision made over the course of developing a system along with its context and consequences.
Templates Simple From https://github.com/joelparkerhenderson/architecture-decision-record/blob/main/templates/decision-record-template-by-michael-nygard/index.md
Balanced From https://github.com/joelparkerhenderson/architecture-decision-record/blob/main/templates/decision-record-template-madr/index.md
Detailed From https://github.com/joelparkerhenderson/architecture-decision-record/blob/main/templates/decision-record-template-by-jeff-tyree-and-art-akerman/index.md
Examples See https://github.com/joelparkerhenderson/architecture-decision-record/tree/main/examples/.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/change-tracking/overview/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/change-tracking/overview/</guid>
      
      <description>Abstract DbContext instances track changes made to their entities. The tracked entities report the changes to the database when SaveChanges is called.
Entity instances become tracked when they are: (1) returned from a query; (2) explicitly attached to a DbContext via Add, Attach, or Update; (3) detected as new entities connected to existing tracked entities.
Entity instances are no longer tracked when: (1) the DbContext is disposed; (2) the change tracker is cleared; (3) the entities are explicitly detached.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/logging-events-and-diagnostics/overview/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/logging-events-and-diagnostics/overview/</guid>
      
      <description>Logging Mechanisms Quick Reference Mechanism Async Scope Registered Intended Use Simple logging No Per context Context configuration Development-time logging Microsoft.Extensions.Logging No Per context DI or context configuration Production logging Events No Per context Any time Reaching to EF events Interceptors Yes Per context Context configuration Manipulating EF operations Diagnostics listeners No Process Globally Application diagnostics Simple logging Use LogTo when configuring a DbContext instance:
protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) =&amp;gt; optionsBuilder.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/tools/overview/</link>
      <pubDate>Tue, 30 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/tools/overview/</guid>
      
      <description>Abstract Tools are CLI apps installed from NuGet packages. Tools are managed and used with the dotnet tool command. Documentation: https://learn.microsoft.com/en-us/dotnet/core/tools/ Installing dotnet tool install &amp;lt;package_name&amp;gt; --global # install the tool globally --local # install the tool locally Diagnostic tools Tool Use dotnet-counters for first-level health monitoring and performance investigation dotnet-dump for collecting and analyzing Windows and Linux core dumps without a native debugger dotnet-gcdump for collecting garbage collector dumps of live .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/testing/overview/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/testing/overview/</guid>
      
      <description>Types of Tests From most number of tests to least for a given project (italicized are not in the Testing Pyramid):
Type Description Unit Tests the smallest unit of code possible, usually a method or function. Integration Tests if smaller units and larger components work together as a single piece of software. System Tests the whole system environment in which the software runs. Performance Tests the performance (time required) to run (ie: return a web page to a visitor in &amp;lt; 20 ms).</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/overview/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/overview/</guid>
      
      <description>Overview Component lifecycle events are processed in a set of lifecycle methods. These methods can be overridden to perform additional operations in Components during Component initialization and rendering.
The Component lifecycle events in these notes operate separately from Blazor Server&amp;rsquo;s reconnection event handlers. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-7.0 General lifecycle Only the first render: Create component&amp;rsquo;s instance Run SetParametersAsync Call OnInitialized{Async} Every time: Call OnParametersSet{Async} Render SetParametersAsync() Sets the value of each property with the [Parameter] or [CascadingParameter] attribute that has a corresponding value in the ParameterView.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/overview/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/overview/</guid>
      
      <description>From Microsoft Learn / Entity Framework / Entity Framework Core
Abstract Entity Framework (EF) Core is a data access technology that can serve as an object-relational mapper (OR/M). It supports various database providers.
Data access is performed using a model that includes entity classes and a context object that represents a session with a database.
An entity is a database.
An entity set is a table in the database.
Model development approaches Generate a model from an existing database Hand code a model to match a database Use EF Migrations to create a database from a model Installing Install EF Core w/SQL Server Database Provider dotnet add package Microsoft.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/overview/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/overview/</guid>
      
      <description>Abstract A component is an element of UI — a page, dialog, button, form, etc — that is built into a .NET assembly. It includes layout and logic.
Components can be nested, reused, shared among projects, and used in MVC and Razor Pages apps.
High-level Process for Building Components Create ComponentName.razor under /Pages (if the Component produces a page) or /Shared (otherwise) If the Component requires CSS styling, add it to a code-behind in ComponentName.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/overview/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/overview/</guid>
      
      <description>Abstract Documentation: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/apis?view=aspnetcore-7.0 Two Approaches In ASP.NET Core, APIs can be built with the controller-based approach or the minimal API approach:
Controller-based Controllers are classes that derive from ControllerBase. Take dependencies via constructor injection or property injection. Minimal APIs Hide the host class and focus on building APIs via extension methods that take functions as lambda expressions. Take dependencies via accessing the service provider. Minimal APIs do not support:
Model binding (via IModelBinder, IModelBinderProvider); a custom binding shim can be used Validation (via IModelValidator) Application parts or application model View rendering (recommendation: use Razor Pages) JsonPatch OData In the sample code below, both approaches use this class:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/overview/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/overview/</guid>
      
      <description>Overview Use Razor Pages for coding page-focused scenarios more productively than using Controllers and Views.
ASP.NET Core Razor Pages can co-exist in the same project with ASP.NET Core MVC.
Project type = ASP.NET Core Web App (webapp, razor)
Enabling Razor Pages Like so:
// … builder.Services.AddRazorPages(); // Adds services for Razor Pages to the app // … // Routing in Razor Pages is different from MVC. This method registers Razor Pages as endpoints in IEndpointRouteBuilder: app.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/overview/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/overview/</guid>
      
      <description>Abstract Hugo is a static site generator.
2 editions: Standard and Extended (includes encoding WebP images, transposing Sass to CSS)
Installation winget install hugo.hugo.extended
Test the installation: hugo version
Getting Help hugo help hugo command --help
Generate a Site hugo new site example
This creates:
example/ ├── archetypes/ │ └── default.md ├── assets/ # all the files which need to be processed by Hugo Pipes (Hugo&amp;#39;s asset processing engine) ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── config.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/javascript/overview/</link>
      <pubDate>Fri, 28 Apr 2023 16:26:09 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/javascript/overview/</guid>
      
      <description>Embedding in HTML JavaScript is embedded in HTML in &amp;lt;script&amp;gt; tags.
Variables let someVariable = &amp;#34;someString&amp;#34; const someConstant = 3 Arrays JavaScript arrays are zero-indexed:
let array1 = [1, 2, 3, 4]; let array2 = [100, true, &amp;#34;JavaScript&amp;#34;]; array1[0] // returns 1 array1.push(5); Strings Strings are C-style.
Template strings day: ${day}, index: ${index}; Operators === Flow Control C-style:
if while for ForEach forEach works by defining an anonymous function that takes action on each element in the array:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/overview/</link>
      <pubDate>Thu, 27 Apr 2023 11:05:24 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/overview/</guid>
      
      <description>Abstract An open-source, front-end web development toolkit. Uses HTML, CSS, JavaScript Bootstrap uses Popper for dropdowns, popovers and tooltips Compare to W3.CSS Documentation: https://getbootstrap.com/docs/5.3 Getting Started Installation Prefer LibMan over NuGet:
libman install bootstrap libman install bootstrap.sass A Basic Bootstrap 5 index.html Create an index.html file with a &amp;lt;meta&amp;gt; tag&amp;rsquo;s name attribute set to &amp;ldquo;viewport&amp;rdquo; to enable responsive behavior: &amp;lt;!-- Bootstrap requires this HTML5 doctype: --&amp;gt; &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/overview/</link>
      <pubDate>Wed, 26 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/overview/</guid>
      
      <description>Introduction &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!--defines this HTML 5 document--&amp;gt; &amp;lt;html lang=&amp;#34;en-US&amp;#34;&amp;gt; &amp;lt;!--the root element--&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- metadata about the page --&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- a container for all visible contents --&amp;gt; &amp;lt;h1&amp;gt;My First Heading&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;My first paragraph.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Elements HTML elements have opening tags, content, and closing tags:
&amp;lt;title&amp;gt;Page title&amp;lt;/title&amp;gt; Empty elements Empty elements like &amp;lt;br&amp;gt; (line break) have no content nor closing tag.
Attributes Attribute names should be lowercase.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/overview/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/overview/</guid>
      
      <description>Project Structure ├──Program.cs — entrypoint; host; startup
Calls MapBlazorHub to set up an endpoint for the real-time communication w/browser (via SignalR) Calls MapFallbackToPage(&amp;quot;/_Host&amp;quot;) to set the root page (Pages/_Host.cshtml) and enable nav. ├──appsettings.json — environmental app settings
├──App.razor — the root component
Sets up client-side routing using the Router component; Router intercepts browser navigation and renders the page that matches the requested address ├──_Imports.razor — global namespaces made available to all components</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/overview/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/overview/</guid>
      
      <description>Project Structure Program.cs — entrypoint; host; startup
Adds the root component (App.razor) ├──App.razor — the root component; sets up client-side routing using the Router component; Router intercepts browser navigation and renders the page that matches the requested address
├──_Imports.razor — common namespaces made available to all Components ├──wwwroot/ — the web root
├──appsettings.json — environment app settings
└──index.html — when any page of the app is initially requested, this page is rendered and returned in the response</description>
      
    </item>
    
    <item>
      <title>routing</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/routing/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/routing/</guid>
      
      <description>Overview Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-7.0 Router Component (In this section, Navigation is an injected NavigationManager)
The Router component enables routing:
App.razor
&amp;lt;Router AppAssembly=&amp;#34;@typeof(Program).Assembly&amp;#34;&amp;gt; &amp;lt;Found Context=&amp;#34;routeData&amp;#34;&amp;gt; &amp;lt;RouteView RouteData=&amp;#34;@routeData&amp;#34; DefaultLayout=&amp;#34;@typeof(MainLayout)&amp;#34; /&amp;gt; &amp;lt;/Found&amp;gt; &amp;lt;NotFound&amp;gt; &amp;lt;p&amp;gt;Sorry, there&amp;#39;s nothing at this address.&amp;lt;/p&amp;gt; &amp;lt;/NotFound&amp;gt; &amp;lt;/Router&amp;gt; Focus Set the UI focus to an element based on a CSS selector. When the Router navigates to a new page, this sets the focus to the page&amp;rsquo;s top-level header:
&amp;lt;FocusOnNavigate RouteData=&amp;#34;@routeData&amp;#34; Selector=&amp;#34;h1&amp;#34; /&amp;gt; Provide Custom Content when Content Not Found Use the NotFound template:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/overview/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/overview/</guid>
      
      <description>Abstract Razor is a syntax for combining HTML markup with C# code.
Razor pages are cshtml files.
Razor components (used in Blazor apps) are .razor files.
Rendering HTML HTML is the default Razor language.
Razor Syntax Razor uses the @ symbol to transition from C# to HTML. It evaluates C# expressions and renders them in the HTML output.
When @ precedes a Razor reserved keyword, it transitions into Razor-specific markup. Otherwise, it transitions to HTML.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/session-and-state/overview/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/session-and-state/overview/</guid>
      
      <description>Cookies Cookies store data across requests.
Key points:
The most durable form of persistence on the client Usually less than 4096 bytes Must be validated by the app General Data Protection Regulation (GDPR) support in ASP.NET Core (microsoft.com) Session State Storage of user data while the user browses a web app.
Backed by a cache (ephemeral) Critical user data should be stored in database and cached only as a performance optimization Works by:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/overview/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/overview/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
Overview A view is an HTML template as a .cshtml file with embedded Razor markup (code that interactions w/HTML to render a page).
Views handle data presentation and user interaction.
Views are organized like this where each folder on Views/ is named for each of the app&amp;rsquo;s controllers:
In Views/Home, when a user requests either Index, Contact, or About, the Home controller determines which of the views is used to build and return that page to the user.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/principles/overview/</link>
      <pubDate>Thu, 16 Mar 2023 17:24:53 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/principles/overview/</guid>
      
      <description>DRY – Don&amp;rsquo;t repeat yourself Inversion of Control A mechanism that allows high-level components to depend on abstraction rather than the concrete implementation of low-level components.
Object-Oriented Programming Abstraction Allows creating classes that do not have full implementations in order for those classes to be inherited (and the implementation completed) by others. One class can provide an abstraction for another (or many). Base classes are often abstract. Stream is abstract; FileStream and MemoryStream are concrete.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/overview/</link>
      <pubDate>Thu, 16 Feb 2023 14:28:40 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/overview/</guid>
      
      <description>Abstract Data parallelism — scenarios in which the same operation is performed concurrently on elements in a collection.
Task Parallel Library Enables data parallelism through System.Threading.Tasks.Parallel. Provides method-based parallel implementations of for and foreach loops. Does not require engineer to create threads or queue work items.
How it Works When a parallel loop runs, TPL partitions the collection so that the loop can operate on multiple parts concurrently. TPL partitions the collection based on system resources and workload.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/asynchronous-programming-model/overview/</link>
      <pubDate>Tue, 14 Feb 2023 17:14:31 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/asynchronous-programming-model/overview/</guid>
      
      <description>Pattern Uses two methods: BeginOperationName and EndOperationName
BeginOperationName
Contains the same parameters as the synchronous version of the method and two additional parameters: An AsyncCallback delegate that references a method that is called when the async op completes A user-defined object Returns an IAsyncResult IAsyncResult
Members: AsyncState AsyncWaitHandle CompletedSynchronously IsCompleted EndOperationName
Contains the same parameters as the synchronous counterpart and an IAsyncResult parameter The IAsyncResult passed in must be the same one that originated from the BeginOperationName method Passing other IAsyncResult objects is undefined.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/overview/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/overview/</guid>
      
      <description>Abstract [Documentation] ASP.NET Core supports logging with built-in and third-party logging providers: Console, Debug, Event Tracing, Windows Event Log, TraceSource, Azure App Service, Azure Application Insights.
Notes on Logging in .NET apply to these notes as well. Documentation: HTTP Logging in .NET Core and ASP.NET Core | Microsoft Learn W3CLogger in .NET Core and ASP.NET Core | Microsoft Learn Default Logging Providers The default ASP.NET Core web app templates call WebApplication.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/overview/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/overview/</guid>
      
      <description>Overview Blazor is a server-side rendered (Server) or client-side rendered (WASM) framework for web apps. Blazor does not use a request/response model.
Advantages:
Create UIs in combination of HTML and C# instead of JavaScript Share server-side and client-side app logic Render UI as HTML and CSS Integrate with Docker Build hybrid desktop &amp;amp; mobile apps Blazor apps are based on Razor components—an element of UI (like a page, dialog, or form).</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/overview/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/overview/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
Overview Project type = ASP.NET Core Web App (dotnet new mvc)
MVC Pattern Requests are routed to a controller. Controllers have actions—public methods associated with a URL.
The controller works with the model to perform actions and/or retrieve data.
The controller chooses the view to display to the user and provides that view with any model data it requires.
Both the view and the controller depend on the model.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/overview/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/overview/</guid>
      
      <description>Abstract [Documentation] Routing is matching incoming HTTP requests and dispatching them to the app&amp;rsquo;s executable endpoints.
Endpoints are the app&amp;rsquo;s units of executable request-handling code.
Routing can be configured via controllers, Razor Pages, SignalR, gRPC services, middleware, and delegates &amp;amp; lambdas registered with routing.
Endpoints Endpoints handle requests and execute code to generate a response. They are defined in Program.cs.
Basic Routing Example var builder = WebApplication.CreateBuilder(args); var app = builder.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/middleware/overview/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/middleware/overview/</guid>
      
      <description>Overview Middleware is a pipeline of components to handle requests and responses. Each component can:
Pass the request to the next component; Perform work before and after the next component.
(black arrows = thread of execution) Request Pipeline Built with request delegates. The delegates handle each HTTP request.
Request delegates are configured with Run, Map, and Use extension methods: Use extensions add to the pipeline. Map extensions branch the pipeline. Run extensions short-circuit the pipeline.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/overview/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/overview/</guid>
      
      <description>These notes include: Learn &amp;gt; .NET &amp;gt; ASP.NET Core &amp;gt; Fundamentals &amp;gt; Options | Environments
Abstract ASP.NET Core web applications function as console applications. By default, they use Kestrel as the web server.
Web App Frameworks Server-rendered Apps ASP.NET Core Razor Pages ASP.NET Core MVC Blazor Server Client-rendered Apps Blazor WASM ASP.NET Core SPA (w/Angular or React) Hybrid Web APIs Controller-based API Minimal API Real-time Apps RPC Apps gRPC Fundamentals (Common to all ASP.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/github-pages/overview/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/github-pages/overview/</guid>
      
      <description>Abstract Use GitHub Pages to host a website about yourself, an organization, or a project directly from GitHub.com.
How it Works GitHub Pages takes HTML, CSS, and JS files from a repo, optionally runs them through a build process, and publishes a website.
Sites can be hosted on github.io or a custom domain.
Types
User: username.github.io Org: organization.github.io Project: username.github.io/repository Publishing Sources A GHP site can publish when changes are pushed to a specific branch by configuring a publishing source.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/overview/</link>
      <pubDate>Fri, 09 Dec 2022 19:58:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/overview/</guid>
      
      <description>WinUI Windows UI library — the native UI framework of Windows 10/11
Build desktop applications with C# or C++ Part of the Windows App SDK Abstract UI is defined in XAML; logic is defined in C# Uses MVVM pattern via data binding between UI and UI logic Creating a WinUI Project Visual Studio &amp;gt; Project Type &amp;gt; WinUI &amp;gt; Blank App, Packaged (single project) or Blank App, Packaged with Windows Application Packaging Project (two projects)</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/overview/</link>
      <pubDate>Mon, 21 Nov 2022 21:16:58 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/overview/</guid>
      
      <description>Abstract [Documentation] The Task Asynchronous Pattern is a different pattern for using tasks, async, and await than the pattern described in notes on asynchronous programming.
The TAP pattern uses Task and Task&amp;lt;T&amp;gt; objects which model asynchronous operations. Generally:
For I/O-bound code, await a Task or Task&amp;lt;T&amp;gt; in async method. For CPU-bound code, await an operation that is started on a background thread via Task.Run. The TAP pattern uses a single method to represent the initiation and completion of an asynchronous operation (unlike EAP (Begin and End) and APM (IAsyncResult)).</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/overview/</link>
      <pubDate>Sat, 17 Sep 2022 17:04:25 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/overview/</guid>
      
      <description>Overview Multi-platform Application User Interface. Generates native code for the target device. MAUI leverages WinUI 3 (via Windows App SDK) for Windows apps. Documentation: https://learn.microsoft.com/en-us/dotnet/maui/ Documentation: https://dotnet.microsoft.com/apps/maui Cross-Platform Each supported platform (iOS, Android, macOS, Windows) has its own set of APIs. There are also cross-platform APIs (phone dialer, device info, file system, geolocation, etc) that can be used which covers all platforms. .NET for iOS — AOT compilation to produce an ARM binary (.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-lifecycle/overview/</link>
      <pubDate>Tue, 06 Sep 2022 13:28:13 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-lifecycle/overview/</guid>
      
      <description>Overview .NET MAUI raises cross-platform lifecycle events on the Window class when the app transitions states.
State Transitions Begin State Event End State Running Deactivated Deactivated Deactivated Stopped Stopped Stopped Resumed Running Stopped Destorying Not running Not running Created, Activated Running Events Note: These events have different names on Android, iOS.
Event Raised when Action Created Native window created (but perhaps not yet visible) N/A Activated Window activated N/A Deactivated Window no longer focused N/A Stopped Window no longer visible Disconnect; cancel pending requests Resumed App resumes from being Stopped (never raised first time app launches) Subscribe to events; refresh content that&amp;rsquo;s visible on the page Destroying Native window is being destroyed Remove event subscriptions attached to the native window.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/logging/overview/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/logging/overview/</guid>
      
      <description>Abstract [Documentation] .NET&amp;rsquo;s logging API supports a variety of built-in and third-party logging providers.
Concepts Logging providers — an implementation of ILogger&amp;lt;T&amp;gt; that outputs logs Logging categories — a string associated with each log message Logging levels: Trace = 0 (Warning: may contain sensitive app data; do not enable in production) Debug = 1 (Caution: may produce a high volume of logs) Information = 2 (default if no level specified) Warning = 3 (errors and conditions that do not cause the app to fail) Error = 4 (errors and exceptions in the scope of the current operation (not app-wide) that cannot be handled) Critical = 5 (failures that require immediate attention) None = 6 (use this level to suppress log messages) Providers [Documentation] Built-in providers include:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/modules/overview/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/modules/overview/</guid>
      
      <description>Managing Modules Install-Module name -Force Import-Module name Remove-Module name </description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/overview/overview/</link>
      <pubDate>Wed, 20 Apr 2022 10:06:47 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/overview/overview/</guid>
      
      <description>Abstract LINQ (Language-Integrated Query) is a set of technologies that integrates query capabilities directly into C#.
Architecture LINQ consists of:
Extensions methods (required) – Where, OrderBy, Select, etc LINQ providers (required) – LINQ to Objects, LINQ to Entities, LINQ to XML, LINQ to SQL Lambda expressions (optional) – can be used instead of named methods. LINQ query syntax (optional) – from, in, where, orderby, etc. Queryable Types Queryable types are those types that can be queried via LINQ.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/overview/</link>
      <pubDate>Wed, 16 Feb 2022 16:22:37 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/overview/</guid>
      
      <description>Classes A reference type that encapsulates behavior.
Characteristics Allocation: Heap Equality: Reference Semantics: Reference (a variable of a class contains a reference to that class) Inheritance: Single Mutability: Mutable Use When You need to describe behavior and not just data Creating Classes Note: When creating custom classes, always override ToString() to provide information about the type (not shown here).
public class Point { private int _X { get; } // Auto-implemented readonly property.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/overview/</link>
      <pubDate>Wed, 16 Feb 2022 16:22:14 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/overview/</guid>
      
      <description>Collections Collections of objects. Documentation: https://docs.microsoft.com/en-us/dotnet/api/system.collections?view=net-6.0 Namespaces System.Collections — .NET Framework 1.0; Legacy; System.Collections.Generic — .NET Framework 2.0; no thread synchronization System.Collections.Concurrent — .NET Framework 4.0; thread-safe Common Features All collections implement the ICollection/&amp;lt;T&amp;gt; interface. This means they must have a Count property. All collections implement the IEnumerable/&amp;lt;T&amp;gt; interface, which allows them to be iterated over with foreach. This interface requires GetEnuemrator(), which returns an object that implements IEnumerator. The IEnumerator object must have methods MoveNext() and Reset() and property Current that contains the current item in the collection.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/overview/</link>
      <pubDate>Wed, 16 Feb 2022 16:13:51 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/overview/</guid>
      
      <description>Reference Types Reference types store on the heap. The default value for reference types is null. All reference types support inheritance. object (System.Object)
string (System.String)
dynamic (System.Object) Functions like Type object. At compile time, an element typed dynamic is assumed to support any operation.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/overview/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/overview/</guid>
      
      <description>Abstract [Documentation] [Documentation] Asynchronous programming allows for the execution of long-running operations that do not block the main thread.
Concepts:
Synchronous operations complete sequentially; the next task does not start until the previous finishes. Asynchronous operations allow for starting a task then, while waiting for that task to finish, starting another. Parallel operations use multiple threads to execute several asynchronous tasks. They are deterministic: the order in which the tasks will complete is known.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/overview/</link>
      <pubDate>Tue, 25 Jan 2022 13:17:40 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/overview/</guid>
      
      <description>An Introduction to DataFrame - .NET Blog (microsoft.com)</description>
      
    </item>
    
    <item>
      <title>regular expressions</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/overview/</link>
      <pubDate>Sat, 22 Jan 2022 08:22:40 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/overview/</guid>
      
      <description>Abstract [Documentation] The .NET regular expression engine is a backtracking regular expression matcher. It employs a nondeterministic finite automation (NFA) engine like that used in Perl, Python, and other languages.
Regex Engine Type [more information] Examples Processing driven by&amp;hellip; Guaranteed to find longest match possible May test same character twice Supports backtracking Can match backreferences Can capture sub-expressions Deterministic Finite Automation .NET, Perl, Python, Tcl Input string Yes No (faster) No No No Traditional Nondeterministic Finite Automation awk, egrep, lex Regular expression pattern No Yes (slower) Yes Yes Yes POSIX Nondeterministic Finite Automation N/A Regular expression pattern Yes Yes (slowest) Yes Yes Yes In .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/networking/overview/</link>
      <pubDate>Sun, 09 Jan 2022 19:29:17 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/networking/overview/</guid>
      
      <description>System.Net Types for working with network resources.
Common Types
DNS, IP Addresses, and Web Requests: Dns, Uri, Cookie, WebClient, IPAddress FTP: FtpStatusCode, FtpWebRequest, FtpWebResponse Uri string url = &amp;#34;https://stackoverflow.com/search?q=securestring&amp;#34;; Uri uri = new(url); Fields .Scheme — https .Port — 443 .Host — stackoverflow.com .Path — /search .Query — ?q=securestring IPHostEntry IPHostEntry entry = Dns.GetHostEntry(uri.Host); foreach (IPAddress address in entry.AddressList) { // address returns 151.101.193.69 // address.AddressFamily returns InterNetwork } System.Net.NetworkInformation Types for working with low-level network protocols.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/overview/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/overview/</guid>
      
      <description>Operators Unary operators work on a single operand:
int y = x++; Binary operators work on two operands:
int sum = x + y; Ternary operators (?:) work on three operands.
Built-in Operators nameof() nameof() returns the name of a variable, type or member as a string constant:
nameof(numbers) //returns numbers nameof(numbers.Count) //returns Count sizeof() sizeof() returns the number of bytes that an instance of a type uses in memory:</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/overview/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/overview/</guid>
      
      <description>Breakpoint Stop execution when this is reached to allow you to inspect the state.
Add/remove a breakpoint Click to left of line number (red dot).
Conditional breakpoint Stop execution only if condition is true.
Add/remove a conditional breakpoint Right-click to the left of the line number.
Watch panel Track a variable state across time or functions.
Click + button to add a variable to watch, or; Right-click variable in Variables panel and select Add to watch.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/overview/</link>
      <pubDate>Thu, 30 Dec 2021 14:12:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/overview/</guid>
      
      <description>Configuration Providers Configuration providers exist for settings files, environment variables, Azure key vault, Azure app configuration, command-line arguments, custom providers, key-per-file, and in-memory .NET objects.
Prefer Microsoft.Extensions.Configuration over System.Configuration.
Prefer Microsoft.Extensions.ConfigurationManager over System.ConfigurationManager.
Packages Microsoft.Extensions.Configuration Microsoft.Extensions.Hosting — Not required unless using a Generic Host. Microsoft.Extensions.Configuration.Binder — Bind an object to data in configuration providers. Microsoft.Extensions.Configuration.Json — JSON configuration provider. Microsoft.Extensions.Configuration.EnvironmentVariables — Environment variables provider. Note: System.Configuration.ConfigurationBuilder != Microsoft.Extensions.Configuration.ConfigurationBuilder.
Binding Configuration values can be bound to instances of .</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/overview/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/overview/</guid>
      
      <description>Automatic Variables Variable Description $$ Returns the last token in the last line received by the session $^ Returns the first token in the last line received by the session $? Returns bool if the last command succeeded $_ Alias to $PSItem. Returns the current object in the pipeline object. Use in commands that perform an action on every object in the pipeline. $Error Returns an array of error objects of the most recent errors $HOME Returns the full path of the user&amp;rsquo;s home directory (same as $env:USERPROFILE) $Host An object that represents the current host application for PowerShell $isCoreCLR $isLinux $isMacOS $isWindows $LASTEXITCODE Returns the exit code of the last native program or PowerShell script ran $PROFILE The full path of the posh profile for the current user and current host application $PSHOME The full path of the installation directory for posh $PWD The current working directory $StackTrace The stack trace for the most recent error Chaining Commands Run cmd2 only if cmd1 succeeds: cmd1 &amp;amp;&amp;amp; cmd2</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/overview/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/overview/</guid>
      
      <description>Overview [Documentation] These notes are for System.Text.Json.
There are two approaches for serializing and deserializing with System.Text.Json:
Using JsonSerializer See notes. Using the JSON DOM Use the DOM when you receive JSON that doesn&amp;rsquo;t have a fixed schema and must be inspected to know what it contains. Two JSON DOM approaches: JsonDocument (see notes) A read-only (immutable) DOM. Cannot be changed after creation. Faster. Uses JsonElements. JsonElement has JSON Array and Object enumerators.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/generics/overview/</link>
      <pubDate>Sun, 07 Nov 2021 19:58:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/generics/overview/</guid>
      
      <description>Generics Generics are classes, structures, interfaces and methods that have placeholders (type parameters) for one or more of the types that they store or use. They allow you to pass types as parameters, similar to how you can pass objects as parameters. They defer the specification of one or more types until the class/method has been instantiated (a constructed generic class).
A generic class cannot be used as-is because it is not a type; it is a blueprint for a type.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/interfaces/overview/</link>
      <pubDate>Fri, 05 Nov 2021 21:26:07 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/interfaces/overview/</guid>
      
      <description>Interfaces Interfaces - define behavior for multiple types | Microsoft Docs
Safely update interfaces using default interface methods in C# | Microsoft Docs
Interfaces require classes or structs to implement certain members. They define a contract. They define &amp;ldquo;can-do&amp;rdquo; relationships. Interfaces can be declared in namespace or class scope. Interfaces cannot contain instance state.
Kind May contain Cannot instance methods, properties, events, indexers fields, constructors, finalizers static methods, fields, properties, events, indexers static abstract static virtual methods, properties, events, indexers fields Creating interface IScored { float Score { get; set; } float MaximumScore { get; set; } } Implementing Classes and structs implement interfaces.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/overview/</link>
      <pubDate>Fri, 05 Nov 2021 21:11:04 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/overview/</guid>
      
      <description>Primitive Types Value types store on the stack.
Signed integrals For Integers (zero, positive, and negative whole numbers).
.NET Type C# Alias Range Suffix System.Sbyte sbyte -128 to 127 System.Int16 short -32768 to 32767 System.Int32 int -2147483648 to 2147483647 System.Int64 long -9223372036854775808 to 9223372036854775807l or L Unsigned integrals For Cardinals (zero and positive whole numbers).
.NET Type C# Alias Range Suffix System.Byte byte 0 to 255 System.Uint16 ushort 0 to 65535 System.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/overview/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/overview/</guid>
      
      <description>Probability Models Analysis starts with exploration, visualization, summary…
…and then often continues with building probability models (OSMEN framework).
The Data Science Process Ask an interesting question What is the scientific goal? What would you do if you had all the data? What do you want to predict or estimate? Get the data How was the data sampled? Which data is relevant? Are there privacy issues? Explore the data Plot the data.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/overview/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/overview/</guid>
      
      <description>Concepts Null hypothesis A default hypothesis that a quantity to be measured is zero (null).
The null hypothesis is true if data values are drawn from the hypothesized distribution. p-value The probability of obtaining observed, or more extreme, results when the null hypothesis is true.
The probability that an observed difference could have just occurred by chance. A p-value near zero provides evidence against the null hypothesis. t-test A t-test automatically tests the null hypothesis that the mean value of the data is zero.</description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/cli/git/overview/</link>
      <pubDate>Wed, 26 May 2021 10:13:25 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/overview/</guid>
      
      <description>Git A distributed version control system
Concepts commit – save the state of your project (take a snapshot of all files and store a reference to that snapshot)
File States unmodified – file has not been changed modified – file has been changed but not committed staged – file has been marked to go into next commit snapshot committed – file stored in database untracked – files in your working directory that were not in last snapshot and not in staging tracked – files Git knows about: unmodified, modified, and staged file states Sections of a Git Project working – a single checkout of one version of the project staging – a file, generally in the Git directory, of information about what goes into the next commit (aka index) repository – metadata and database of the project Git Command Groups Main Commands Command Description add Add file contents to the index am Apply a series of patches from a mailbox archive Create an archive of files from a named tree bisect Use binary search to find the commit that introduced a bug branch List, create, or delete branches bundle Move objects and refs by archive checkout Switch branches or restore working tree files cherry-pick Apply the changes introduced by some existing commits citool Graphical alternative to git-commit clean Remove untracked files from the working tree clone Clone a repository into a new directory commit Record changes to the repository describe Give an object a human readable name based on an available ref diff Show changes between commits, commit and working tree, etc fetch Download objects and refs from another repository format-patch Prepare patches for e-mail submission gc Cleanup unnecessary files and optimize the local repository gitk The Git repository browser grep Print lines matching a pattern gui A portable graphical interface to Git init Create an empty Git repository or reinitialize an existing one log Show commit logs maintenance Run tasks to optimize Git repository data merge Join two or more development histories together mv Move or rename a file, a directory, or a symlink notes Add or inspect object notes pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects range-diff Compare two commit ranges (e.</description>
      
    </item>
    
    <item>
      <title>ISIC Kaggle</title>
      <link>http://localhost:1313/projects/isic-kaggle/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/projects/isic-kaggle/</guid>
      
      <description>ISIC Kaggle Competition </description>
      
    </item>
    
    <item>
      <title>obsidian</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/obsidian/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/obsidian/</guid>
      
      <description>Abstract Obsidian is a Markdown-powered note taking tool.
Callouts To create a callout, add [!info] to the first line of a blockquote, like so:
&amp;gt; [!info] &amp;gt; Here&amp;#39;s a callout block. &amp;gt; It supports **Markdown**, [[Wikilinks]], and [[Embedded files|embeds]]. &amp;gt; ![[Somefile.jpg]] Callout Types There are the callout types and their aliases:
abstract (summary, tldr) info todo tip (hint, important) success (check, done) question (help, faq) warning (caution, attention) failure (fail, missing) danger (error) bug example quote (cite) Folding Fallouts are made foldable by adding a + (expanded by default) or - (collapsed by default) after the type identifier:</description>
      
    </item>
    
    <item>
      <title>mermaid</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/mermaid/</link>
      <pubDate>Sat, 08 Jun 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/mermaid/</guid>
      
      <description>Absract Documentation: https://mermaid.js.org/intro/
A JavaScript-based diagramming and charting tool that renders Markdown-inspired text into diagrams.
Syntax Declaration All diagrams begin with a diagram type declaration: this is the first line of the code.
Comments Comments are prefixed with %% and must be on their own line:
flowchart LR %% this is a sample comment A --&amp;gt; B --&amp;gt; C flowchart LR %% this is a sample comment A --&amp;gt; B --&amp;gt; C Keywords The following are restricted keywords/phrases with workarounds:</description>
      
    </item>
    
    <item>
      <title>onedrive</title>
      <link>http://localhost:1313/wieserpedia/cli/onedrive/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/onedrive/</guid>
      
      <description>Resetting OneDrive Two options - try them in this order:
Option 1 Win &amp;gt; Run &amp;gt; wsreset.exe Close the Microsoft Store window. Option 2 Win &amp;gt; Run &amp;gt; %localappdata%\Microsoft\OneDrive\onedrive.exe /reset If the above fails, try:
Win &amp;gt; Run &amp;gt; C:\Program Files\Microsoft OneDrive\onedrive.exe /reset </description>
      
    </item>
    
    <item>
      <title>checksums</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/checksums/</link>
      <pubDate>Sun, 28 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/checksums/</guid>
      
      <description>Overview Use checksums to verify file integrity by reading their SHA hash digest.
Use shasum [OPTIONS] FILE # reads SHA-1 sum for FILE Options:
--algorithm &amp;lt;n&amp;gt; # Use hash algorith n where n is 1 (default), 224, 256, 384, 512, 512224, 512256. Note: 512224 is 512/224 and 512256 is 512/256. --binary Read in binary mode (default = --text mode) --UNIVERSAL Read in universal newlines mode (produces the same digest on Windows/Unix/Mac) </description>
      
    </item>
    
    <item>
      <title>plex media server</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/debian/plex-media-server/</link>
      <pubDate>Sun, 28 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/debian/plex-media-server/</guid>
      
      <description>Overview Plex is a local-first media server. See https://www.plex.tv for more information.
Installation Create Plex&amp;rsquo;s apt source: echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list Update apt and install: sudo apt update sudo apt install plexmediaserver Migrate Metadata Library By default, Plex&amp;rsquo;s metadata library is located at /var/lib/plexmediaserver/Library/Application Support/Plex Media Server/. On systems with a small /var partition, this can be problematic. To relocate the metadata library:
Stop Plex:</description>
      
    </item>
    
    <item>
      <title>.net application models</title>
      <link>http://localhost:1313/wieserpedia/_net/application-models/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/application-models/</guid>
      
      <description>Overview This mindmap shows .NET application models and their relationships.</description>
      
    </item>
    
    <item>
      <title>inheritance</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/inheritance/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/inheritance/</guid>
      
      <description>Generic Collection Inheritance This visual describes the primary generic collection types in .NET and the interfaces they inherit.</description>
      
    </item>
    
    <item>
      <title>visual studio template</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/visual-studio-template/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/visual-studio-template/</guid>
      
      <description>Overview This brace map describes the file structure of the Visual Studio Blazor WASM template.</description>
      
    </item>
    
    <item>
      <title>bpmn 2.0</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/bpmn-2/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/bpmn-2/</guid>
      
      <description>Abstract Business Process Modeling Notation (BPMN) 2.0 is a standard for graphically representing business process models.
Credit: Some content from https://www.drawio.com/blog/bpmn-2-0
This mind map describes the elements of BPMN 2.0 along with rules and naming conventions. Click the image for the full-size version.
Credit: This mind map was created with content from https://www.bpmnquickguide.com/
Rules Overview A BPMN Diagram depicts a subset (which may be complete) of a BPMN Process Model. A BPMN Diagram is not a dataflow diagram.</description>
      
    </item>
    
    <item>
      <title>deep learning</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/deep-learning/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/deep-learning/</guid>
      
      <description>Abstract Deep learning is advanced form of machine learning that emulates the way the human brain learns. Creates an artificial neural network that simulates electrochemical activity in biological neurons by using mathematical functions.
Artificial Neural Networks (ANN) Artificial neural networks consist of multiple layers of neurons. Each neuron is a function. This architecture of deeply-nested functions is where deep learning gets its name.
The models ANN&amp;rsquo;s produce are known as deep neural networks.</description>
      
    </item>
    
    <item>
      <title>latex</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/latex/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/latex/</guid>
      
      <description>Reference Script Symbol LaTeX Accents Hat $\hat{y}$ \hat{y} Bar $\bar{a}$ \bar{a} Dot $\dot{a}$ \dot{a} Double dot $\ddot{a}$ \ddot{a} Alphabet (Greek) alpha $\alpha$ \alpha beta $\beta$ \beta gamma $\gamma$ \gamma delta $\delta$ \delta Delta $\Delta$ \Delta epsilon $\epsilon$ \epsilon zeta $\zeta$ \zeta theta $\theta$ \theta Theta $\Theta$ \Theta lambda $\lambda$ \lambda mu $\mu$ \mu omicron $\omicron$ \omicron pi $\pi$ \pi rho $\rho$ \rho sigma $\sigma$ \sigma Arrows Gets $\gets$ \gets To $\to$ \to Brackets Parenthesis $\left ( \frac{a}{b} \right )$ \left ( \frac{a}{b} \right ) Bracket $\left[ \frac{a}{b} \right]$ \left[ \frac{a}{b} \right] Angle Bracket $\left \langle \frac{a}{b} \right \rangle$ \left \langle \frac{a}{b} \right \rangle Brace $\left{ \frac{a}{b} \right}$ \left\{ \frac{a}{b} \right\} Fractions &amp;amp; coefficients Fractions $\frac{1}{2}$ \frac{1}{2} Small fractions $\tfrac{1}{2}$ \tfrac{1}{2} Large fractions $\dfrac{k}{k-1}$ \dfrac{k}{k-1} Binomial coefficients $\binom{n}{k}$ \binom{n}{k} Functions Function $f(x)$ f(x) Sum $\sum_{k=1}^N k^2$ \sum_{k=1}^N k^2 Operators Plus-minus $\pm$ \pm Times $\times$ \times Division $\div$ \div Not equal $\neq$ \neq Approximately $\approx$ \approx Equivalent $\equiv$ \equiv Not equivalent $\not\equiv$ \not\equiv Square root $\sqrt{3}$ \sqrt{3} Nth root $\sqrt[n]{3}$ \sqrt[n]{3} Scripts Superscript $a^2$ a^2 Subscript $a_2$ a_2 Grouping $a^{2+2}$ a^{2+2} Super &amp;amp; sub $x_2^3$ x_2^3 Wide hat $\widehat{a b c}$ \widehat{a b c} Overline $\overline{a b c}$ \overline{a b c} Underline $\underline{a b c}$ \underline{a b c} More https://xmind.</description>
      
    </item>
    
    <item>
      <title>binary classification</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/binary-classification/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/binary-classification/</guid>
      
      <description>Abstract [Reference] In binary classification supervised machine learning, the label represents a class that describes whether the observed item is or is not an instance of a specific class.
Predict one of two mutually exclusive outcomes. Example: whether a patient is at risk for diabetes based on weight, age, blood glucose level, etc. Training Binary Classification Models Use an algorithm to fit the training data to a function that calculates the probability of the class label being $true$.</description>
      
    </item>
    
    <item>
      <title>multi class classification</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/multi-class-classification/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/multi-class-classification/</guid>
      
      <description>Abstract [Reference] In multi-class classification supervised machine learning, the label represents one of multiple possible classes.
Usually, the labels are mutually exclusive. In multi-label classification models, there may be more than one valid label for an observation. Follows the same train &amp;gt; iterate &amp;gt; evaluate process as regression and binary classification. Examples: The specifies of penguin based on its physical measurements. The genre of a movie based on its cast, director and budget.</description>
      
    </item>
    
    <item>
      <title>regression</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/regression/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/machine-learning/supervised/regression/</guid>
      
      <description>Abstract [Reference] In regression-based supervised machine learning, the label predicted by the model is a numeric value.
Training Regression Models Split the data (randomly) to create a training dataset and a validation dataset. Use a regression algorithm (perhaps linear regression) to fit the training data to a model. Use the validation dataset to test the model by predicting labels for the features. Evaluate the model&amp;rsquo;s performance by comparing the known actual labels in the validation dataset to the labels that the model predicted.</description>
      
    </item>
    
    <item>
      <title>responsible ai</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/responsible-ai/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/responsible-ai/</guid>
      
      <description>Abstract [Documentation] Microsoft&amp;rsquo;s Responsible AI standard defines a responsible AI system as ethical (inclusive and accountable) and explainable (fair, transparent, reliable, safe, private and secure).
The Six Responsible AI Principles:
Fairness How might an AI system allocate opportunities, resources, or information in ways that are fair to the humans who use it?
An AI system&amp;rsquo;s decisions must not discriminate against, or express a bias toward, a group or individual based on gender, race, sexual orientation, or religion.</description>
      
    </item>
    
    <item>
      <title>prompt engineering</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/prompt-engineering/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/prompt-engineering/</guid>
      
      <description>Overview Prompt engineering is a field of study of the design and optimization of prompts to deliver consistent and quality completions for a given model.
Motivation LLMs have a variety of shortcomings to produce reliable and consistent completions:
The model responses are stochastic (the same prompt may produce different responses). The model can fabricate (previously: hallucinate) responses. The model capabilities vary. Prompt Construction Basic prompt Prompt
Oh say can you see</description>
      
    </item>
    
    <item>
      <title>windows 11 shortcuts</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/windows/windows-11-shortcuts/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/windows/windows-11-shortcuts/</guid>
      
      <description>Overview These notes are select Windows 11 keyboard/trackpad shortcuts. They are not all-inclusive.
Windows Key Shortcut Action Win + D Show Desktop Win + E Explorer Win + H Hear (voice typing) Win + I Settings Win + K Cast Win + L Lock Win + M Minimize All Win + R Run Win + S Search Win + V Clipboard history Win + X Quick Link menu Win + .</description>
      
    </item>
    
    <item>
      <title>glossary</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/glossary/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/glossary/</guid>
      
      <description>artificial intelligence A field of computer science that seeks to create intelligent machines that can replicate or exceed human intelligence.
deep learning A machine learning technique in which layers of neural networks are used to process data and make decisions.
Related: neural networks
generative AI [Documentation] Artificial intelligence that is capable of generating text, images, and other content.
Related: large language model
generative pre-trained transformer (GPT) A generative AI model that uses a transformer architecture.</description>
      
    </item>
    
    <item>
      <title>large language models</title>
      <link>http://localhost:1313/wieserpedia/data-science/ai/generative-ai/large-language-models/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/ai/generative-ai/large-language-models/</guid>
      
      <description>Overview Large Language Model — A generative AI model that receives natural language text as input and generates text as output.
Components neural network parameters weights tuning Input and Output Prompts The input of the large language model.
A prompt may be an instruction specifying the type of output is expected of the model. Example instructions: Summarizing a text (&amp;ldquo;Summarize the following and extract insights&amp;rdquo;) Creative ideation and design (&amp;ldquo;Write an assignment for high school students including four open-ended questions about Louis XIV and his court&amp;rdquo;) Q&amp;amp;A (&amp;ldquo;Who is Louis XIV and why is he an important historical character?</description>
      
    </item>
    
    <item>
      <title>devops engineer</title>
      <link>http://localhost:1313/wieserpedia/miscellaenous/devops-engineer/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/miscellaenous/devops-engineer/</guid>
      
      <description>Abstract An IT generalist with knowledge of development and operations including programming, infrastructure management, systems administration and DevOps toolchains. They are DevOps evangelists, automation experts, release managers, CAB members, software developers, and QA engineers.
Roles and Responsibilities Release Engineering Build and deploy application code Select, provision, and maintain CI/CD tooling Writing &amp;amp; maintaining build and deploy scripts Infrastructure Provisioning Deploy and maintain servers, storage and network resources required to host applications DevOps Advocacy Evangelize the DevOps culture Educate others on DevOps processes throughout the organization Skills Communication &amp;amp; collaboration With teams, managers and customers Soliciting feedback on the value stream System administration Provisioning and managing servers, databases, storage and network resources Security monitoring System patching Managing internal and external network connectivity Experience with DevOps toolchains Configuration management Configuration management tools such as Chef, Puppet or Ansible Containers and container orchestration CI/CD practices and tools System architecture &amp;amp; provisioning Infrastructure as Code Clouds (Azure, AWS, GCP) Programming and scripting </description>
      
    </item>
    
    <item>
      <title>constructs</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/constructs/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/constructs/</guid>
      
      <description>Abstract These notes contain various .NET regular expression constructs used for forming regular expressions.
Anchors Anchors cause a match to succeed or fail depending on the current position, but do not advance through the string.
Anchor Match must… Example Matches ^ or \A start at beginning of string $ or \Z occur at the end of the string or before the \n \z occur at the end of the string \G occur at point where previous match ended \G\d\ &amp;ldquo;(1)&amp;rdquo; &amp;ldquo;(3)&amp;rdquo; &amp;ldquo;(5)&amp;rdquo; in (1)(3)(5)[7](9) \b occur on a boundary between a \w and a \W character \B NOT occur on a \b boundary Character Escapes Escaped char Matches \a Bell character \b Backspace \t Tab \r Carriage return (note: this is not the same as \n) \v Vertical tab \f Form feed \n Newline \e Escape key (\u001b) \\ Back slash Character Classes Class Matches any single… [ae] character in the group (case-sensitive) [^aei] character NOT in the group (case-sensitive) [A-Z] character in the range .</description>
      
    </item>
    
    <item>
      <title>performance</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/performance/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/regular-expressions/performance/</guid>
      
      <description>Regular Expression Engine Performance Considerations There are five techniques for coupling the regex engine to a regex pattern:
Instantiate a RegEx object (interpreted regular expressions) Call a static pattern-matching method (interpreted) Instantiate a RegEx object with the Compiled option (compiled regular expressions) Create a RegEx object and save it to a standalone assembly (Regex.CompileToAssembly) Use the .NET regular expression source generator, RegexGenerator (requires .NET 7+) Technique Invoked via Construction Cost Execution Cost Considerations Use case Interpreted new Regex() a Regex static method Low High Cost is incurred each instantiation A Regex that is called infrequently and high performance cost is acceptable Compiled RegexOptions.</description>
      
    </item>
    
    <item>
      <title>glossary</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/glossary/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/glossary/</guid>
      
      <description>Abstract Terms defined here are not defined elsewhere in these notes.
Agile An iterative approach to project management and software development that helps teams deliver value to their customers quickly. It involves breaking the project down into phases and emphasizes continuous collaboration and improvement.
Agile was encoded in the Agile Manifesto which defines four values and 12 principles for agile software development.
4 Values Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan 12 Principles Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</description>
      
    </item>
    
    <item>
      <title>mocking events</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/mocking-events/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/mocking-events/</guid>
      
      <description>Overview Assuming this code:
public class MessageEventArgs : EventArgs { public string Message { get; set; } } public interface IService { event EventHandler&amp;lt;MessageEventArgs&amp;gt; Sent; event EventHandler&amp;lt;MessageEventArgs&amp;gt; Received; Task SendAsync(string message); void Send(string message); string Receive(); Task&amp;lt;string&amp;gt; ReceiveAsync(); } Function Calls In this approach, an event (Sent) is raised when a configured function (which, in this case, is a method with no return value, Send()) is invoked:
// ARRANGE var mock = new Mock&amp;lt;IService&amp;gt;(); mock.</description>
      
    </item>
    
    <item>
      <title>mocking httpclient</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/mocking-httpclient/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/mocking-httpclient/</guid>
      
      <description>Overview Since HttpClient is not backed by an interface, the approach to get an HttpClient for testing is different:
Mock HttpMessageHandler: var handlerMock = new Mock&amp;lt;HttpMessageHandler&amp;gt;(MockBehavior.Strict); Set up the mock: // Call Protected() since since HttpMessageHandler&amp;#39;s constructor is protected: handlerMock.Protected() // Override HttpMessageHandler&amp;#39;s protected internal abstract SendAsync method: .Setup&amp;lt;Task&amp;lt;HttpResponseMessage&amp;gt;&amp;gt;(&amp;#34;SendAsync&amp;#34;, ItExpr.IsAny&amp;lt;HttpRequestMessage&amp;gt;(), ItExpr.IsAny&amp;lt;CancellationToken&amp;gt;()) .ReturnsAsync(new HttpResponseMessage() { StatusCode = HttpStatusCode.OK, Content = new StringContent(httpGetResponseStringContent) }); Pass the mocked HttpMessageHandler to the HttpClient constructor to get a test HttpClient: var httpClient = new HttpClient(handlerMock.</description>
      
    </item>
    
    <item>
      <title>qpdf</title>
      <link>http://localhost:1313/wieserpedia/cli/qpdf/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/qpdf/</guid>
      
      <description>Overview [Documentation] qpdf is a command line tool that performs content-preserving transformations on PDF files.
Installation winget install qpdf Usage Merge several PDF documents into one:
qpdf --empty --pages firstFile.pdf secondFile.pdf -- output.pdf </description>
      
    </item>
    
    <item>
      <title>pipereader</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/pipereader/</link>
      <pubDate>Wed, 08 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/pipereader/</guid>
      
      <description>Overview PipeReader manages memory on the caller&amp;rsquo;s behalf.
Always call PipeReader.AdvanceTo after calling PipeReader.ReadAsync:
ReadAsync returns a ReadOnlySequence&amp;lt;byte&amp;gt; that is only valid until the call to AdvanceTo. Using the return value after the call to AdvanceTo throws an exception. PipeReader.AdvanceTo takes two SequencePosition arguments: one that marks how much data was consumed, and one that marks how much of the buffer was observed.
Consumed — When data is marked as consumed, the pipe returns the memory to the underlying buffer pool.</description>
      
    </item>
    
    <item>
      <title>pipewriter</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/pipewriter/</link>
      <pubDate>Wed, 08 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipelines/pipewriter/</guid>
      
      <description>Overview PipeWriter manages buffers for writing on the caller&amp;rsquo;s behalf. It implements IBufferWriter&amp;lt;byte&amp;gt; to get access to buffers to perform writes without extra buffer copies:
async Task WriteHelloAsync(PipeWriter writer, CancellationToken cancellationToken = default) { // Request a buffer of at least 5 bytes from the PipeWriter. Memory&amp;lt;byte&amp;gt; memory = writer.GetMemory(5); // Write directly into the buffer. int written = Encoding.ASCII.GetBytes(&amp;#34;Hello&amp;#34;.AsSpan(), memory.Span); // Tell the writer how many bytes were written. writer.</description>
      
    </item>
    
    <item>
      <title>xml documentation</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/xml-documentation/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/xml-documentation/</guid>
      
      <description>Overview [Documentation] C# source files can contain structured comments (XML doc) that produce API documentation for the types contained therein. The compiler creates an XML files that contains structured data representing the comments and the API signatures. Other tools can process these XML files to produce human-readable documentation.
Generating XML Documentation To enable XML documentation:
.csproj
&amp;lt;PropertyGroup&amp;gt; &amp;lt;GenerateDocumentationFile&amp;gt;true&amp;lt;/GenerateDocumentationFile&amp;gt; &amp;lt;/PropertyGroup&amp;gt; With this switch enabled, the compiler generates warning CS1591 for any publicly visible member without XML doc.</description>
      
    </item>
    
    <item>
      <title>configuring mocks — properties</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-properties/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-properties/</guid>
      
      <description>Overview Credit: https://hamidmosalla.com/2017/08/03/moq-working-with-setupget-verifyget-setupset-verifyset-setupproperty/
Examples in these notes use this system:
public interface IPropertyManager { string FirstName { get; set; } string LastName { get; set; } void MutateFirstName(string name); } public class PropertyManager : IPropertyManager { public string FirstName { get; set; } public string LastName { get; set; } public void MutateFirstName(string name) =&amp;gt; this.FirstName = name; } class PropertyManagerConsumer { private readonly IPropertyManager _propertyManager; public PropertyManagerConsumer(IPropertyManager propertyManager) =&amp;gt; _propertyManager = propertyManager; public void ChangeName(string name) =&amp;gt; _propertyManager.</description>
      
    </item>
    
    <item>
      <title>configuring mocks with matchers</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-with-matchers/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-with-matchers/</guid>
      
      <description>Overview Argument matchers can be used for configuring and verifying methods and properties.
Some test examples below use this system:
public class Service { private readonly IFoo _foo; public Service(IFoo foo) =&amp;gt; _foo = foo ?? throw new ArgumentNullException(nameof(foo)); public void Ping() =&amp;gt; _foo.DoSomething(&amp;#34;PING&amp;#34;); } public interface IFoo { bool DoSomething(string command); } And are arranged like this:
var mock = new Mock&amp;lt;IFoo&amp;gt;(); var sut = new Service(mock.Object); Configuring Method Calls with Matchers It.</description>
      
    </item>
    
    <item>
      <title>integration testing</title>
      <link>http://localhost:1313/wieserpedia/asp.net/testing/integration-testing/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/testing/integration-testing/</guid>
      
      <description>Overview [Documentation] Integration tests confirm that two or more app components work together to produce an expected result, possibly including every component required to fully process a request. They test the app&amp;rsquo;s infrastructure including database, file system, network appliances, and the request-response pipeline. They use the app&amp;rsquo;s actual components instead of mocks or fakes.
Tip: Separate unit tests from integration tests in separate projects.
In ASP.NET integration tests:
The test project has a reference to the system under test.</description>
      
    </item>
    
    <item>
      <title>configuring mocks — methods</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-methods/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/configuring-mocks-methods/</guid>
      
      <description>Overview Credit: https://docs.educationsmediagroup.com/unit-testing-csharp/moq Credit: https://softchris.github.io/pages/dotnet-moq.html#creating-our-first-mock
Mocks are configured using the Setup() and Returns() methods. This configuration, also known as instruction, tells the mock to answer with a certain response if a method or property is called.
Some test examples below use this system:
public class Service { private readonly IFoo _foo; public Service(IFoo foo) =&amp;gt; _foo = foo ?? throw new ArgumentNullException(nameof(foo)); public void Ping() =&amp;gt; _foo.DoSomething(&amp;#34;PING&amp;#34;); } public interface IFoo { bool DoSomething(string command); } And are arranged like this:</description>
      
    </item>
    
    <item>
      <title>argument matching</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/argument-matching/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/argument-matching/</guid>
      
      <description>Overview [Documentation] Argument matchers provide a way to:
specify a call or group of calls so that a return value can be set for all matching calls check a matching call has been received Argument matchers can be used:
when setting return values (with a call to Returns()) when validating calls (with a call to Received()) Uses Ignoring Arguments Use Arg.Any&amp;lt;T&amp;gt;() to ignore an argument of type T:
calculator.Add(Arg.Any&amp;lt;int&amp;gt;(), 5).Returns(7); Assert.</description>
      
    </item>
    
    <item>
      <title>creating substitutes</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/creating-substitutes/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/creating-substitutes/</guid>
      
      <description>Overview [Documentation] Substitutes var substitute = Substitute.For&amp;lt;ISomeInterface&amp;gt;(); // or var someClass = Substitute.For&amp;lt;SomeClassWithCtorArgs&amp;gt;(5, &amp;#34;hello world&amp;#34;); Substituting for Multiple Types Substituting for multiple interfaces:
var command = Substitute.For&amp;lt;ICommand, IDisposable&amp;gt;(); var runner = new CommandRunner(command); runner.RunCommand(); command.Received().Execute(); ((IDisposable)command).Received().Dispose(); Substituting for multiple interfaces and a class:
var substitute = Substitute.For( new[] { typeof(ICommand), typeof(ISomeInterface), typeof(SomeClassWithCtorArgs) }, new object[] { 5, &amp;#34;hello world&amp;#34; } ); Assert.IsInstanceOf&amp;lt;ICommand&amp;gt;(substitute); Assert.IsInstanceOf&amp;lt;ISomeInterface&amp;gt;(substitute); Assert.IsInstanceOf&amp;lt;SomeClassWithCtorArgs&amp;gt;(substitute); Substituting for Delegates var func = Substitute.</description>
      
    </item>
    
    <item>
      <title>best practices</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/best-practices/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/best-practices/</guid>
      
      <description>Overview [Documentation] Use these best practices when developing unit tests.
Avoid Dependencies in Unit Tests Use dependency injection and the Explicit Dependencies Principle.
Naming Tests Tests should have a 3-part name: {MethodBeingTested}{ScenarioToTest}{ExpectedBehavior}. Consider:
Bad:
[Fact] public void Test_Single() { /* ... */ } Good:
public void Add_SingleNumber_ReturnsSameNumber() { /* ... */ } Arrange, Act, Assert Arrange the objects by creating them and setting them up as necessary. Act on an object.</description>
      
    </item>
    
    <item>
      <title>code coverage tooling</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/code-coverage-tooling/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/code-coverage-tooling/</guid>
      
      <description>Overview [Documentation] Types of code coverage tools:
DataCollectors — monitor test execution and collect information about test runs. Part of VSTest; built into Visual Studio. Report generators — use data collected by DataCollectors to generate (often HTML-formatted) reports. ReportGenerator Coverlet — a cross-platform code-coverage tool for .NET. An alternative to VSTest. xUnit integrates with Coverlet. dotnet-coverage </description>
      
    </item>
    
    <item>
      <title>unit testing with mstest</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-mstest/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-mstest/</guid>
      
      <description>Overview [Documentation] [Documentation] See also: https://github.com/microsoft/testfx/blob/main/docs/README.md
MSTest unit tests are created with dotnet new mstest -o TestProjectName.
MSTest Attributes TestClass and TestMethod The TestClass attribute declares a class that contains unit tests and, optionally, initialization or cleanup methods. The TestMethod attribute declares a test method. Test methods must:
be public void or public Task or public async Task be parameterless Unit tests projects can contain other classes that do not have the [TestClass] attribute, and test classes can contain other methods that do not have the [TestMethod] attribute.</description>
      
    </item>
    
    <item>
      <title>unit testing with nunit</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-nunit/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-nunit/</guid>
      
      <description>Overview [Documentation] See also: https://docs.nunit.org/articles/nunit/intro.html
NUnit unit tests are created with dotnet new nunit -o TestProjectName.
Note: NUnit still uses Setup and Teardown methods, which is no longer considered best practice.
NUnit Attributes see inline comments.
using NUnitFramework; namespace Prime.UnitTests.Services; [TestFixture] // Declares a class that contains unit tests. public class PrimeService_IsPrimeShould { private PrimeService _primeService; [SetUp] // Equivalent to a test class constructor. public void SetUp() { _primeService = new PrimeService(); } [Test] // Declares a test method.</description>
      
    </item>
    
    <item>
      <title>unit testing with xunit</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-xunit/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/unit-testing/unit-testing-with-xunit/</guid>
      
      <description>Overview [Documentation] See also: https://xunit.net/#documentation
xUnit unit tests are created with dotnet new xunit -o TestProjectName.
xUnit Attributes Fact Used to declare a test method that is run by the test runner:
using Xunit; using Prime.Services; namespace Prime.UnitTests.Services; public class PrimeService_IsPrimeShould { [Fact] public void IsPrime_InputIs1_ReturnFalse() { var primeService = new PrimeService(); bool result = primeService.IsPrime(1); Assert.False(result, &amp;#34;1 should not be prime&amp;#34;); } } Theory and InlineData These attributes work together to test multiple values.</description>
      
    </item>
    
    <item>
      <title>collection expressions</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/collection-expressions/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/collection-expressions/</guid>
      
      <description>Overview [Documentation] Availability: C# 12
Use collection expressions to create common collection values. This syntax can be assigned to many different collection types. It contains a sequence of elements between [ and ].
Usage Collection expressions can be used across many constructs:
// In a variable declaration: Span&amp;lt;string&amp;gt; weekDays = [ &amp;#34;Sun&amp;#34;, &amp;#34;Mon&amp;#34;, &amp;#34;Tue&amp;#34;, &amp;#34;Wed&amp;#34;, &amp;#34;Thu&amp;#34;, &amp;#34;Fri&amp;#34;, &amp;#34;Sat&amp;#34; ]; // To initialize a private field: private static readonly ImmutableArray&amp;lt;string&amp;gt; _months = [ &amp;#34;Jan&amp;#34;, &amp;#34;Feb&amp;#34;, &amp;#34;Mar&amp;#34;, &amp;#34;Apr&amp;#34;, &amp;#34;May&amp;#34;, &amp;#34;Jun&amp;#34;, &amp;#34;Jul&amp;#34;, &amp;#34;Aug&amp;#34;, &amp;#34;Sep&amp;#34;, &amp;#34;Oct&amp;#34;, &amp;#34;Nov&amp;#34;, &amp;#34;Dec&amp;#34; ]; // To initialize a property with an expression body: public IEnumerable&amp;lt;int&amp;gt; MaxDays =&amp;gt; [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ]; public int Sum(IEnumerable&amp;lt;int&amp;gt; values) =&amp;gt; values.</description>
      
    </item>
    
    <item>
      <title>load and stress testing</title>
      <link>http://localhost:1313/wieserpedia/asp.net/testing/load-and-stress-testing/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/testing/load-and-stress-testing/</guid>
      
      <description>Overview [Documentation] Load test and stress tests are types of performance tests:
Load tests test whether an app can handle a specified load of users for a certain scenario while satisfying a response goal. The app&amp;rsquo;s conditions are normal. Stress tests test app stability under extreme conditions for extended periods of time. This is done via high user load or limiting the app&amp;rsquo;s compute resources. In stress tests, the app is expected to recover from failure and gracefully return to expected behavior.</description>
      
    </item>
    
    <item>
      <title>pipes</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipes/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/pipes/</guid>
      
      <description>Overview [Documentation] Pipes provide means for interprocess communication. There are two types:
Anonymous pipes provide interprocess communication on a local computer. Named pipes provide interprocess communication over a network. Pipe Type Communication
Direction Server Instances Used for communication between&amp;hellip; Implemented Via Anonymous One-way Single Threads or between parent/child processes AnonymousPipeServerStream and AnonymousPipeClientStream Named Duplex Multiple Two processes over a network NamedPipeServerStream and NamedPipeClientStream </description>
      
    </item>
    
    <item>
      <title>async</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/async/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/async/</guid>
      
      <description>Overview [Documentation] The async modifier specifies that a method, lambda, or anonymous method is asynchronous.
An async method runs synchronously until it reaches an await expression. At this point, the method is suspended until the awaited task is complete. In the meantime, control returns to the caller of the async method. An async method does not run on their own thread by default. Behind the scenes, the the C# compiler transforms the method into a state machine.</description>
      
    </item>
    
    <item>
      <title>shims</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/shims/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/shims/</guid>
      
      <description>Overview [Documentation] A shim is code that intercepts a call to a method and diverts it to shim code within a test. Use shims when you need to isolate your code from external assemblies.
Caution: Tests involving shim types cannot run concurrently. This is not enforced by the Fakes runtime.
Example: Creating and Using Shims Create a class: // HexFile.cs public class HexFile { public string[] Records { get; private set; } public HexFile(string path) { this.</description>
      
    </item>
    
    <item>
      <title>stubs</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/stubs/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/microsoft-fakes/stubs/</guid>
      
      <description>Overview [Documentation] A stub is a small piece of code that replaces another component during testing.
Using stubs effectively requires application design such that each component depends only on interfaces, not other components:
Example: Creating and Using Stubs Create an interface:
// IStockFeed.cs public interface IStockFeed { int GetSharePrice(string company); } Create a class that uses the interface:
// StockAnalyzer.cs public class StockAnalyzer { private IStockFeed stockFeed; public StockAnalyzer(IStockFeed feed) { stockFeed = feed; } public int GetContosoPrice() { return stockFeed.</description>
      
    </item>
    
    <item>
      <title>code coverage</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/code-coverage/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/code-coverage/</guid>
      
      <description>Code Coverage Code coverage refers to the amount of code that is covered by unit tests.
Visual Studio&amp;rsquo;s code coverage tools requires Enterprise edition.
As an alternative, see dotnet-coverage.</description>
      
    </item>
    
    <item>
      <title>test explorer</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/test-explorer/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/test-explorer/</guid>
      
      <description>Running Tests with Test Explorer Open Test Explorer: Ctrl + E,T Run all tests: Ctrl + R,V Run a subset of tests: Ctrl + R,T Run tests after every build: Text Explorer toolbar &amp;gt; Gear icon &amp;gt; Run Tests After Build </description>
      
    </item>
    
    <item>
      <title>error handling</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/error-handling/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/error-handling/</guid>
      
      <description>Overview [Documentation] I/O methods throw these exceptions:
IOException — the base class of all System.IO exceptions FileNotFoundException DirectoryNotFoundException DriveNotFoundException PathTooLongException OperationCanceledException UnauthorizedAccessException I/O methods wrap calls to the underlying operating system. If an I/O error occurs in code executed by the OS, the OS returns error information to the .NET I/O method. This error maps to a .NET exception type. For example, on Windows, ERROR_FILE_NOT_FOUND (0x02) maps to FileNotFoundException. However, the precise conditions under which this mapping succeeds varies.</description>
      
    </item>
    
    <item>
      <title>unit testing controllers</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/unit-testing-controllers/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/unit-testing-controllers/</guid>
      
      <description>Overview [Documentation] Unit testing controller logic involves testing a single action (not the dependencies of that action). It does not test filters, routing, model binding, or model validation (these aspects are tested in integration testing).
These notes also apply:
Notes on Unit Testing
See also: Moq
See also: JustMockLite
See also: MyTested.AspNetCore.Mvc
Example Consider this controller with an Index action method:
public class HomeController : Controller { private readonly IBrainstormSessionRepository _sessionRepository; public HomeController(IBrainstormSessionRepository sessionRepository) { _sessionRepository = sessionRepository; } public async Task&amp;lt;IActionResult&amp;gt; Index() { var sessionList = await _sessionRepository.</description>
      
    </item>
    
    <item>
      <title>dev tunnels</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/dev-tunnels/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/dev-tunnels/</guid>
      
      <description>Overview [Documentation] Availability: Visual Studio 2022 17.6+ w/ASP.NET and web development workload installed
Dev Tunnels are a Visual Studio 2022 feature that create ad-hoc connections between machines that cannot directly connect to one another. A URL is created that enables any device with an internet connection to connect to the ASP.NET Core project while it runs on localhost.
Uses:
Testing a web app on other devices Testing an app with external services Making an app temporarily available for presentation Tunnel Options Tunnel types:</description>
      
    </item>
    
    <item>
      <title>hot reload</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/hot-reload/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/hot-reload/</guid>
      
      <description>Overview [Documentation] Availability: ASP.NET Core 6+
.NET Hot Reload applies code changes (including changes to style sheets) to running apps without restarting and losing state. It is designed for use with ASP.NET Core apps.
Enabling via CLI: dotnet watch
Ctrl+R to force reload
When an unsupported edit (a rude edit) is made, dotnet watch asks if you want to restart the app.
Disabling via CLI: dotnet watch --no-hot-reload
via Properties/launchSettings.json:</description>
      
    </item>
    
    <item>
      <title>unit testing</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/unit-testing/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/unit-testing/</guid>
      
      <description>Overview [Documentation] See also: Notes on Unit Testing with MSTest
Key points:
Use unit tests as both design documentation and functional specifications. Visual Studio installs the Microsoft unit testing frameworks for managed and native code (MSTest). Note: MSTest is both a framework and an adapter to that framework. Visual Studio Test Explorer also supports 3rd-party adapters to the MSTest framework: xUnit, NUnit, others(?). Generating Unit Tests and Generating Code Generating Unit Tests from Existing Code Availability: C#, Visual Studio 2019+</description>
      
    </item>
    
    <item>
      <title>data transfer objects</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/data-transfer-objects/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/data-transfer-objects/</guid>
      
      <description>Overview [Documentation] Data Transfer Objects (DTOs) are a subset of a data model. They are used to limit the data that is input or returned from a web app by using a subset of the model. They are also used to prevent over-posting (aka mass assignment) attacks.
Note: not to be confused with a Microsoft.AspNetCore.Components.Web.DataTransfer object.
Preventing Overposting with DTOs Example Overposting Vulnerability Reference: https://andrewlock.net/preventing-mass-assignment-or-over-posting-in-asp-net-core/
Consider this model:
public class UserModel { public string Name { get; set; } public bool IsAdmin { get; set; } } The user can edit the Name property.</description>
      
    </item>
    
    <item>
      <title>IntelliTest</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/intellitest/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/intellitest/</guid>
      
      <description>Overview [Documentation] Availability: Visual Studio 2022 Enterprise Edition, .NET Framework only
Note: Support for .NET 6 is available in Visual Studio 2022 Preview as of 2023-09-23. IntelliTest generates a candidate suite of tests for .NET code. This is configurable via correctness properties. The test suite will evolve automatically as the code under test evolves.</description>
      
    </item>
    
    <item>
      <title>live unit testing</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/live-unit-testing/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/testing-tools/live-unit-testing/</guid>
      
      <description>Overview [Documentation] Availability: Visual Studio 2022 Enterprise Edition
Live Unit Testing executes unit tests automatically and in real time as code changes are made. It works with unit tests created in test projects (see Notes on Unit Testing)
Enabling Pre-requisites:
A .NET Core or .NET Framework project A Unit Test project To enable live unit testing: Test &amp;gt; Live Unit Testing &amp;gt; Start
Visual studio will then rebuild the project and start Live Unit Test, which automatically runs all tests.</description>
      
    </item>
    
    <item>
      <title>options pattern</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/options-pattern/</link>
      <pubDate>Wed, 20 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/options-pattern/</guid>
      
      <description>Overview [Documentation] The options pattern uses classes to provide strongly-typed access to groups of related settings. It uses configuration files like configuration in .NET.
This pattern supports a mechanism to validate configuration data.
Configuring and Using Options High-level Process:
Create options classes that model the configuration data Add instances of Option&amp;lt;TOption&amp;gt; to the DI container Inject the Option&amp;lt;TOption&amp;gt; instances into classes that need them 1. Create Options Classes Options classes must:</description>
      
    </item>
    
    <item>
      <title>code reuse</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/code-reuse/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/code-reuse/</guid>
      
      <description>Overview These notes discuss the differences between project references, file references, class libraries, and shared projects in Visual Studio.
References A reference is an entry in a project file that Visual Studio uses to locate a code component.
Consider buildable project A which references buildable project B. Since B (like A) produces an assembly, you can reference either the project (project reference) or the assembly (file reference).
Project References A project reference is a references to a project&amp;rsquo;s code even if it contains an assembly.</description>
      
    </item>
    
    <item>
      <title>devtools</title>
      <link>http://localhost:1313/wieserpedia/edge/devtools/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/edge/devtools/</guid>
      
      <description>Overview [Documentation] Inspect and debug web pages with DevTools.
Keyboard Shortcuts [Documentation] Ctrl+Shift+I — Open DevTools to Welcome Ctrl+Shift+J — Open DevTools to Console Ctrl+Shift+C — Open DevTools to Elements Ctrl+Shift+H — Display DevTools tooltips Ctrl+Shift+P — Open Command menu Elements The Elements tab displays the DOM tree:
Main Toolbar </description>
      
    </item>
    
    <item>
      <title>code analysis</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/code-analysis/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/code-analysis/</guid>
      
      <description>Overview [Documentation] [Documentation] See notes on code analysis.</description>
      
    </item>
    
    <item>
      <title>system.diagnostics.codeanalysis</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/system.diagnostics.codeanalysis/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/system.diagnostics.codeanalysis/</guid>
      
      <description>Overview Classes in the System.Diagnostics.CodeAnalysis namespace are used to analyze code for conformance to coding conventions.
Class Description AllowNullAttribute Specifies that null is allowed as an input even if the corresponding type disallows it. ConstantExpectedAttribute Indicates that the specified method parameter expects a constant. DisallowNullAttribute Specifies that null is disallowed as an input even if the corresponding type allows it. DoesNotReturnAttribute Specifies that a method that will never return under any circumstance.</description>
      
    </item>
    
    <item>
      <title>http files</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/http-files/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/http-files/</guid>
      
      <description>Overview [Documentation] [Documentation] Availability: ASP.NET Core 8? (documentation is unclear), Visual Studio 2022 v17.6+
HTTP files in Visual Studio allow you to create HTTP requests. You can use the editor to create and send requests and view responses.
File Format The sequence is important:
Variables HTTP request Headers (optional) Body (optional) The request must be in the format HTTP_METHOD URL HTTP_VERSION where HTTP_VERSION is optional and is one of HTTP/1.1 HTTP/2 HTTP/3.</description>
      
    </item>
    
    <item>
      <title>model validation</title>
      <link>http://localhost:1313/wieserpedia/asp.net/advanced/model-validation/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/advanced/model-validation/</guid>
      
      <description>Overview [Documentation] Model state represents errors that come from either the model binding or model validation subsystems. Model validation occurs after model binding and reports errors where the data does not conform to business rules (like a 0 in a field that expects a value from 1 to 5). Both model binding and model validation occur before a controller action method, or a Razor Pages handler method, executes. When a validation error occurs, model validation generates a ModelStateDictionary with the property name as the error key.</description>
      
    </item>
    
    <item>
      <title>uri helpers</title>
      <link>http://localhost:1313/wieserpedia/_net/web/uris/uri-helpers/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/uris/uri-helpers/</guid>
      
      <description>Overview Various classes for working with URIs.
Microsoft.AspNetCore.Http.QueryString [Documentation] &amp;ldquo;Provides correct handling for QueryString value when needed to reconstruct a request or redirect URI string.&amp;rdquo;
Microsoft.AspNetCore.Http.Extensions.QueryBuilder [Documentation] &amp;ldquo;For constructing a query string.&amp;rdquo;
Adding onto an existing query string Constructing a QueryString from a QueryBuilder Microsoft.AspNetCore.Http.Extensions.UriHelper [Documentation] &amp;ldquo;For constructing encoded URIs for use in headers and other URIs.&amp;rdquo;
Combining URI components into an absolute or relative URI Encoding URIs Microsoft.AspNetCore.Mvc.Routing.UrlHelper [Documentation] &amp;ldquo;An implementation of IUrlHelper that contains methods to build URLs for ASP.</description>
      
    </item>
    
    <item>
      <title>application model</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/advanced/application-model/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/advanced/application-model/</guid>
      
      <description>Overview [Documentation] ASP.NET Core MVC defines an application model that represents the components of an MVC app. It includes both abstract interfaces and concrete implementation classes that describe an MVC application. It results from MVC discovering the app&amp;rsquo;s controllers, actions, action parameters, routes, and filters. By modifying the model, an app can follow different conventions than the default MVC behavior.
The application model has this structure:
ApplicationModel └── Controllers (ControllerModel) └── Actions (ActionModel) └── Parameters (ParameterModel) See the documentation for more information.</description>
      
    </item>
    
    <item>
      <title>application parts</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/advanced/application-parts/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/advanced/application-parts/</guid>
      
      <description>Overview [Documentation] An application part is an abstraction over the resources (controllers, view components, tag helpers, Razor Pages, etc) of an ASP.NET Core app. Application parts are used to discover (and avoid loading) ASP.NET Core features from an assembly.</description>
      
    </item>
    
    <item>
      <title>console log provider</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/logging/console-log-provider/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/logging/console-log-provider/</guid>
      
      <description>Overview Availability: .NET 5
Documentation: https://learn.microsoft.com/en-us/dotnet/core/extensions/console-log-formatter
The Console log provider supports three formatting options: Simple, Systemd, and Json.
Registering To register any one of the formatters, use the Add{TYPE}Console extension method:
using Microsoft.Extensions.Logging; using ILoggerFactory loggerFactory = LoggerFactory.Create(builder =&amp;gt; builder.AddSimpleConsole(options =&amp;gt; { options.IncludeScopes = true; options.SingleLine = true; options.TimestampFormat = &amp;#34;HH:mm:ss &amp;#34;; })); Registering via Configuration File { &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; }, &amp;#34;Console&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.</description>
      
    </item>
    
    <item>
      <title>logging for libraries</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/logging/logging-for-libraries/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/logging/logging-for-libraries/</guid>
      
      <description>Overview [Documentation] These notes provide guidance on exposing logging in a library in a way that is consistent with other .NET libraries and frameworks.
ILoggerFactory vs. Injecting ILogger&amp;lt;T&amp;gt; When you need a logger object that can be passed on to multiple classes in the library, use ILoggerFactory. When you need a logger object that is only used in one class and never shared, use a constructor-injected ILogger&amp;lt;T&amp;gt;. Prefer Source-Generated Logging // This partial class is static so it can be used to create extensions on ILogger: internal static partial class LogMessages { // The source-generated LoggerMessageAttribute: [LoggerMessage( Message = &amp;#34;Sold {quantity} of {description}&amp;#34;, Level = LogLevel.</description>
      
    </item>
    
    <item>
      <title>logging and tracing</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/logging-and-tracing/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/logging-and-tracing/</guid>
      
      <description>Overview [Documentation] These notes discuss the differences between logging and tracing and the differences between the many logging APIs available in .NET.
Logging vs. Tracing Both logging and tracing serve as a record of interesting events that occur while a program is running.
Logging is expected to be collected all the time and should have low overhead. Unstructured logging yields log entries that have free-form text content. Structured logging yields log entries with well-defined schema and can be encoded in different machine-readable formats.</description>
      
    </item>
    
    <item>
      <title>configuration</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/configuration/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/configuration/</guid>
      
      <description>Overview [Documentation] Configuration consists of host and app configuration providers. The WebApplicationBuilder contains the host:
var builder = WebApplication.CreateBuilder(args); See also: Configuration in .NET
Concepts Host Configuration Host configuration providers in order of priority for WebApplicationBuilder:
Command line arguments DOTNET_-prefixed environment variables ASPNETCORE_-prefixed environment variables Host configuration providers in order of priority for the .NET Generic Host and Web Host (deprecated):
ASPNETCORE_-prefixed environment variables Command-line arguments DOTNET_-prefixed environment variables Host variables [Documentation] App Configuration App configuration providers in order of priority:</description>
      
    </item>
    
    <item>
      <title>nswag</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/openapi/nswag/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/openapi/nswag/</guid>
      
      <description>Overview [Documentation] NSwag is an implementation of OpenAPI in ASP.NET Core.
Unlike Swashbuckle, it also includes code generation capabilities.
Installation dotnet add package NSwag.AspNetCore Configuration Program.cs
// ... var builder = WebApplication.CreateBuilder(args); builder.Services.AddControllers(); builder.Services.AddOpenApiDocument(); if (app.Environment.IsDevelopment()) { // Add OpenAPI 3.0 document serving middleware // Available at: http://localhost:&amp;lt;port&amp;gt;/swagger/v1/swagger.json app.UseOpenApi(); // Add web UIs to interact with the document // Available at: http://localhost:&amp;lt;port&amp;gt;/swagger app.UseSwaggerUi3(); } // ... Configuring API Information and Description Program.</description>
      
    </item>
    
    <item>
      <title>openapi and swagger</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/openapi/openapi-and-swagger/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/openapi/openapi-and-swagger/</guid>
      
      <description>Overview [Documentation] OpenAPI — a language-agnostic specification for describing REST APIs. Swagger OpenAPI started as Swagger; Swagger was donated to the OpenAPI Initiative in 2015. Swagger is a family of open source and commercial products from SmartBear that work with the OpenAPI specification. OpenAPI spec A document, usually openapi.json, that describes the capabilities of an API.
It is generated from the XML and attribute annotations within controllers and models. Example: openapi.</description>
      
    </item>
    
    <item>
      <title>swashbuckle</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/openapi/swashbuckle/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/openapi/swashbuckle/</guid>
      
      <description>Overview [Documentation] Swashbuckle is an implementation of OpenAPI in ASP.NET Core.
It has 3 main components:
Swashbuckle.AspNetCore.Swagger — a Swagger object model and middleware Swashbuckle.AspNetCore.SwaggerGen — a Swagger generator that builds a SwaggerDocument from routes, controllers and models Swashbuckle.AspNetCore.SwaggerUI — an embedded version of Swagger UI Installation dotnet add package swashbuckle.aspnetcore Configuration Program.cs
// ... builder.Services.AddControllers(); // This is required for minimal APIs: builder.Services.AddEndpointsApiExplorer(); // Adds the Swagger generator: builder.Services.AddSwaggerGen(); if (app.</description>
      
    </item>
    
    <item>
      <title>1. overview (controllers)</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/overview/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/overview/</guid>
      
      <description>Overview [Documentation] Controllers are classes that derive from ControllerBase. If derived from Controller, this would add support for views (for handling web pages rather than API requests). Controllers are activated and disposed on a per-request basis. Knowledge of MVC controllers is needed to use them in controller-based APIs. See Notes on MVC Controllers.
High-Level Process The high-level process for implementing controller-based APIs:
VS &amp;gt; File &amp;gt; New &amp;gt; Project &amp;gt; ASP.</description>
      
    </item>
    
    <item>
      <title>alerts</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/components/alerts/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/components/alerts/</guid>
      
      <description>Overview Contextual feedback messages for typical user actions. Documentation: https://getbootstrap.com/docs/5.3/components/alerts/ Simple Alerts &amp;lt;div class=&amp;#34;alert alert-primary&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple primary alert—check it out! &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;alert alert-secondary&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple secondary alert—check it out! &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;alert alert-success&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple success alert—check it out! &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;alert alert-danger&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple danger alert—check it out! &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;alert alert-warning&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple warning alert—check it out! &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;alert alert-info&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; A simple info alert—check it out!</description>
      
    </item>
    
    <item>
      <title>dotnet</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/dotnet/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/dotnet/</guid>
      
      <description>Overview Documentation: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet Compiling dotnet build Build (compile) the executable for the app.
Configuring dotnet &amp;lt;command&amp;gt; --diagnostics # Enable diagnostic output. dotnet &amp;lt;command&amp;gt; --verbosity &amp;lt;level&amp;gt; # Levels are (q)uiet, (m)inimal, (n)ormal, (d)etailed, (diag)nostic. dotnet new globaljson --sdk-version &amp;lt;ver&amp;gt; # Create a global.json file to target the .NET SDK version ver. The dotnet command searches the current directory and subdirectories for a global.json file, so this can be created in a subdirectory of the project.</description>
      
    </item>
    
    <item>
      <title>threads</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/threads/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/threads/</guid>
      
      <description>Overview Object –&amp;gt; CriticalFinalizerObject –&amp;gt; Thread
Creates and controls a thread, sets its priority, and gets its status. Documentation: https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread?view=net-6.0 Synchronizing Access to Shared Resources Monitor Synchronize access to objects.
The Monitor class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the Monitor.Enter, Monitor.TryEnter, and Monitor.Exit methods. You can also use the Monitor class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</description>
      
    </item>
    
    <item>
      <title>observability and telemetry</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/observability-and-telemetry/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/observability-and-telemetry/</guid>
      
      <description>Overview Observability is the ability to monitor and analyze telemetry about the state of each component in a distributed system, to observe changes in performance, and to diagnose why those changes occur.
Intended to be transparent to the primary operation and have an insignificant performance impact so that it may be used continuously. A combination of logs, metrics, and distributed tracing. Observability approaches in .NET:
Explicitly in code (via OpenTelemetry) Out of process via EventPipe Inside a process via a startup hook — a low-level hook that allows injecting managed code to run before the main application&amp;rsquo;s entry point These notes focus on approach #1 above.</description>
      
    </item>
    
    <item>
      <title>testing with httprepl</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/testing-with-httprepl/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/testing-with-httprepl/</guid>
      
      <description>Overview HttpRepl (Read-Eval-Print-Loop) is a command line tool used to make HTTP requests to test web APIs and view their results. It can test web APIs hosted anywhere, including localhost and Azure App Service. Documentation: https://learn.microsoft.com/en-us/aspnet/core/web-api/http-repl/?view=aspnetcore-7.0&amp;amp;tabs=windows Installation dotnet tool install -g Microsoft.dotnet-httprepl Usage Connecting to a web API httprepl ROOT_URI [--verbose] Example:
httprepl https://localhost:5001 Alternatively, after HttpRepl is running:
&amp;gt; connect ROOT_URI The above commands attempt to find the OpenAPI description automatically.</description>
      
    </item>
    
    <item>
      <title>openai service</title>
      <link>http://localhost:1313/wieserpedia/azure/openai-service/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/azure/openai-service/</guid>
      
      <description>Overview OpenAI is a research and development organization that developed ChatGPT, among other models. Azure OpenAI Service is Microsoft&amp;rsquo;s Azure service that provides access to these models. Documentation: https://devblogs.microsoft.com/_net/getting-started-azure-openai-dotnet/ OpenAI Models Generative Pre-trained Transformers (GPT) — a model that can understand and generate writing and code. DALL-E — a model that can generate and edit images given a text description. Whisper — a model that can convert audio into text. Resources OpenAI Azure OpenAI Service Azure OpenAI .</description>
      
    </item>
    
    <item>
      <title>call a web api</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/call-a-web-api/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/call-a-web-api/</guid>
      
      <description>Overview Blazor Server apps call web APIs using HttpClient instances (typically created via IHttpClientFactory). These notes apply. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&amp;amp;pivots=server Program.cs
builder.Services.AddHttpClient(); Pages/CallWebAPI.razor
@page &amp;#34;/call-web-api&amp;#34; @using System.Text.Json @using System.Text.Json.Serialization @inject IHttpClientFactory ClientFactory &amp;lt;h1&amp;gt;Call web API from a Blazor Server Razor component&amp;lt;/h1&amp;gt; @if (getBranchesError || branches is null) { &amp;lt;p&amp;gt;Unable to get branches from GitHub. Please try again later.&amp;lt;/p&amp;gt; } else { &amp;lt;ul&amp;gt; @foreach (var branch in branches) { &amp;lt;li&amp;gt;@branch.Name&amp;lt;/li&amp;gt; } &amp;lt;/ul&amp;gt; } @code { private IEnumerable&amp;lt;GitHubBranch&amp;gt;?</description>
      
    </item>
    
    <item>
      <title>json contracts</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/json-contracts/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/json-contracts/</guid>
      
      <description>Overview System.Text.Json creates a JSON contract for each .NET type that determines how it is serialized and deserialized. The contract is created based on the shape of the type — its properties, fields and interfaces it implements. Types are mapped to contracts either at run time (via reflection) or compile time (via source generation). Documentation: https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/custom-contracts Customizing JSON Contracts Availability: .NET 7
Modifiers A modifier is an Action&amp;lt;JsonTypeInfo&amp;gt; or a static void method with a JsonTypeInfo parameter that gets the current state of the contract as an argument and makes modifications to it.</description>
      
    </item>
    
    <item>
      <title>commit signatures</title>
      <link>http://localhost:1313/wieserpedia/cli/git/commit-signatures/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/commit-signatures/</guid>
      
      <description>Overview Commits and tags can be signed via GPG, SSH, or S/MIME.
GPG signatures have the advantage over SSH signatures in that they can expire or be revoked.
GitHub automatically uses GPG to sign commits made via the web interface. The GPG public key is available at https://github.com/web-flow.gpg.
Verification Statuses Default statuse Verified — commit is signed and signature verified Unverified — commit is signed but signature could not be verified No verification status — commit is not signed Vigilant mode statuses Verified — commit signed, signature verified, committer is the only vigilant-mode author Partially verified — commit signed, signature verified, commit has an author who is not the committer and not a vigilant-mode author Unverified — either: Commit signed, signature could not be verified Commit not signed, committer has enabled vigilant mode Commit not signed, author has enabled vigilant mode Using GPG Key Commit Signatures Generate a New GPG Key gpg --full-generate-key Follow the prompts.</description>
      
    </item>
    
    <item>
      <title>control serialization behavior</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/serialization-behavior/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/serialization-behavior/</guid>
      
      <description>Overview [Documentation] JSON serialization/deserialization behavior can be controlled through JsonSerializerOptions and various attributes.
Serialization Behavior By default:
Public properties are serialized Fields are ignored Casing of JSON names matches the .NET names Deserialization Behavior By default:
Property name matching is case sensitive Read-only properties are ignored (no value is deserialized into readonly properties) Fields are ignored Non-public constructors are ignored Enums are supported as numbers JsonSerializerOptions Web Defaults The defaults in ASP.</description>
      
    </item>
    
    <item>
      <title>introduction</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/introduction/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/introduction/</guid>
      
      <description>Overview Notes from John Walker: https://www.fourmilab.ch/rpkp/experiments/statistics.html.
Definitions $\sigma$ = standard deviation $\sigma^2$ = variance Permutations The number of permutations of $n$ different things taken $n$ at a time is $n!$.
The number of permutations of $n$ different things taken $x$ at a time is $\binom{n}{x}$ and calculated as $\frac{n!}{x!(n-x)!}$ where ${n}$ and ${x}$ are positive integers.
Flipping a Coin If a coin is flipped four times, there are 16 possible outcomes:</description>
      
    </item>
    
    <item>
      <title>polymorphic serialization</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/polymorphic-serialization/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/polymorphic-serialization/</guid>
      
      <description>Overview Availability: .NET 7
Documentation: https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/polymorphism?pivots=dotnet-7-0 System.Text.Json supports polymorphic type hierarchies with these attributes:
[JsonDerivedType] — indicates that the specified subtype should be opted into polymorphic serialization [JsonPolymorphic] — indicates that the type should be serialized polymorphically Serializing Properties of a Derived Class Consider this base class&amp;hellip;
[JsonDerivedType(typeof(WeatherForecastWithCity))] public class WeatherForecastBase { public DateTimeOffset Date { get; set; } public int TemperatureCelsius { get; set; } public string? Summary { get; set; } } &amp;hellip;and this derived class:</description>
      
    </item>
    
    <item>
      <title>system.security.cryptography.randomnumbergenerator</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/random-numbers/system.security.cryptography.randomnumbergenerator/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/random-numbers/system.security.cryptography.randomnumbergenerator/</guid>
      
      <description>Overview A cryptographically-secure random number generator. Implements IDisposable.
Documentation: https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-7.0 Use Create a random number generator:
using System.Security.Cryptography; using var rng = new RandomNumberGenerator.Create(); byte[5] fiveBytes = rng.GetBytes(5); // 5 random byte values. var tenBytes = new byte[10]; rng.GetBytes(tenBytes); // Fills tenBytes with random byte values. RandomNumberGenerator.GetInt32(11); // Random integer &amp;gt;= 0 and &amp;lt;= 10. RandomNumberGenerator.GetInt32(-5, 6); // Random integer &amp;gt;= -5 and &amp;lt;= 5. </description>
      
    </item>
    
    <item>
      <title>component rendering</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/component-rendering/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/component-rendering/</guid>
      
      <description>Overview Components must render when they are first added to the component hierarchy by a parent component. Components may render at other times according to their own logic and conventions. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/rendering?view=aspnetcore-7.0 Rendering Flow In most cases, ComponentBase conventions result in the correct subset of component rerenders after an event occurs. Developers are not required to provide manual logic to tell the framework which components to rerender and when to rerender them.</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
      <description>Hi&amp;hellip; Hi, I&amp;rsquo;m Fred. I&amp;rsquo;m passionate about technology and mathematics, blending my love for problem-solving with practical applications.
Education I hold a BSc in Theoretical Physics from University College London, where I developed a solid foundation in analytical reasoning and computational physics. My studies ignited my interest in machine learning, leading me to pursue further education in this field.
Interests In my free time, I enjoy exploring the intersections of technology and creativity.</description>
      
    </item>
    
    <item>
      <title>Curiculum Vitae / Résume</title>
      <link>http://localhost:1313/cv/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/cv/</guid>
      
      <description></description>
      
    </item>
    
    <item>
      <title>trimming</title>
      <link>http://localhost:1313/wieserpedia/_net/deployment/trimming/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/deployment/trimming/</guid>
      
      <description>Overview Assembly trimming removes unused parts of libraries from the application package, thereby reducing size.
Trimming is only available for self-contained deployments.
Considerations Trimming has known incompatibilities. See https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/incompatibilities
Enabling To enable trimming:
Enable trimming in the project file:
SomeProject.csproj &amp;lt;PropertyGroup&amp;gt; &amp;lt;PublishTrimmed&amp;gt;true&amp;lt;/PublishTrimmed&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Publish the app as self-contained Via CLI: dotnet publish -r &amp;lt;RUNTIME-ID&amp;gt; Note: The -p:PublishTrimmed=true switch is not required if trimming is enabled in the project file. Via Visual Studio: Right-click project in Solution Explorer &amp;gt; Publish More actions &amp;gt; Edit Profile settings dialog &amp;gt; Set the Deployment mode &amp;gt; Set the Target runtime &amp;gt; Check Trim unused code &amp;gt; Save Publish Trimming Options The following MSBuild properties and items change trimming behavior.</description>
      
    </item>
    
    <item>
      <title>central-package-management</title>
      <link>http://localhost:1313/wieserpedia/cli/nuget/central-package-management/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/nuget/central-package-management/</guid>
      
      <description>Overview Availability: NuGet v6.2
Use to manage common dependencies across many different projects.
Enabling Create a Directory.Package.props file at the root of the repository. Enable central package management: Directory.Package.props &amp;lt;Project&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;ManagePackageVersionsCentrally&amp;gt; true &amp;lt;ManagePackageVersionsCentrally&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;/Project&amp;gt; For each package, define the package version required for your projects: &amp;lt;ItemGroup&amp;gt; &amp;lt;PackageVersion Include=&amp;#34;PACKAGE.NAME&amp;#34; Version=&amp;#34;X.Y.Z&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; For each project, define a package reference: &amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include=&amp;#34;PACKAGE.NAME&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; Overriding Package Versions PackageReference elements can override the version specified in PackageVersion elements with the VersionOverride property.</description>
      
    </item>
    
    <item>
      <title>executeupdate and executedelete</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/saving-data/executeupdate-and-executedelete/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/saving-data/executeupdate-and-executedelete/</guid>
      
      <description>Overview Availability: EF Core 7
By default, EF Core tracks changes to entities and sends updates to the database with SaveChanges{Async}. Sometimes it may be useful to execute update and/or delete commands on the database without involving the change tracker. EF7 enables this with ExecuteUpdate{Async} and ExecuteDelete{Async} methods.
ExecuteUpdate{Async} and ExecuteDelete{Async} are applied to a LINQ query and will update or delete entities in the database.
These methods complement—not replace—the existing SaveChanges{Async} methods.</description>
      
    </item>
    
    <item>
      <title>inheritance</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/modeling/inheritance/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/modeling/inheritance/</guid>
      
      <description>Overview EF Core supports three strategies of mapping .NET types:
Table-per-Hierarchy (TPH) — the default strategy; maps .NET types to a single database table Documentation: https://learn.microsoft.com/en-us/ef/core/modeling/inheritance#table-per-hierarchy-and-discriminator-configuration Table-per-Type (TPT) — maps each .NET type to a different database table Documentation: https://learn.microsoft.com/en-us/ef/core/modeling/inheritance#table-per-type-configuration Table-per-Concrete-Type (TPC) Availability: EF Core 7 Like TPT, but in a way that addresses problems with that strategy. Documentation: https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#table-per-concrete-type-tpc-inheritance-mapping By default, EF Core maps an inheritance hierarchy of .NET types to a single hierarchy.</description>
      
    </item>
    
    <item>
      <title>json columns</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/json-columns/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/json-columns/</guid>
      
      <description>Overview Availability: EF Core 7
Relational databases support columns that contain JSON documents. This allows relational databases to provide some of the functionality document databases, thereby creating a hybrid between the two. EF Core&amp;rsquo;s support for JSON documents in EF Core 7 is provider-agnostic with an implementation for SQL Server. Documentation: https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns </description>
      
    </item>
    
    <item>
      <title>progressive web app (pwa)</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/progressive-web-app-pwa/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/progressive-web-app-pwa/</guid>
      
      <description>Overview A Blazor WASM PWA is a SPA that uses modern browser APIs and capabilities to behave like a desktop app. Progressive means that:
A user may discover the app within their browser (like any other SPA) Later, the user progresses to installing it on their OS. Blazor PWAs can be created from project templates or existing Blazor WASM apps can be converted to PWAs.
Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/progressive-web-app?view=aspnetcore-7.0 Creating from CLI dotnet new blazorwasm -o APPNAME --pwa Converting Existing Blazor WASM app to PWA Update the project file:</description>
      
    </item>
    
    <item>
      <title>randomness</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/randomness/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/randomness/</guid>
      
      <description>Overview From https://www.random.org/randomness
Randomness — that which cannot be predicted by humans.
Pseudo-Random Number Generators (PRNGs) PRNGs are algorithms that use mathematical formulae or simply precalculated tables to produce sequences of numbers that appear random. Modern algorithms of PRNGs are so good that they look truly random.
Using a PRNG is akin to rolling a die many times and writing down the results. The PNRG returns the next result on the list.</description>
      
    </item>
    
    <item>
      <title>call a web api</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/call-a-web-api/</link>
      <pubDate>Fri, 21 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/call-a-web-api/</guid>
      
      <description>Overview Blazor WASM apps call web APIs using a preconfigured HttpClient service which is focused on making requests back to the server of origin (not a 3rd party API). Create HttpClient service configurations manually for requests to other web APIs.
Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&amp;amp;pivots=webassembly Sending PATCH Requests If sending HTTP PATCH requests, there are additional considerations beyond those listed in these notes.
See: https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&amp;amp;pivots=webassembly#patch-as-json-patchasjsonasync
Using the Preconfigured HttpClient Add the HttpClient service to the DI container:</description>
      
    </item>
    
    <item>
      <title>input components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/input-components/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/input-components/</guid>
      
      <description>Input Components Wrappers around existing HTML inputs. Inherit from InputBase. Include basic validation:
InputCheckbox InputDate (date picker) Registers unparseable values as validation errors InputFile (file picker) (see ASP.NET Core Blazor file uploads) InputNumber Registers unparseable values as validation errors InputSelect (dropdown) InputRadio InputRadioGroup (group of number of InputRadio Components; allow only one in the group to be selected) InputText InputTextArea (multi-line) Error message template support InputDate and InputNumber both support error message templates to provide a custom error message:</description>
      
    </item>
    
    <item>
      <title>navlink and navmenu components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/navlink-and-navmenu-components/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/navlink-and-navmenu-components/</guid>
      
      <description>NavLink Use a NavLink component in place of HTML hyperlink elements (&amp;lt;a&amp;gt;) for navigation links. A NavLink component toggles an active CSS class to help a user understand which page is active among the navigation links.
Optionally, assign a CSS class name to NavLink.ActiveClass to apply a custom CSS class to the rendered link when the current route matches.
Any attributes not defined by the component are passed through to the anchor element, like this target attribute:</description>
      
    </item>
    
    <item>
      <title>route parameters and templates</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/route-parameters-and-templates/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/route-parameters-and-templates/</guid>
      
      <description>Route Templates — How it Works in Blazor When a Razor Component is compiled, the generated class receives a RouteAttribute that contains its route template. When the app starts, the Router&amp;rsquo;s AppAssembly is scanned for all Components that have a RouteAttribute. The RouteView Component receives the RouteData from the Router and renders the specified component with its layout. Components support multiple route templates using multiple @page directives:
@page &amp;#34;/blazor-route&amp;#34; @page &amp;#34;/different-blazor-route&amp;#34; &amp;lt;h1&amp;gt;Blazor routing&amp;lt;/h1&amp;gt; Constant-based route templates can be specified with @attribute:</description>
      
    </item>
    
    <item>
      <title>validation</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/validation/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/validation/</guid>
      
      <description>Basic validation To add basic validation to a form, add the DataAnnotationsValidator Component. This enables validation using data annotations applied to the model class. Blazor performs two types of validation:
Field validation—performed when the user tabs out of a field. Model validation—performed when the user submits the form. To display validation errors at the top of the page, add the ValidationSummary Component. Pages/FormExample2.razor
@page &amp;#34;/form-example-1&amp;#34; @using Microsoft.Extensions.Logging @inject ILogger&amp;lt;FormExample1&amp;gt; Logger &amp;lt;!</description>
      
    </item>
    
    <item>
      <title>credential manager</title>
      <link>http://localhost:1313/wieserpedia/cli/git/credential-manager/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/credential-manager/</guid>
      
      <description>Overview Provides secure credential storage. Was previously called credential-manager-core Accessed via git credential-manager &amp;lt;subcommand&amp;gt; Documentation: https://github.com/git-ecosystem/git-credential-manager </description>
      
    </item>
    
    <item>
      <title>generic interfaces</title>
      <link>http://localhost:1313/wieserpedia/_net/types/generics/generic-interfaces/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/generics/generic-interfaces/</guid>
      
      <description>Overview Generic interfaces are type-safe counterparts to non-generic interfaces for ordering and equality comparisons and for functionality shared by generic collection types.
Availability: .NET 7 Framework-provided Generic Interfaces For Equality and Ordering Comparisons System.IComparable&amp;lt;T&amp;gt; — methods for ordering comparisons System.IEquatable&amp;lt;T&amp;gt; — methods for equality comparisons IComparer&amp;lt;T&amp;gt; — define an ordering comparison for types that do not implement IComparable&amp;lt;T&amp;gt; IEqualityComparer&amp;lt;T&amp;gt; — define an equality comparison for types that do not implement IEquatable&amp;lt;T&amp;gt; For Collection Functionality ICollection&amp;lt;T&amp;gt; — the basic interface for generic collection types; methods for adding, removing, copying, and enumerating elements; inherits from IEnumerable&amp;lt;T&amp;gt; and IEnumerable.</description>
      
    </item>
    
    <item>
      <title>single file deployment</title>
      <link>http://localhost:1313/wieserpedia/_net/deployment/single-file-deployment/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/deployment/single-file-deployment/</guid>
      
      <description>Overview Single-file deployment bundles all application-dependent files into a single binary. This deployment method is supported for both framework-dependent and self-contained apps.
Documentation: https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/overview?tabs=cli Publishing a Single-file App Update the project file:
csproj &amp;lt;PropertyGroup&amp;gt; &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Publish the app for a specific runtime identifier: dotnet publish -r &amp;lt;runtime-identifier&amp;gt; Alternatively, an app can be published as a single file without updating the project file:
dotnet publish -r &amp;lt;runtime-identifier&amp;gt; -p:PublishSingleFile=true --self-contained &amp;lt;true|false&amp;gt; Considerations Excluding Certain Files Update the project file:</description>
      
    </item>
    
    <item>
      <title>tab completion</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/tab-completion/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/dotnet-cli/tab-completion/</guid>
      
      <description>Enabling Tab Completion for dotnet Command PowerShell Edit the profile at $PROFILE:
# PowerShell parameter completion shim for the dotnet CLI Register-ArgumentCompleter -Native -CommandName dotnet -ScriptBlock { param($commandName, $wordToComplete, $cursorPosition) dotnet complete --position $cursorPosition &amp;#34;$wordToComplete&amp;#34; | ForEach-Object { [System.Management.Automation.CompletionResult]::new($_, $_, &amp;#39;ParameterValue&amp;#39;, $_) } } Bash # bash parameter completion for the dotnet CLI function _dotnet_bash_complete() { local cur=&amp;#34;${COMP_WORDS[COMP_CWORD]}&amp;#34; IFS=$&amp;#39;\n&amp;#39; # On Windows you may need to use use IFS=$&amp;#39;\r\n&amp;#39; local candidates read -d &amp;#39;&amp;#39; -ra candidates &amp;lt; &amp;lt;(dotnet complete --position &amp;#34;${COMP_POINT}&amp;#34; &amp;#34;${COMP_LINE}&amp;#34; 2&amp;gt;/dev/null) read -d &amp;#39;&amp;#39; -ra COMPREPLY &amp;lt; &amp;lt;(compgen -W &amp;#34;${candidates[*]:-}&amp;#34; -- &amp;#34;$cur&amp;#34;) } complete -f -F _dotnet_bash_complete dotnet </description>
      
    </item>
    
    <item>
      <title>producer-consumer model</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/producer-consumer-model/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/producer-consumer-model/</guid>
      
      <description>Overview Channels, from the System.Threading.Channels namespace, are an implementation of the producer/consumer model in .NET. This namespace provides synchronization data structures for passing data between producers and consumers asynchronously. Documentation: https://learn.microsoft.com/en-us/dotnet/core/extensions/channels Channels Channels can be thought of as any other common generic collection type such as List&amp;lt;T&amp;gt;. This collection manages synchronization and provides various consumption models through factory creation options.
Depending on how a Channel&amp;lt;T&amp;gt; is created, its reader and writer behave differently.</description>
      
    </item>
    
    <item>
      <title>childcontent, renderfragment, and templated components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/childcontent-renderfragment-and-templated-components/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/childcontent-renderfragment-and-templated-components/</guid>
      
      <description>Child Components via ChildContent Components can set the content of another Component.
Creating Define a ChildContent component parameter of type RenderFragment:
Shared/SomeChild.razor
&amp;lt;div class=&amp;#34;card w-25&amp;#34; style=&amp;#34;margin-bottom:15px&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-header font-weight-bold&amp;#34;&amp;gt;Child content&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;@ChildContent&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; @code { [Parameter] public RenderFragment? ChildContent { get; set; } } The Component that uses the child component provides the content that it renders:
@page &amp;#34;/render-fragment-parent&amp;#34; &amp;lt;h1&amp;gt;Render child content&amp;lt;/h1&amp;gt; &amp;lt;SomeChild&amp;gt; Content of the child component is supplied by the parent component.</description>
      
    </item>
    
    <item>
      <title>html &lt;head&gt; element components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/html-head-element-components/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/html-head-element-components/</guid>
      
      <description>Overview Some Razor Components modify the HTML &amp;lt;head&amp;gt; element&amp;rsquo;s content of a page.
HTML &amp;lt;title&amp;gt; Element and PageTitle Component Set the page&amp;rsquo;s title with a PageTitle component. This renders the HTML &amp;lt;title&amp;gt; element to a HeadOutlet component:
@page &amp;#34;/set-title&amp;#34; &amp;lt;h1&amp;gt;Setting title&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Title: @title&amp;lt;/p&amp;gt; &amp;lt;PageTitle&amp;gt;@title&amp;lt;/PageTitle&amp;gt; @code { private string title = &amp;#34;Title set by component&amp;#34;; } HTML &amp;lt;head&amp;gt; Element and HeadContent Component Set the content of the &amp;lt;head&amp;gt; element with a HeadContent component.</description>
      
    </item>
    
    <item>
      <title>fixing legacy trusted.gpg keyring issue</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/debian/pki/fixing-legacy-trusted.gpg-keyring-issue/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/debian/pki/fixing-legacy-trusted.gpg-keyring-issue/</guid>
      
      <description>Overview This warning means that a key is stored in /etc/apt/trusted.gpg which is a deprecated keyring:
W: https://example.com/repo: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details. Fixing Find the offending key:
sudo apt-key list | grep -i &amp;lt;keyword&amp;gt; --before --after 3 Any keys marked expired can be ignored.
An offending key will be listed under the /etc/apt/trusted.gpg section like this:
pub rsa4096 2015-03-22 [SC] CD66 5CBA 0E2F 88B7 373F 7CB9 9720 3C7B 3ADC A79D uid [ unknown] Plex Inc.</description>
      
    </item>
    
    <item>
      <title>statehaschanged considerations</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/statehaschanged-considerations/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/lifecycle/statehaschanged-considerations/</guid>
      
      <description>Overview StateHasChanged() is called to notify the Component that its state has changed. When applicable, calling this method can cause the Component to be rerendered. This is necessary when the Component updates due to an external change (like an event from a service). In these cases, the Component does not update automatically.
StateHasChanged() is called automatically for EventCallback methods.
Problem Credit: Blazor University
When code is called by a non-UI event, a thread locking/synchronization mechanism is normally required if we intend to manipulate state.</description>
      
    </item>
    
    <item>
      <title>windows sandbox</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/windows/windows-sandbox/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/windows/windows-sandbox/</guid>
      
      <description>Overview A virtualized instance of Windows to run applications in isolation (&amp;ldquo;sandboxed&amp;rdquo; from the host machine).
Documentation: https://learn.microsoft.com/en-us/windows/security/application-security/application-isolation/windows-sandbox/windows-sandbox-overview Installing From Administrator PowerShell:
Enable-WindowsOptionalFeature -FeatureName &amp;#34;Containers-DisposableClientVM&amp;#34; -All -Online Search for Windows Sandbox in start menu.</description>
      
    </item>
    
    <item>
      <title>toasts</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/components/toasts/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/components/toasts/</guid>
      
      <description>Overview Lightweight notifications that mimic push notifications Documentation: https://getbootstrap.com/docs/5.3/components/toasts/ Details Built with flexbox Opt-in for performance reasons; must be manually initialized Toasts autohide unless autohide: false is specified Toasts are automatically slightly translucent to blend in with their background Creating A Simple Toast &amp;lt;div class=&amp;#34;toast&amp;#34; role=&amp;#34;alert&amp;#34; aria-live=&amp;#34;assertive&amp;#34; aria-atomic=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;toast-header&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;...&amp;#34; class=&amp;#34;rounded me-2&amp;#34; alt=&amp;#34;...&amp;#34;&amp;gt; &amp;lt;strong class=&amp;#34;me-auto&amp;#34;&amp;gt;Bootstrap&amp;lt;/strong&amp;gt; &amp;lt;small&amp;gt;11 mins ago&amp;lt;/small&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;btn-close&amp;#34; data-bs-dismiss=&amp;#34;toast&amp;#34; aria-label=&amp;#34;Close&amp;#34;&amp;gt;&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;toast-body&amp;#34;&amp;gt; Hello, world! This is a toast message.</description>
      
    </item>
    
    <item>
      <title>berkeley packet filter</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/berkeley-packet-filter/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/berkeley-packet-filter/</guid>
      
      <description>Berkeley Packet Filter (BPF) Provides a raw interface to netlayer 2, bypassing kernel Allows userland process to filter packets; BPF returns only those packets; other packets not copied from kernel to this process BPF = this filter + raw interface BPF Raw Datalink Interface Pseudo-devices taht bind to network interfaces READ retrieves buffers full of packets received on the interface WRITE injects packets on the interface Extended BFP (eBPF) (2014) Enables running sandboxed apps in privileged context This extends capabilities of kernel without changes to kernel source or loading kernel modules Uses High-throughput load balancers Cluster networking Security / DDoS protection Observability Express Data Path (XDP) (2016) eBPF-based technology to send and receive packets at high rates by bypassing most of the OS network stack Works by adding a hook in the receiving path of the kernel and letting a userland eBPF app decide the disposition of the packet The hook sits in the NIC driver just after interrupt and before malloc for the network stack XDP can drop 26M packets per second per core The eBPF app can be offloaded to NICs that support running such apps The eBPF app inspects the packet and returns: XDP_PASS — pass the packet onto the network stack XDP_DROP — silently drop the packet XDP_ABORTED — drop the packet with an exception XDP_TX — bounce the packet back to the same NIC it was received on XDP_REDIRECT — bounce the packet to another NIC or userland socket </description>
      
    </item>
    
    <item>
      <title>zero copy operations</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/zero-copy-operations/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/zero-copy-operations/</guid>
      
      <description>Zero-copy Operations Zero-copy operations are data copy operations that do not need to copy between kernel and userspace This reduces kernel &amp;lt;&amp;ndash;&amp;gt; userspace context switches These operations are also used in device drivers, file systems, and network stacks </description>
      
    </item>
    
    <item>
      <title>modal</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/components/modal/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/components/modal/</guid>
      
      <description>Overview A JavaScript modal plugin to add dialogs for lightboxes, notifications, or custom content Built with HTML, CSS and JavaScript Documentation: https://getbootstrap.com/docs/5.3/components/modal/ Details Positioned over everything else in the document and remove scroll from the &amp;lt;body&amp;gt; (the modal scrolls instead) Clicking on the modal&amp;rsquo;s backdrop closes it Only one modal window at a time is supported Uses position: fixed; whenever possible, place the modal HTML in a top-level position Nesting a .</description>
      
    </item>
    
    <item>
      <title>template balanced</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-balanced/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-balanced/</guid>
      
      <description>[short title of solved problem and solution] Status: [proposed | rejected | accepted | deprecated | … | superseded by ADR-0005] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL] Context and Problem Statement [Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.</description>
      
    </item>
    
    <item>
      <title>template detailed</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-detailed/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-detailed/</guid>
      
      <description>Issue Describe the architectural design issue you’re addressing, leaving no questions about why you’re addressing this issue now. Following a minimalist approach, address and document only the issues that need addressing at various points in the life cycle.
Decision Clearly state the architecture’s direction—that is, the position you’ve selected.
Status The decision’s status, such as pending, decided, or approved.
Group You can use a simple grouping—such as integration, presentation, data, and so on—to help organize the set of decisions.</description>
      
    </item>
    
    <item>
      <title>template simple</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-simple/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/architecture-decision-records/template-simple/</guid>
      
      <description>Title Status What is the status, such as proposed, accepted, rejected, deprecated, superseded, etc.?
Context What is the issue that we&amp;rsquo;re seeing that is motivating this decision or change?
Decision What is the change that we&amp;rsquo;re proposing and/or doing?
Consequences What becomes easier or more difficult to do because of this change?</description>
      
    </item>
    
    <item>
      <title>utilities</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/utilities/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/utilities/</guid>
      
      <description>Overview Utilities for layouts.
Documentation: https://getbootstrap.com/docs/5.3/layout/utilities/ Display utilities — for responsively toggling values of the display property Flex utilities — if you need to add display: flex to an element, do so with .d-flex Spacing utilities — for margin and padding Visibility utilities — for toggling visibility </description>
      
    </item>
    
    <item>
      <title>ocr</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/utilities/ocr/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/utilities/ocr/</guid>
      
      <description>Overview ocrmypdf will OCR a PDF file and output a new version of that file with text recognized.
Installation Install package ocrmypdf. Usage: ocrmypdf /path/to/pdf-to-be-scanned.pdf /path/to/new-file-name.pdf </description>
      
    </item>
    
    <item>
      <title>css isolation</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/css-isolation/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/css-isolation/</guid>
      
      <description>Overview CSS can be isolated to individual pages, views, and Components.
CSS isolation occurs at build time. Blazor rewrites CSS selectors to match the markup rendered by the Component. These rewritten CSS styles are then bundled as a static asset.
Isolate CSS for a Component To enable Component-level isolation, create a .razor.css file matching the name of the .razor file of the Component in the same folder.
Isolate CSS for a Child Component Use the ::deep pseudo-element to any descendant elements in the parent Component&amp;rsquo;s .</description>
      
    </item>
    
    <item>
      <title>upgrade instructions</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/debian/release-upgrade-procedure/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/debian/release-upgrade-procedure/</guid>
      
      <description>Performing Debian Major Version Upgrade 1. Upgrade the current system sudo apt update sudo apt full-upgrade -y sudo apt autoremove sudo systemctl reboot 2. Update configuration to the new codename In /etc/apt/sources.list, change the Debian codename from the old codename to the new codename In /etc/apt/sources.list, comment out &amp;lt;old-codename&amp;gt;-backports 3. Upgrade to the new system sudo apt update sudo apt full-upgrade -y sudo apt autoremove sudo systemctl reboot 4. Confirm the new system is functional sudo systemctl status 5.</description>
      
    </item>
    
    <item>
      <title>page variables</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/variables/page-variables/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/variables/page-variables/</guid>
      
      <description>Overview Page-level variables are defined in the content&amp;rsquo;s frontmatter, derived from the content&amp;rsquo;s file location, or extract from the content body itself.
Predefined Page Variables All of the fields listed in frontmatter are page variables in the format .FieldName. Only page variables that are not listed on the frontmatter notes page are listed here:
.AlternativeOutputFormats — used for a page&amp;rsquo;s link rel list in the site&amp;rsquo;s &amp;lt;head&amp;gt; (see also: Output formats) .</description>
      
    </item>
    
    <item>
      <title>accordion</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/components/accordion/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/components/accordion/</guid>
      
      <description>Overview Vertically-collapsing accordions. Requires Collapse JavaScript plugin.</description>
      
    </item>
    
    <item>
      <title>breakpoints</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/breakpoints/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/breakpoints/</guid>
      
      <description>Overview Documentation: https://getbootstrap.com/docs/5.3/layout/breakpoints/ Customizable widths that determine how responsive layout behaves across device or viewport sizes. The building blocks of responsive design. Used to control when layout can be adapted at a particular viewport or device size. Works in conjunction with CSS media queries. Available Breakpoints Also referred to as grid tiers. Holds containers at width multiples of 12:
Breakpoint Class infix Dimensions Extra small None &amp;lt;576px Small sm ≥576px Medium md ≥768px Large lg ≥992px Extra large xl ≥1200px Extra extra large xxl ≥1400px Customizable via scss/_variables.</description>
      
    </item>
    
    <item>
      <title>keychron k10</title>
      <link>http://localhost:1313/wieserpedia/hardware/keychron-k10/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/hardware/keychron-k10/</guid>
      
      <description>Function Key Combinations for Keychron K10 (Windows Mode) Shortcut Action Fn + 1..3 Select Bluetooth device 1..3 Fn + 1..3 (long press) Pair with Bluetooth device 1..3 Fn + Win Lock/unlock Windows key Fn + B Two rows backlight off = 030% power One row backlight off = 3070% power All rows backlight on = 70~100% power Check battery Fn + S + O Disable / Enable auto sleep mode Fn + S + L + R Auto sleep in 10 minutes Fn + S + L + T Auto sleep in 20 minutes Fn + S + L + Y Auto sleep in 30 minutes Fn + J + Z (long press 3 secs) Reset keyboard Fn + X + L (long press 3 secs) Switch between Function and multimedia Firmware Update Process Download firmware for Windows, K10, white backlight, v1.</description>
      
    </item>
    
    <item>
      <title>generic types</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/generic-types/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/generic-types/</guid>
      
      <description>Generically-typed Parameters Use @typeparam directive:
@typeparam TItem &amp;lt;!-- or: --&amp;gt; @typeparam TEntity where TEntity : IEntity Example Shared/ListGenericTypeItems.razor
&amp;lt;!-- This Component, ListGenericTypeItems, will be typed as TExample: --&amp;gt; @typeparam TExample @if (ExampleList is not null) { &amp;lt;ul&amp;gt; @foreach (var item in ExampleList) { &amp;lt;li&amp;gt;@item&amp;lt;/li&amp;gt; } &amp;lt;/ul&amp;gt; } @code { [Parameter] public IEnumerable&amp;lt;TExample&amp;gt;? ExampleList{ get; set; } } This allows you to set the type parameter of a Component that renders a ListGenericTypeItems:</description>
      
    </item>
    
    <item>
      <title>add a ca certificate</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/linux/debian/pki/add-a-ca-certificate/</link>
      <pubDate>Mon, 12 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/linux/debian/pki/add-a-ca-certificate/</guid>
      
      <description>Add a CA Certificate to a Debian Linux Server cp &amp;lt;path/to/ca-cert-file.crt&amp;gt; /usr/local/share/ca/certificates/ sudo update-ca-certificates </description>
      
    </item>
    
    <item>
      <title>mudblazor</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/mudblazor/</link>
      <pubDate>Mon, 12 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/mudblazor/</guid>
      
      <description>Overview A Blazor Component library.
See also: https://try.mudblazor.com
Installation Direct dotnet add package MudBlazor via Template Blazor template preconfigured with MudBlazor:
dotnet new --install MudBlazor.Templates dotnet new mudblazor --host wasm --name AppName Getting Started 1. Add imports _Imports.razor
@using MudBlazor index.html (Blazor WASM) or _Host.cshtml (Blazor Server)
&amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;_content/MudBlazor/MudBlazor.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;script src=&amp;#34;_content/MudBlazor/MudBlazor.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 2. Remove Bootstrap The Bootstrap components that are loaded by Blazor&amp;rsquo;s default template are no longer needed:</description>
      
    </item>
    
    <item>
      <title>radzen</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/radzen/</link>
      <pubDate>Mon, 12 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/radzen/</guid>
      
      <description>Overview Radzen Blazor Components — a set of free Blazor UI components.
https://blazor.radzen.com/get-started
https://blazor.radzen.com/docs/guides/getting-started
Installation dotnet add package Radzen.Blazor Getting Started 1. Add Imports _Imports.razor
@using Radzen @using Radzen.Blazor 2. Add a Theme Pages/_Host.cshtml (Blazor Server) or wwwroot/index.html (Blazor WASM)
&amp;lt;!-- Other themes are also available --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;_content/Radzen.Blazor/css/material-base.css&amp;#34;&amp;gt; 3. Add JS Interop Pages/_Host.cshtml (Blazor Server) or wwwroot/index.html (Blazor WASM)
&amp;lt;script src=&amp;#34;_content/Radzen.Blazor/Radzen.Blazor.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 4. Add Components These Components require special configuration:</description>
      
    </item>
    
    <item>
      <title>local storage</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/blazored/local-storage/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/3rd-party/blazored/local-storage/</guid>
      
      <description>Overview APIs API Description SetItem, SetItemAsync Store a value in LocalStorage GetItem, GetItemAsync Retrieve a value based on a key ContainKey, ContainKeyAsync Check if a key exists RemoveItem, RemoveItemAsync Remove a value from LocalStorage ILocalStorage @inject Blazored.LocalStorage.ILocalStorageService localStorage var firstName = await localStorage.GetItemAsync&amp;lt;string&amp;gt;(&amp;#34;EmployeeFirstName&amp;#34;); </description>
      
    </item>
    
    <item>
      <title>asynchronous programming</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/programming-models/asynchronous-programming/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/programming-models/asynchronous-programming/</guid>
      
      <description>Blocking A blocking activity causes the thread (entire application) to hang.
Potentially blocking activities: web access, database access, working with files, working with images, WCF.
Multitasking (from Modern Cross-Platform Development) Processes &amp;amp; Threads Process – has resources like memory and threads allocated to it. Threads – execute code, statement by statement. By default, each process has only one thread. Preemptive Multitasking Simulates parallel execution of tasks.
Divides processor time among threads into time slices.</description>
      
    </item>
    
    <item>
      <title>quickgrid component</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/quickgrid-component/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/quickgrid-component/</guid>
      
      <description>Overview Availability: ASP.NET Core 7 (Preview)
QuickGrid is an experimental Component for quickly displaying data in tabular form. It is highly optimized.
QuickGrid is in preview in ASP.NET Core 7 and not officially supported until ASP.NET Core 8 or later.
QuickGrid sample site: https://aspnet.github.io/quickgridsamples/
Installing dotnet add package microsoft.aspnetcore.components.quickgrid --prerelease Using @page &amp;#34;/quickgrid-example&amp;#34; @using Microsoft.AspNetCore.Components.QuickGrid &amp;lt;QuickGrid Items=&amp;#34;@people&amp;#34;&amp;gt; &amp;lt;PropertyColumn Property=&amp;#34;@(p =&amp;gt; p.PersonId)&amp;#34; Sortable=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;PropertyColumn Property=&amp;#34;@(p =&amp;gt; p.Name)&amp;#34; Sortable=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;PropertyColumn Property=&amp;#34;@(p =&amp;gt; p.</description>
      
    </item>
    
    <item>
      <title>blazor server considerations</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/blazor-server-considerations/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/blazor-server-considerations/</guid>
      
      <description>Overview Blazor Server&amp;rsquo;s stateful app framework requires a special approach to use EF Core. For example, in Blazor Server apps, scoped services registrations can be problematic because the instance is shared across components within a user&amp;rsquo;s circuit. DbContext is not thread safe and not designed for concurrent use.
There are two patterns:
Context-per-operation Context-per-component Context-per-operation Use this approach by default:
using var context = new SomeContext(); return away context.SomeEntities.ToListAsync(); In this pattern, use a flag to prevent multiple concurrent operations:</description>
      
    </item>
    
    <item>
      <title>saving data</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/saving-data/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/saving-data/</guid>
      
      <description>Overview Two approaches:
Change tracking and SaveChanges ExecuteUpdate and ExecuteDelete (bulk update) 1. Change tracking and SaveChanges Change Tracking EF tracks loaded entities in its internal change tracker. Whenever an entity is queried via LINQ, it is loaded.
Pattern The general pattern is to query some data from the database, modify it, and save the modified data back to the database:
using var context = new BloggingContext(); var blog = context.</description>
      
    </item>
    
    <item>
      <title>database schemas</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/database-schemas/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/database-schemas/</guid>
      
      <description>Overview EF Core provides two approaches of keeping the EF Core model and database schema in sync:
Migrations Reverse Engineering (scaffolding) </description>
      
    </item>
    
    <item>
      <title>dbcontext</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/dbcontext/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/dbcontext/</guid>
      
      <description>Lifetime The lifetime of DbContext begins when the instance is created and ends when it is disposed. It lasts for a unit of work.
A unit of work keeps track of everything you do during a business transaction that can affect the database. When you&amp;rsquo;re done, it figures out everything that needs to be done to alter the database as a result of the work.&amp;quot;
Threading and Concurrency DbContext is not thread-safe.</description>
      
    </item>
    
    <item>
      <title>models</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/models/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/models/</guid>
      
      <description>Overview EF Core uses a metadata model to describe how the app&amp;rsquo;s entity types are mapped to the underlying database. Models are configured with:
Fluent API Data annotations Conventions Conventions are not covered in these notes.
The above order describes the precedence EF Core takes when applying configuration.
Fluent API Override the OnModelCreating method in the derived context and use fluent API to configure the model.
Fluent API configuration will override data annotations and conventions.</description>
      
    </item>
    
    <item>
      <title>querying data</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/querying-data/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/querying-data/</guid>
      
      <description>Overview EF Core uses LINQ to query data from the database.
Loading all data using var context = new BloggingContext(); var blogs = context.Blogs.ToList(); Loading a single entity using var context = new BloggingContext(); var blog = context.Blogs.Single(b =&amp;gt; b.BlogId == 1); Filtering using var context = new BloggingContext(); var blogs = context.Blogs.Where(b =&amp;gt; b.Url.Contains(&amp;#34;dotnet&amp;#34;)) .ToList(); </description>
      
    </item>
    
    <item>
      <title>relationships</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/relationships/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/relationships/</guid>
      
      <description>Overview Relationships define how two entities relate to each other.
public class Blog { public int Id { get; set; } // Primary Key public string Name { get; set; } public virtual Uri SiteUri { get; set; } public ICollection&amp;lt;Post&amp;gt; Posts { get; } } public class Post { public string Title { get; set; } public string Content { get; set; } public DateTime PublishedOn { get; set; } public Archived { get; set; } public int BlogId { get; set; } // Foreign Key public Blog Blog { get; set; } } Above:</description>
      
    </item>
    
    <item>
      <title>concurrency</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/concurrency/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/concurrency/</guid>
      
      <description>Handling Concurrency Conflicts Handling Concurrent Deletes When a concurrent delete of a database row is detected, EF Core throws a DbUpdateConcurrencyException exception. Handle this exception to handle the conflict.
Handling Concurrent Updates A concurrent update of a database row can be detected. This requires a Timestamp property with attribute:
[Timestamp] public byte[]? Timestamp { get; set; } Then, add a migration and update the database:
PM&amp;gt; Add-Migration AddTimestamp PM&amp;gt; update-database </description>
      
    </item>
    
    <item>
      <title>openssh</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/openssh/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/openssh/</guid>
      
      <description>Public-key Cryptography / Asymmetric Encryption Generate a public/private keypair Use ssh-keygen to generate a public/private keypair: ssh-keygen -t ed25519 The keys are stored in ~./ssh as id_ed25519 and id_ed25519.pub Trust the public key on OpenSSH Server Add the contents of id_ed25519.pub to ./ssh/authorized_keys</description>
      
    </item>
    
    <item>
      <title>pagination</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/idioms/pagination/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/idioms/pagination/</guid>
      
      <description>From Pluralsight/Building a Data-driven ASP.NET Core 6 Blazor Server Application with EF Core
Overview Pagination allows you to limit the number of results you return per page and allows the user to request more results by specifying a page number.
Implement Pagination Implementing pagination functionality involves:
Counting the total number of records the Component has Specifying the number of records to show per page Using the above, counting the total number of pages (pages = records / recordsPerPage) Updating the logic to account for invalid page requests such as 0 or a number greater than the total number of pages Updating the page routes to include a pagination parameter EmployeeOverview.</description>
      
    </item>
    
    <item>
      <title>implement a database</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/implement-a-database/</link>
      <pubDate>Tue, 16 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/implement-a-database/</guid>
      
      <description>From Pluralsight/Building a Data-driving ASP.NET Core 6 Blazor Server Application
Implement a Database with EF Core in an ASP.NET Core Blazor Web App Create Model classes Data/Models/Employee.cs
public class Employee { public int Id { get; set; } // Primary Key [Required] // even though it&amp;#39;s nullable, this property is required [StringLength(50)] public string? FirstName { get; set; } [Required] [StringLength(50)] public string? LastName { get; set; } public bool IsDeveloper { get; set; } [Required] // an Employee MUST be in a Department public int?</description>
      
    </item>
    
    <item>
      <title>migrations and updates</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/migrations-and-updates/</link>
      <pubDate>Tue, 16 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/migrations-and-updates/</guid>
      
      <description>Migrate a Database via a SQL File Create a SQL file that migrates a database already in production:
PM&amp;gt; script-migration This outputs a SQL file.
Apply Migrations at Runtime This is not recommended in production; development only.
Program.cs
// ... var app = builder.Build(); if (app.Environment.IsDevelopment()) { await EnsureDatabaseIsMigrated(app.Services); async Task EnsureDatabaseIsMigrated(IServiceProvider services) { using var scope = services.CreateScope(); using var ctx = scope.ServiceProvider.GetService&amp;lt;EmployeeManagerDbContext&amp;gt;(); // if database does not exist, create it, and then run all pending migrations: if (ctx is not null) await ctx.</description>
      
    </item>
    
    <item>
      <title>test components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/test-components/</link>
      <pubDate>Tue, 16 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/test-components/</guid>
      
      <description>Testing with bUnit - Overview bUnit extends other unit testing frameworks (xUnit, Nunit, MSTest, etc) for Blazor-specific unit tests.
Features includes a semantic HTML comparer so that not all possible cases must be manually tested. supports dependency injection and passing parameters testing user interactions and event handlers testing IJSRuntime testing authorization mocking an HttpClient Simple Unit Test Example public void CanUpdatePiePrice() { // Arrange var pie = new Pie() { Name = &amp;#34;Sample pie&amp;#34;, Price = 12.</description>
      
    </item>
    
    <item>
      <title>http logging</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/http-logging/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/http-logging/</guid>
      
      <description>Overview HTTP logging middleware logs information about incoming HTTP requests and HTTP responses including common properties, headers, and the body.
Caution: HTTP logging can reduce the performance of an app, especially when logging request/response bodies.
Warning: HTTP logging can potentially log personally identifiable information.
Enabling Call AddHttpLogging and UseHttpLogging:
Program.cs var builder = WebApplication.CreateBuilder(args); // the empty lambda here uses default logging options: builder.Services.AddHttpLogging(o =&amp;gt; { }); var app = builder.</description>
      
    </item>
    
    <item>
      <title>w3c logging</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/w3c-logging/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/logging/w3c-logging/</guid>
      
      <description>Overview Middleware that writes log files in the W3C standard format.
Caution: W3C logging can reduce the performance of an app, especially when logging request/response bodies.
Warning: W3C logging can potentially log personally identifiable information.
Enabling Call UseW3Logging:
Program.cs
var app = builder.Build(); app.UseW3CLogging(); app.UseRouting(); Configuration Call AddW3CLogging:
Program.cs
var builder = WebApplication.CreateBuilder(args); builder.Services.AddW3CLogging(logging =&amp;gt; { // Log all W3C fields logging.LoggingFields = W3CLoggingFields.All; logging.AdditionalRequestHeaders.Add(&amp;#34;x-forwarded-for&amp;#34;); logging.AdditionalRequestHeaders.Add(&amp;#34;x-client-ssl-protocol&amp;#34;); logging.FileSizeLimit = 5 * 1024 * 1024; logging.</description>
      
    </item>
    
    <item>
      <title>lazy loading</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/lazy-loading/</link>
      <pubDate>Fri, 12 May 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/lazy-loading/</guid>
      
      <description>Overview By default, when the app launches, all assemblies are automatically downlaoded from the web server. Blazor can be instructed to postpone downloading an assembly.
Implementation Steps 1. Register the Lazily-Loaded Assemblies in Project File csproj
&amp;lt;ItemGroup&amp;gt; &amp;lt;BlazorWebAssemblyLazyLoad Include=&amp;#34;ExampleProject.dll&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; 2. Make Changes to Router in App.razor App.razor
&amp;lt;!-- Inject LazyAssemblyLoader which is automatically registered with DI by the framework --&amp;gt; @using Microsoft.AspNetCore.WebAssembly.Services @inject LazyAssemblyLoader &amp;lt;Router AppAssembly=&amp;#34;@typeof(App).Assembly&amp;#34; AdditionalAssemblies=&amp;#34;@lazyLoadedAssemblies&amp;#34; OnNavigateAsync=&amp;#34;@OnNavigateAsync&amp;#34;&amp;gt; .</description>
      
    </item>
    
    <item>
      <title>events</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/events/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/events/</guid>
      
      <description>Overview DOM events can be assigned an event handler to execute code when the event is triggered:
@onsomeDOMevent=&amp;quot;Delegate&amp;quot;
Example
&amp;lt;button @onclick=&amp;#34;SaveEmployee&amp;#34;&amp;gt;Save&amp;lt;/button&amp;gt; @code { private void SaveEmployee() { … } } Default Event Arguments Some events support event arguments. For example:
@onclick passes MouseEventArgs @onkeydown passes KeyboardEventArgs Example
&amp;lt;button @onclick=&amp;#34;ShowLocation&amp;#34;&amp;gt;Show&amp;lt;/button&amp;gt; @code { private void ShowLocation(MouseEventArgs e) { } } EventCallback When an event occurs in a child Component, use EventCallback to trigger code to execute in the parent Component:</description>
      
    </item>
    
    <item>
      <title>parameters</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/parameters/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/parameters/</guid>
      
      <description>Component Parameters Parameters allow Components to pass data from one another. The [Parameter] attribute on a public auto property (no get/set logic) of a receiving Component defines it as a parameter:
PanelBody.cs
public class PanelBody { public string? Text { get; set; } public string? Style { get; set; } } Shared/ParameterChild.razor
&amp;lt;div class=&amp;#34;card w-25&amp;#34; style=&amp;#34;margin-bottom:15px&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-header font-weight-bold&amp;#34;&amp;gt;@Title&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-body&amp;#34; style=&amp;#34;font-style:@Body.Style&amp;#34;&amp;gt; @Body.Text &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; @code { [Parameter] public string Title { get; set; } = &amp;#34;Set By Child&amp;#34;; [Parameter] public PanelBody Body { get; set; } = new() { Text = &amp;#34;Set by child.</description>
      
    </item>
    
    <item>
      <title>security and identity</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/security-and-identity/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/security-and-identity/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
ASP.NET Core Identity A&amp;amp;A system that supports UI login functionality Not for APIs Supports external service providers Supports MVC &amp;amp; Razor Pages, scaffolding, SQL Server Includes a Razor Class Library for identity-enabled Views that typically need to be included in a web app Important Classes UserManager&amp;lt;IdentityUser&amp;gt; Manages all interaction (CRUD operations) with user objects in the datastore.
SignInManager&amp;lt;IdentityUser&amp;gt; User authentication and related actions; defines methods such as PasswordSignInAsync, ConfirmEmailAsync, SignOutAsync, etc.</description>
      
    </item>
    
    <item>
      <title>tag helpers custom</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/tag-helpers-custom/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/tag-helpers-custom/</guid>
      
      <description>Overview Tag helpers are plain C# classes that inherit from TagHelper.
They can be placed anywhere and must be named NameOfElementTagHelper.
They override Process or ProcessAsync. This method returns HTML which is inserted where the tag helper is invoked.
Example:
/TagHelpers/EmailTagHelper.cs
public class EmailTagHelper : TagHelper { public void override Process(TagHelperContext context, TagHelperOutput output) { // mailto links use the anchor tag, so the tag name of this output will be &amp;#34;a&amp;#34; output.</description>
      
    </item>
    
    <item>
      <title>app startup</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/app-startup/</link>
      <pubDate>Thu, 04 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/app-startup/</guid>
      
      <description>Overview Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/startup?view=aspnetcore-7.0 Program.cs
builder.Services.AddRazorPages(); builder.Services.AddServerSideBlazor(); // add Blazor services to the DI container … app.MapBlazorHub(); // set up an endpoint for the real-time communication w/browser (via SignalR) app.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); // set the root page (Pages/_Host.cshtml) and enable nav; when no matching endpoint is found, route requests here Controlling Headers Use middleware to control the headers collection:
Program.cs app.Use(async (context, next) =&amp;gt; { context.Response.Headers.Add(&amp;#34;Content-Security-Policy&amp;#34;, &amp;#34;{POLICY STRING}&amp;#34;); await next(); }); </description>
      
    </item>
    
    <item>
      <title>forms</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/forms/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/forms/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
Creating a Form Using Tag Helpers ASP.NET Core has built-in Tag Helpers for creating forms:
Form asp-controller to specify which controller to target on a form&amp;rsquo;s POST action asp-action to specify which action to target on a form&amp;rsquo;s POST action asp-route-* to create a route where * can be the name of a parameter we want to specify a value for asp-route to specify which named route to use asp-antiforgery to counter cross-site request forgery attacks Input Label Textarea Select Validation Get the name of the property we want to display via the asp-for attribute on the label tag helper:</description>
      
    </item>
    
    <item>
      <title>model binding</title>
      <link>http://localhost:1313/wieserpedia/asp.net/advanced/model-binding/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/advanced/model-binding/</guid>
      
      <description>Overview [Documentation] Model binding is the automated process of retrieving data values from an HTTP request and converting the resulting string to a .NET type.
The model binding system:
Retrieves data from route data, form data, and query strings Passes that data to controllers and Razor Pages in method parameters and public properties Converts string data to .NET types Updates properties of complex types Example Consider this action method&amp;hellip;
[HttpGet(&amp;#34;{id}&amp;#34;)] public ActionResult&amp;lt;Pet&amp;gt; GetById(int id, bool dogsOnly) &amp;hellip;and this HTTP request: https://contoso.</description>
      
    </item>
    
    <item>
      <title>routing</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/routing/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/routing/</guid>
      
      <description>Overview Routing in Razor Pages is file-based. URLs are routed to pages based on their location in the filesystem:
URL Path / or /Index /Pages/Index.cshtml /Contact /Pages/Contact.cshtml /Store or /Store/Index.html /Pages/Store/Index.cshtml URL Maps to this Razor page www.example.com Pages/Index.cshtml www.example.com/index Pages/Index.cshtml www.example.com/products Pages/Products/Index.cshtml www.example.com/products/create Pages/Products/Create.cshtml </description>
      
    </item>
    
    <item>
      <title>view components</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/view-components/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/view-components/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
Overview View components are view content that does require code to execute in order to render.
They only display partial content. They consist of a class and a view (much like a Controller and a View). They have their own code that executes to render content. They support dependency injection. They have a &amp;ldquo;code part&amp;rdquo; placed in /Components/ViewComponentName.cs They have a &amp;ldquo;view part&amp;rdquo; placed in /Shared/Components/ViewComponentName/Default.</description>
      
    </item>
    
    <item>
      <title>from pluralsight aspnet core 6 fundamentals</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/from-pluralsight-aspnet-core-6-fundamentals/</link>
      <pubDate>Mon, 01 May 2023 13:34:12 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/from-pluralsight-aspnet-core-6-fundamentals/</guid>
      
      <description>(Notes from Pluralsight/ASP.NET Core 6 Fundamentals)
Overview Prior to Entity Framework Core, the approach to bring data into a web app was ADO.NET. This was low-level and required developers to know a lot of SQL. EF Core makes this easier.
EF Core looks for a property named Id or ClassNameId and makes that the Primary Key in the database.
EF Core Change Tracking The EF Core Data context keeps tracks of changes in data objects and updates them in the database.</description>
      
    </item>
    
    <item>
      <title>content management</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/content-management/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/content-management/</guid>
      
      <description>Overview Credit: Cloud Cannon
Pretty URLs By default, Hugo uses pretty URLs: content/posts/blog/first-post.md renders to https://example.com/posts/blog/first-post/.
An ugly URL would be https://example.com/posts/blog/first-post/index.html.
Content If a directory has an _index.md, Hugo uses it to create a listing of files/directories underneath that directory.
Without any further configuration, this works:
. └── content └── about | └── index.md # &amp;lt;- https://example.com/about/ ├── posts | ├── firstpost.md # &amp;lt;- https://example.com/posts/firstpost/ | ├── happy | | └── ness.</description>
      
    </item>
    
    <item>
      <title>converting to hosted wasm app</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/converting-to-hosted-wasm-app/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/converting-to-hosted-wasm-app/</guid>
      
      <description>Overview The existing solution contains:
BethanysPieShopHRM.Api BethanysPieShopHRM.App BethanysPieShopHRM.Shared Presently, BethanysPieShopHRM.App is a standalone Blazor WASM app.
This process converts it to a hosted Blazor WASM app.
BethanysPieShopHRM.Api dotnet add package Microsoft.AspNetCore.Components.WebAssembly.Server
Program.cs
// ... if (app.Environment.IsDevelopment()) { app.UseWebAssemblyDebugging(); } app.UseBlazorFrameworkFiles(); // needed to serve the app app.UseStaticFiles(); // the Blazor app will be hosted as static files // ... // if an incoming request cannot be routed, re-route it to index.</description>
      
    </item>
    
    <item>
      <title>frontmatter</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/frontmatter/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/frontmatter/</guid>
      
      <description>Overview Frontmatter (or front matter) is metadata for a page.
Predefined Frontmatter These predefined variables can be called from Page Variables. This list is incomplete:
aliases — an array of aliases that are published paths of renamed content that will be recreated in the output directory structure (see also: Aliases) date — the datetime assigned to this page description — a description of the page draft — if true, hugo will not publish unless --buildDrafts is passed expiryDate — if in the past, hugo will not publish unless --buildExpired is passed images — an array of paths to images related to this page keywords — the meta keywords for this content lastmod — the datetime at which content was last modified linkTitle — if set, Hugo defaults to using the linkTitle before the title (see also: Order lists of content by linktitle) outputs — specify the output formats (see also: Output formats) publishDate — if in the future, hugo will not publish unless --buildFuture is passed slug — overrides the last segment of the URL path (see also: URL management) type — the type of the content; derived from the directory (the section) if nto specified here (see also: Sections) url — overrides the URL path; works for both regular pages and sections (see also: URL management) weight — specify weight to order content in lists lower weight comes first must be non-zero see also: Ordering content in lists User-defined Frontmatter User-defined frontmatter fields can be added.</description>
      
    </item>
    
    <item>
      <title>scripting</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/scripting/</link>
      <pubDate>Mon, 01 May 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/scripting/</guid>
      
      <description>Flow Control For for ($i=1; $i -le 10; $i++) { # ... } Foreach foreach ($item in $collection) { # ... } Multi-line Statements $x = &amp;#34;Some really long ` value&amp;#34; Strings Concatenating $x = &amp;#34;together&amp;#34; Write-Host &amp;#34;Smushed$x&amp;#34; # or... Write-Host &amp;#34;Smushed$($x)&amp;#34; </description>
      
    </item>
    
    <item>
      <title>overview</title>
      <link>http://localhost:1313/wieserpedia/web-development/css/w3-css/overview/</link>
      <pubDate>Thu, 27 Apr 2023 11:07:42 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/css/w3-css/overview/</guid>
      
      <description>Abstract A front-end web development framework. Uses HTML and CSS (no JavaScript).
Compare to Bootstrap.</description>
      
    </item>
    
    <item>
      <title>svg element</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/graphics/svg-element/</link>
      <pubDate>Thu, 27 Apr 2023 09:56:59 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/graphics/svg-element/</guid>
      
      <description>Overview SVG defines vector-based graphics in XML format.
Circle &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;svg width=&amp;#34;100&amp;#34; height=&amp;#34;100&amp;#34;&amp;gt; &amp;lt;circle cx=&amp;#34;50&amp;#34; cy=&amp;#34;50&amp;#34; r=&amp;#34;40&amp;#34; stroke=&amp;#34;green&amp;#34; stroke-width=&amp;#34;4&amp;#34; fill=&amp;#34;yellow&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Rectangle &amp;lt;svg width=&amp;#34;400&amp;#34; height=&amp;#34;100&amp;#34;&amp;gt; &amp;lt;rect width=&amp;#34;400&amp;#34; height=&amp;#34;100&amp;#34; style=&amp;#34;fill:rgb(0,0,255);stroke-width:10;stroke:rgb(0,0,0)&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; Rounded Rectangle &amp;lt;svg width=&amp;#34;400&amp;#34; height=&amp;#34;180&amp;#34;&amp;gt; &amp;lt;rect x=&amp;#34;50&amp;#34; y=&amp;#34;20&amp;#34; rx=&amp;#34;20&amp;#34; ry=&amp;#34;20&amp;#34; width=&amp;#34;150&amp;#34; height=&amp;#34;150&amp;#34; style=&amp;#34;fill:red;stroke:black;stroke-width:5;opacity:0.5&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; Star &amp;lt;svg width=&amp;#34;300&amp;#34; height=&amp;#34;200&amp;#34;&amp;gt; &amp;lt;polygon points=&amp;#34;100,10 40,198 190,78 10,78 160,198&amp;#34; style=&amp;#34;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; Logo &amp;lt;svg height=&amp;#34;130&amp;#34; width=&amp;#34;500&amp;#34;&amp;gt; &amp;lt;defs&amp;gt; &amp;lt;linearGradient id=&amp;#34;grad1&amp;#34; x1=&amp;#34;0%&amp;#34; y1=&amp;#34;0%&amp;#34; x2=&amp;#34;100%&amp;#34; y2=&amp;#34;0%&amp;#34;&amp;gt; &amp;lt;stop offset=&amp;#34;0%&amp;#34; style=&amp;#34;stop-color:rgb(255,255,0);stop-opacity:1&amp;#34; /&amp;gt; &amp;lt;stop offset=&amp;#34;100%&amp;#34; style=&amp;#34;stop-color:rgb(255,0,0);stop-opacity:1&amp;#34; /&amp;gt; &amp;lt;/linearGradient&amp;gt; &amp;lt;/defs&amp;gt; &amp;lt;ellipse cx=&amp;#34;100&amp;#34; cy=&amp;#34;70&amp;#34; rx=&amp;#34;85&amp;#34; ry=&amp;#34;55&amp;#34; fill=&amp;#34;url(#grad1)&amp;#34; /&amp;gt; &amp;lt;text fill=&amp;#34;#ffffff&amp;#34; font-size=&amp;#34;45&amp;#34; font-family=&amp;#34;Verdana&amp;#34; x=&amp;#34;50&amp;#34; y=&amp;#34;86&amp;#34;&amp;gt;SVG&amp;lt;/text&amp;gt; Sorry, your browser does not support inline SVG.</description>
      
    </item>
    
    <item>
      <title>canvas element</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/graphics/canvas-element/</link>
      <pubDate>Thu, 27 Apr 2023 09:50:36 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/graphics/canvas-element/</guid>
      
      <description>Overview The &amp;lt;canvas&amp;gt; element is a container for graphics drawn by JavaScript. Syntax:
&amp;lt;canvas id=&amp;#34;myCanvas&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; Empty Canvas &amp;lt;canvas id=&amp;#34;myCanvas&amp;#34;width=&amp;#34;200&amp;#34;height=&amp;#34;100&amp;#34;style=&amp;#34;border:1px solid #000000;&amp;#34;&amp;gt; &amp;lt;/canvas&amp;gt; Line &amp;lt;canvas id=&amp;#34;myCanvas&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;100&amp;#34; style=&amp;#34;border:1px solid #d3d3d3;&amp;#34;&amp;gt; Your browser does not support the HTML canvas tag.&amp;lt;/canvas&amp;gt; &amp;lt;script&amp;gt; var c = document.getElementById(&amp;#34;myCanvas&amp;#34;); var ctx = c.getContext(&amp;#34;2d&amp;#34;); ctx.moveTo(0,0); ctx.lineTo(200,100); ctx.stroke(); &amp;lt;/script&amp;gt; Circle &amp;lt;script&amp;gt; var c = document.getElementById(&amp;#34;myCanvas&amp;#34;); var ctx = c.getContext(&amp;#34;2d&amp;#34;); ctx.beginPath(); ctx.arc(95, 50, 40, 0, 2 * Math.</description>
      
    </item>
    
    <item>
      <title>input element</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/forms/input-element/</link>
      <pubDate>Thu, 27 Apr 2023 09:42:47 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/forms/input-element/</guid>
      
      <description>type Attribute &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;Displays a single-line text input field &amp;lt;form&amp;gt; &amp;lt;!-- the label element is read by screen readers --&amp;gt; &amp;lt;!-- the label&amp;#39;s for attribute must be equal to the id attribute of the input element to bind them --&amp;gt; &amp;lt;labelfor=&amp;#34;fname&amp;#34;&amp;gt;First name:&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;inputtype=&amp;#34;text&amp;#34;id=&amp;#34;fname&amp;#34;name=&amp;#34;fname&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;labelfor=&amp;#34;lname&amp;#34;&amp;gt;Last name:&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;inputtype=&amp;#34;text&amp;#34;id=&amp;#34;lname&amp;#34;name=&amp;#34;lname&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34;&amp;gt;Displays a radio button (for selecting one of many choices) &amp;lt;form&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; id=&amp;#34;html&amp;#34; name=&amp;#34;fav_language&amp;#34; value=&amp;#34;HTML&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;html&amp;#34;&amp;gt;HTML&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; id=&amp;#34;css&amp;#34; name=&amp;#34;fav_language&amp;#34; value=&amp;#34;CSS&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;css&amp;#34;&amp;gt;CSS&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; id=&amp;#34;javascript&amp;#34; name=&amp;#34;fav_language&amp;#34; value=&amp;#34;JavaScript&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;javascript&amp;#34;&amp;gt;JavaScript&amp;lt;/label&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34;&amp;gt;Displays a checkbox (for selecting zero or more of many choices) &amp;lt;form&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;vehicle1&amp;#34; name=&amp;#34;vehicle1&amp;#34; value=&amp;#34;Bike&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;vehicle1&amp;#34;&amp;gt; I have a bike&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;vehicle2&amp;#34; name=&amp;#34;vehicle2&amp;#34; value=&amp;#34;Car&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;vehicle2&amp;#34;&amp;gt; I have a car&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;vehicle3&amp;#34; name=&amp;#34;vehicle3&amp;#34; value=&amp;#34;Boat&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;vehicle3&amp;#34;&amp;gt; I have a boat&amp;lt;/label&amp;gt; &amp;lt;/form&amp;gt; A server-side script (perhaps in PHP) handles the submitted form.</description>
      
    </item>
    
    <item>
      <title>form element</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/forms/form-element/</link>
      <pubDate>Thu, 27 Apr 2023 08:07:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/forms/form-element/</guid>
      
      <description>Overview Creates a form — a container for different types of input elements.
action Attribute &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;Displays a submit button (for submitting the form) &amp;lt;!-- where to send the form when submitted --&amp;gt; &amp;lt;form action=&amp;#34;/action_page.php&amp;#34; &amp;lt;label for=&amp;#34;fname&amp;#34;&amp;gt;First name:&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;fname&amp;#34; name=&amp;#34;fname&amp;#34; value=&amp;#34;John&amp;#34;&amp;gt;&amp;lt;br&amp;gt; &amp;lt;label for=&amp;#34;lname&amp;#34;&amp;gt;Last name:&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;lname&amp;#34; name=&amp;#34;lname&amp;#34; value=&amp;#34;Doe&amp;#34;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; Other &amp;lt;form&amp;gt; Attributes Attribute Values Description target _blank, _self (default), _parent, top, framename Where to display the response that is received after submitting the form method get (default), post HTTP method to use when submitting form data autocomplete on, off Whether to autocomplete input novalidate boolean Whether input should be validated accept-charset The character encoding used for form submission enctype Used only for method=&amp;ldquo;post&amp;rdquo; Defines how the form data should be encoded when submitted Notes on method=&amp;quot;get&amp;quot;</description>
      
    </item>
    
    <item>
      <title>responsive design</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/responsive-design/</link>
      <pubDate>Wed, 26 Apr 2023 20:48:26 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/responsive-design/</guid>
      
      <description>Overview Responsive designs automatically adjust for different screen sizes and viewports:
To achieve responsive design:
Always set the viewport in the meta tag Images Set the CSS width property to 100% to allow the image to scale up and down Set the CSS max-width property to 100% to allow the image to scale down, but never scale up Use the &amp;lt;picture&amp;gt; element to use different images for different browser window sizes.</description>
      
    </item>
    
    <item>
      <title>lists</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/lists/</link>
      <pubDate>Wed, 26 Apr 2023 17:34:30 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/lists/</guid>
      
      <description>Lists Unordered:
&amp;lt;ul style=&amp;#34;list-style-type:disc;&amp;#34;&amp;gt; &amp;lt;!-- style for list item markers; also circle, square, none --&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Tea&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; Ordered:
&amp;lt;!-- style for list item markers; also A, a, I, i --&amp;gt; &amp;lt;!-- start: where to start the count --&amp;gt; &amp;lt;ol type=&amp;#34;1&amp;#34; start=&amp;#34;50&amp;#34;&amp;gt; &amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Tea&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; Horizontal Lists Use CSS to make a horizontal list, like a navigation menu:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; ul { list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #333333; } li { float: left; } li a { display: block; color: white; text-align: center; padding: 16px; text-decoration: none; } li a:hover { background-color: #111111; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#home&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#news&amp;#34;&amp;gt;News&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#contact&amp;#34;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#about&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Description Lists A list of terms with descriptions of each:</description>
      
    </item>
    
    <item>
      <title>tables</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/tables/</link>
      <pubDate>Wed, 26 Apr 2023 17:23:20 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/tables/</guid>
      
      <description>Overview Like so:
&amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;!-- add a table row --&amp;gt; &amp;lt;!-- add a header cell to this row --&amp;gt; &amp;lt;th style=&amp;#34;width:70%&amp;#34;&amp;gt; &amp;lt;!-- set the column width of this cell--&amp;gt; Company &amp;lt;/th&amp;gt; &amp;lt;th colspan=&amp;#34;2&amp;#34;&amp;gt;Contact&amp;lt;/th&amp;gt; &amp;lt;!-- span this column 2 cells --&amp;gt; &amp;lt;th&amp;gt;Country&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr style=&amp;#34;height:200px&amp;#34;&amp;gt; &amp;lt;!-- set the height of this row --&amp;gt; &amp;lt;td&amp;gt;Alfreds Futterkiste&amp;lt;/td&amp;gt; &amp;lt;!-- add data to this row --&amp;gt; &amp;lt;td&amp;gt;Maria Anders&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Germany&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Centro comercial Moctezuma&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Francisco Chang&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Mexico&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; Or, like so:</description>
      
    </item>
    
    <item>
      <title>images</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/images/</link>
      <pubDate>Wed, 26 Apr 2023 17:22:39 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/images/</guid>
      
      <description>Overview Syntax:
&amp;lt;img src=&amp;#34;url&amp;#34; alt=&amp;#34;alternatetext&amp;#34;&amp;gt; The alt attribute&amp;rsquo;s value is also displayed if the image is not found.
Always specify alt, width and height for images.
Sizing Images can be sized. Failing to size them will result in page flicker while the page loads.
Use the width and height attributes:
&amp;lt;img src=&amp;#34;img_girl.jpg&amp;#34; alt=&amp;#34;Girl in a jacket&amp;#34; width=&amp;#34;500&amp;#34; height=&amp;#34;600&amp;#34;&amp;gt; Or, use the style attribute with width and height properties with the pixels suffix:</description>
      
    </item>
    
    <item>
      <title>hyperlinks</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/hyperlinks/</link>
      <pubDate>Wed, 26 Apr 2023 17:22:15 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/hyperlinks/</guid>
      
      <description>Overview Links are defined with an &amp;lt;a&amp;gt; tag and the link&amp;rsquo;s destination is assigned to the href attribute:
&amp;lt;a href=&amp;#34;https://www.w3schools.com&amp;#34;&amp;gt;This is a link&amp;lt;/a&amp;gt; By default, an unvisited link is underlined/blue, visited is underlined/purple, active is underlined/red.
To use an image as a link, put the image inside the anchor tag:
&amp;lt;a href=&amp;#34;default.asp&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;smiley.gif&amp;#34; alt=&amp;#34;HTML tutorial&amp;#34; style=&amp;#34;width:42px;height:42px;&amp;#34;&amp;gt; &amp;lt;/a&amp;gt; target attribute Specifies where to open the linked document. Values:
_self — default _blank — new window/tab _parent — in parent frame _top — full body of current window Bookmarks Bookmarks allow page visitors to jump to certain parts of the page.</description>
      
    </item>
    
    <item>
      <title>css</title>
      <link>http://localhost:1313/wieserpedia/web-development/css/css/</link>
      <pubDate>Wed, 26 Apr 2023 15:58:15 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/css/css/</guid>
      
      <description>Overview Cascading Style Sheets format the layout of a webpage.
Syntax: property:value;
CSS Rulesets Select an element whose class=container; find the pararaph inside; find the first child inside of it; find the first character of that element
.container p:first-child::first-letter { font-size: 42px; text-transform: uppercase; } The first line is the selector — the elements we are targeting.
first-child is the pseudo-class
first-letter is the pseudo-character selector
Cascading CSS rulesets cascade.</description>
      
    </item>
    
    <item>
      <title>sending keystrokes</title>
      <link>http://localhost:1313/wieserpedia/tools/autohotkey/sending-keystrokes/</link>
      <pubDate>Wed, 26 Apr 2023 14:21:17 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/autohotkey/sending-keystrokes/</guid>
      
      <description>Sending Keystrokes SendText To send a string:
^1::SendText &amp;#34;To whom it may concern&amp;#34; ^2::SendText &amp;#34;Send a &amp;#34;quoted string&amp;#34;&amp;#34; Sending Long Text SendText &amp;#34; ( Leading indentation is stripped out, based on the first line. Line breaks are kept unless you use the &amp;#34;Join&amp;#34; option. )&amp;#34; Send To send keystrokes:
^+{Left} produces Ctrl + Shift + Left arrow
^{+}{Left} produces Ctrl + + followed by Left arrow
^+Left produces Ctrl + Shift + L followed by eft</description>
      
    </item>
    
    <item>
      <title>hotstrings</title>
      <link>http://localhost:1313/wieserpedia/tools/autohotkey/hotstrings/</link>
      <pubDate>Wed, 26 Apr 2023 14:05:45 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/autohotkey/hotstrings/</guid>
      
      <description>Definition :options:abbreviation::replacement text Creating ::btw::by the way Typing &amp;ldquo;btw&amp;rdquo; followed by an ending character triggers this hotstring.
::]d:: ; This hotstring replaces &amp;#34;]d&amp;#34; with the current date and time via the functions below. { SendInput FormatTime(, &amp;#34;M/d/yyyy h:mm tt&amp;#34;) ; It will look like 9/1/2005 3:53 PM } Ending Characters - ( ) [ ] { } : ; / \ , . ? ! &amp;lt;enter&amp;gt; &amp;lt;tab&amp;gt;
Long Replacements Use paranthesis:</description>
      
    </item>
    
    <item>
      <title>hotkeys</title>
      <link>http://localhost:1313/wieserpedia/tools/autohotkey/hotkeys/</link>
      <pubDate>Wed, 26 Apr 2023 13:57:43 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/autohotkey/hotkeys/</guid>
      
      <description>Hotkeys hotkey-name::action hotkey-name:: { if condition action ; comment else action } Examples #n:: Run &amp;#34;notepad&amp;#34; ; Win + N to run notepad.exe #n::MsgBox ThisHotkey ; returns &amp;#34;#n&amp;#34; LButton — left mouse button RButton — right mouse button
Modifiers LWin — Left Winkey ^ — Ctrl &amp;lt;^ — Left Ctrl ! — Alt ! Up — only fire when Alt is released (vs pressed) + — Shift - — hotkey will fire even if extra modifier keys are held ~ — prevents hotkey from blocking the key&amp;rsquo;s native function $ — if the script uses the Send function to send the keys that comprise of the hotkey itself, use this.</description>
      
    </item>
    
    <item>
      <title>scripting</title>
      <link>http://localhost:1313/wieserpedia/tools/autohotkey/scripting/</link>
      <pubDate>Wed, 26 Apr 2023 13:15:39 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/autohotkey/scripting/</guid>
      
      <description>Comments ; This is a comment
/* This is also a comment */ …but the comment does not end here.
Escapes ``&amp;quot;` escapes a quote ``t` tab ``n` linefeed ``r` carriage return Variables Assignment MyVar := &amp;#34;Some text&amp;#34; &amp;#34;The value is &amp;#34; MyVar ; this will be implicitly concatenated Format function To format strings:
MsgBox Format(&amp;#34;You are using AutoHotkey v{1} {2}-bit.&amp;#34;, A_AhkVersion, A_PtrSize*8) Operators Ternary condition ? valueIfTrue : valueIfFalse Functions Parentheses can be omitted if a function call is a single line:</description>
      
    </item>
    
    <item>
      <title>from razor pages in ef core in aspnet core</title>
      <link>http://localhost:1313/wieserpedia/asp.net/ef-core/from-razor-pages-in-ef-core-in-aspnet-core/</link>
      <pubDate>Tue, 25 Apr 2023 12:36:11 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/ef-core/from-razor-pages-in-ef-core-in-aspnet-core/</guid>
      
      <description>Notes from Razor Pages with Entity Framework Core in ASP.NET Core - Tutorial 1 of 8 | Microsoft Learn
Creating a Database Program.cs
using (var scope = app.Services.CreateScope()) { var services = scope.ServiceProvider; var context = services.GetRequiredService&amp;lt;SchoolContext&amp;gt;(); context.Database.EnsureCreated(); // DbInitializer.Initialize(context); } The EnsureCreated method checks if the database exists. If not, it creates the database and schema.
This allows for the following workflow for data model changes:
Delete the database Change the data model (ie: add an EmailAddress field) Run the app EnsureCreated will create a database with the new schema When data exists that cannot be lost, use migrations instead of EnsureCreated.</description>
      
    </item>
    
    <item>
      <title>scaffolding</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/scaffolding/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/scaffolding/</guid>
      
      <description>From Pluralsight/ASP.NET 6 Core Fundamentals
Overview ASP.NET Core can scaffold. This creates:
a DbContext class—the main class that coordinates EF functionality for a given data model. Razor pages that handle CRUD operations for an entity. How to Scaffold from Visual Studio Create Pages/subfolder In Solution Explorer &amp;gt; right-click Pages/subfolder &amp;gt; Add &amp;gt; New Scaffolded Item a. Installed &amp;gt; Common &amp;gt; Razor Pages &amp;gt; Razor Pages using Entity Framework (CRUD) &amp;gt; ADD In Add Razor Pages using Entity Framework (CRUD) dialog &amp;gt; a.</description>
      
    </item>
    
    <item>
      <title>control structures</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/control-structures/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/control-structures/</guid>
      
      <description>@if, else if, else @if controls when code runs; else and else if do not require the @ symbol:
@if (value % 2 == 0) { &amp;lt;p&amp;gt;The value was even.&amp;lt;/p&amp;gt; } else if (value &amp;gt;= 1337) { &amp;lt;p&amp;gt;The value is large.&amp;lt;/p&amp;gt; } else { &amp;lt;p&amp;gt;The value is odd and small.&amp;lt;/p&amp;gt; } @switch Statements Like so:
@switch (value) { case 1: &amp;lt;p&amp;gt;The value is 1!&amp;lt;/p&amp;gt; break; case 1337: &amp;lt;p&amp;gt;Your number is 1337!</description>
      
    </item>
    
    <item>
      <title>directive attributes</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/directive-attributes/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/directive-attributes/</guid>
      
      <description>Overview Directive attributes change the way a component element is parsed or functions.
These only apply to Razor components (.razor). See Components.
@attributes @bind @bind:culture @on{EVENT} @on{EVENT}:preventDefault @on{EVENT}:stopPropagation @key @ref @typeparam </description>
      
    </item>
    
    <item>
      <title>directives</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/directives/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/directives/</guid>
      
      <description>Overview Directives change the way component markup is parsed or functions.
This CSHTML:
@{ var quote = &amp;#34;Getting old ain&amp;#39;t for wimps! - Anonymous&amp;#34;; } &amp;lt;div&amp;gt;Quote of the Day: @quote&amp;lt;/div&amp;gt; &amp;hellip;generates this C# class:
public class _Views_Something_cshtml : RazorPage&amp;lt;dynamic&amp;gt; { public override async Task ExecuteAsync() { var output = &amp;#34;Getting old ain&amp;#39;t for wimps! - Anonymous&amp;#34;; WriteLiteral(&amp;#34;/r/n&amp;lt;div&amp;gt;Quote of the Day: &amp;#34;); Write(output); WriteLiteral(&amp;#34;&amp;lt;/div&amp;gt;&amp;#34;); } } @attribute Adds the given attribute to the class of the generated page or view:</description>
      
    </item>
    
    <item>
      <title>implicit and explicit expressions</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/implicit-and-explicit-expressions/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/implicit-and-explicit-expressions/</guid>
      
      <description>Implicit Razor Expressions Implicit Razor expressions start with @ and are followed by C# code. These must not contain spaces (except with the await keyword):
&amp;lt;p&amp;gt;@DateTime.Now&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;@DateTime.IsLeapYear(2016)&amp;lt;/p&amp;gt; No Generics Implict expressions cannot contain C# generics: the characters inside &amp;lt; &amp;gt; are evaluated as an HTML tag.
Invalid: &amp;lt;p&amp;gt;@GenericMethod&amp;lt;int&amp;gt;()&amp;lt;/p&amp;gt;
To make genric method calls, use explicit Razor expressions.
Explicit Razor Expressions Explicit Razor expressions use an @ symbol and paranthesis:
&amp;lt;p&amp;gt;Last week this time: @(DateTime.</description>
      
    </item>
    
    <item>
      <title>razor code blocks</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/razor-code-blocks/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/razor-code-blocks/</guid>
      
      <description>Overview Start with @ and are enclosed in { }. Unlike expressions, C# code inside code blocks is not rendered:
@{ var quote = &amp;#34;The future depends on what you do today. - Mahatma Gandhi&amp;#34;; } &amp;lt;p&amp;gt;@quote&amp;lt;/p&amp;gt; @{ quote = &amp;#34;Hate cannot drive out hate, only love can do that. - Martin Luther King, Jr.&amp;#34;; } &amp;lt;p&amp;gt;@quote&amp;lt;/p&amp;gt; Declare local functions in code blocks to serve as templating methods:
@{ void RenderName(string name) { &amp;lt;p&amp;gt;Name: &amp;lt;strong&amp;gt;@name&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt; } RenderName(&amp;#34;Mahatma Gandhi&amp;#34;); RenderName(&amp;#34;Martin Luther King, Jr.</description>
      
    </item>
    
    <item>
      <title>razor templates</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/razor-templates/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-syntax/razor-templates/</guid>
      
      <description>Overview Razor templates allow you to define a UI snippet:
@&amp;lt;tag&amp;gt;...&amp;lt;/tag&amp;gt;
Define a Template Templates are defined as delegates. Consider Pet.cs:
public class Pet { public string Name { get; set; } } And RazorTemplate.cshtml:
@{ Func&amp;lt;dynamic, object&amp;gt; petTemplate = @&amp;lt;p&amp;gt;You have a pet named &amp;lt;strong&amp;gt;@item.Name&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;; var pets = new List&amp;lt;Pet&amp;gt; { new Pet { Name = &amp;#34;Rin Tin Tin&amp;#34; }, new Pet { Name = &amp;#34;Mr. Bigglesworth&amp;#34; }, new Pet { Name = &amp;#34;K-9&amp;#34; } }; } Render the template like this:</description>
      
    </item>
    
    <item>
      <title>browser link</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/client-side-development/browser-link/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/client-side-development/browser-link/</guid>
      
      <description>Overview [Documentation] Browser Link is a Visual Studio feature that creates a communication channel (SignalR) between Visual Studio and one or more browsers.
Uses:
Refreshing web app in several browsers at once Testing across multiple browsers Selecting UI elements and seeing what markup/source code they correlate to in Visual Studio Configuring Add the package: dotnet add package Microsoft.VisualStudio.Web.BrowserLink Configure the app: using Microsoft.VisualStudio.Web.BrowserLink; // ... if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); app.UseBrowserLink(); } Using With an ASP.</description>
      
    </item>
    
    <item>
      <title>libman</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/client-side-development/libman/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/client-side-development/libman/</guid>
      
      <description>Overview Library Manager (LibMan) is included in Visual Studio. LibMan allows you to add external libraries such as Bootstrap.
How Via Visual Studio Right-click project &amp;gt; Add &amp;gt; Client-Side Library…
Via LibMan CLI Install the LibMan CLI as a dotnet tool: dotnet tool install -g Microsoft.Web.LibraryManager.Cli Initialize LibMan in the project: libman init This creates a libman.json file if one does not already exist. Add libraries: libman install &amp;lt;library&amp;gt; --destination &amp;lt;path&amp;gt; --files &amp;lt;file-to-install&amp;gt; # if not specified, install all files in package --provider &amp;lt;cdnjs|filesystem|jsdeliver|unkpg&amp;gt; Bootstrap Add to /wwwroot/lib/bootstrap</description>
      
    </item>
    
    <item>
      <title>tag helpers</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/tag-helpers/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/tag-helpers/</guid>
      
      <description>Overview Tag Helpers consists of markup code that executes server-side and triggers the execution of code. They can be tags, attributes, or elements.
They enable server-side code to create and render HTML elements in Razor files.
They look like standard HTML. They replace HTML Helpers. They have rich IntelliSense support.
Registering Tag Helpers for Use Tag Helpers can be added in every file that needs to use them or in _ViewImports.</description>
      
    </item>
    
    <item>
      <title>psreadline</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/modules/psreadline/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/modules/psreadline/</guid>
      
      <description>Sample profile file: sample profile file (github.com)
Return current key bindings Get-PSReadLineKeyHandler
Set custom key bindings Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward
Enable Bash-style completion without Emacs mode Set-PSReadLineKeyHandler -Key Tab -Function Complete
Insert matched quotes Set-PSReadLineKeyHandler -Chord &amp;#39;&amp;#34;&amp;#39;,&amp;#34;&amp;#39;&amp;#34; ` -BriefDescription SmartInsertQuote ` -LongDescription &amp;#34;Insert paired quotes if not already on a quote&amp;#34; ` -ScriptBlock { param($key, $arg) $line = $null $cursor = $null [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor) if ($line.</description>
      
    </item>
    
    <item>
      <title>routing middleware</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/routing-middleware/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/routing-middleware/</guid>
      
      <description>Overview UseRouting — adds route matching to the pipeline; looks at endpoints defined in the app and selects the best match.
UseRouting works by calling the SetEndpoint method to attach the endpoint to the current context. UseEndpoints — adds endpoint execution to the pipeline; runs the delegate associated with each the selected endpoint.
UseEndpoints is terminal when a match is found. UseEndpoints uses GetEndpoint to retrieve the endpoint and then invokes its RequestDelegate property.</description>
      
    </item>
    
    <item>
      <title>url matching</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/url-matching/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/routing/url-matching/</guid>
      
      <description>Overview An incoming request comes in. Routing matches the incoming request to an endpoint:
It sets an Endpoint and routes values to a request feature on the HttpContext from the current request: HttpContext.GetEndpoint returns the endpoint HttpRequest.RouteValues returns the collection of route values URL matching is part of routing and operates in a configurable set of phases:
Process the URL path against a set of endpoints and their route templates; return a list of ALL matches</description>
      
    </item>
    
    <item>
      <title>razor pages contact us form</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/razor-pages-contact-us-form/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/razor-pages-contact-us-form/</guid>
      
      <description>Overview In Program.cs:
builder.Services.AddDbContext&amp;lt;CustomerDbContext&amp;gt;(options =&amp;gt; options.UseInMemoryDatabase(&amp;#34;name&amp;#34;)); The data model using System.ComponentModel.DataAnnotations; namespace RazorPagesContacts.Models { public class Customer { public int Id { get; set; } [Required, StringLength(10)] public string? Name { get; set; } } } The database context using Microsoft.EntityFrameworkCore; namespace RazorPagesContacts.Data { public class CustomerDbContext : DbContext { public CustomerDbContext (DbContextOptions&amp;lt;CustomerDbContext&amp;gt; options) : base(options) { } public DbSet&amp;lt;RazorPagesContacts.Models.Customer&amp;gt; Customer =&amp;gt; Set&amp;lt;RazorPagesContacts.Models.Customer&amp;gt;(); } } The view Pages/Customers/Create.cshtml
@page @model RazorPagesContacts.</description>
      
    </item>
    
    <item>
      <title>app startup</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/app-startup/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/app-startup/</guid>
      
      <description>Loading Boot Resources Controlling Headers Use middleware to control the headers collection:
Program.cs
app.Use(async (context, next) =&amp;gt; { context.Response.Headers.Add(&amp;#34;Content-Security-Policy&amp;#34;, &amp;#34;{POLICY STRING}&amp;#34;); await next(); }); In hosted Blazor WASM apps, pass StaticFileOptions to MapFallbackToFile that specifies response headers:
Server project&amp;rsquo;s Program.cs:
var staticFileOptions = new StaticFileOptions { OnPrepareResponse = context =&amp;gt; { context.Context.Response.Headers.Add(&amp;#34;Content-Security-Policy&amp;#34;, &amp;#34;{POLICY STRING}&amp;#34;); } }; ... app.MapFallbackToFile(&amp;#34;index.html&amp;#34;, staticFileOptions); Loading Progress Indicators The Blazor WASM project template contains SVG and text indicators to show loading progress.</description>
      
    </item>
    
    <item>
      <title>app startup</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/app-startup/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/app-startup/</guid>
      
      <description>Overview Startup is asynchronous and automatic via blazor.server.js or blazor.webassembly.js. The Blazor &amp;lt;script&amp;gt; tag is in wwwroot/index.html (WASM) or Pages/_Host.cshtml (Server).
Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/startup?view=aspnetcore-7.0 Manually Starting Blazor Add autostart=&amp;quot;false&amp;quot; to the Blazor &amp;lt;script&amp;gt; tag.
Place a script that calls Blazor.start() after the &amp;lt;script&amp;gt; tag inside the closing &amp;lt;body&amp;gt; tag.
JavaScript Initializers JS initializers execute logic before and after a Blazor app loads.
More: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/startup?view=aspnetcore-7.0#javascript-initializers</description>
      
    </item>
    
    <item>
      <title>dependency injection</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/dependency-injection/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/dependency-injection/</guid>
      
      <description>Default Services Among others:
Service Lifetime Description IJSRuntime Scoped An instance of a JavaScript runtime where JS calls are dispatched NavigationManager Scoped Helpers for working with URI and navigation state Adding &amp;amp; Using Services Note: In ASP.NET Core apps, scoped services are typically scoped to the current request. In Blazor Server apps, the request scope lasts for the duration of the client connection.
Program.cs
var builder = WebApplication.CreateBuilder(args); // builder has an IServiceCollection which is a list of service descriptor objects builder.</description>
      
    </item>
    
    <item>
      <title>dependency injection</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/dependency-injection/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/dependency-injection/</guid>
      
      <description>Default Services Among others:
Service Lifetime Description HttpClient Scoped IJSRuntime Singleton An instance of a JavaScript runtime where JS calls are dispatched NavigationManager Singleton Helpers for working with URI and navigation state Adding &amp;amp; Using Services Note: Blazor WASM apps do not have Scoped DI services. If registered as Scoped, they will behave like Singleton. This results in services having a longer lifetime than typical ASP.NET Core apps.
Program.cs
var builder = WebAssemblyHostBuilder.</description>
      
    </item>
    
    <item>
      <title>environments</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/environments/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/environments/</guid>
      
      <description>Overview These notes are specific to Blazor WASM because Blazor Server uses environment configuration of ASP.NET Core.
When run locally, app defaults to Development.
When app is published, app defaults to Production.
In a hosted Blazor WASM solution, the Server app sets the Blazor-Environment variable to its value. The Client app reads it and sets the environment when WebAssemblyHost is created in Program.cs.
Set Environment via Blazor Start Configuration In wwwroot/index.</description>
      
    </item>
    
    <item>
      <title>error handling</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/error-handling/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/error-handling/</guid>
      
      <description>Overview During development, when Blazor apps encounter an error, it displays a light yellow bar the bottom of the screen. Customize it in Pages/_Host.cshtml:
&amp;lt;div id=&amp;#34;blazor-error-ui&amp;#34;&amp;gt; &amp;lt;environment include=&amp;#34;Staging,Production&amp;#34;&amp;gt; An error has occurred. This application may no longer respond until reloaded. &amp;lt;/environment&amp;gt; &amp;lt;environment include=&amp;#34;Development&amp;#34;&amp;gt; An unhandled exception has occurred. See browser dev tools for details. &amp;lt;/environment&amp;gt; &amp;lt;a href=&amp;#34;&amp;#34; class=&amp;#34;reload&amp;#34;&amp;gt;Reload&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;dismiss&amp;#34;&amp;gt;🗙&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; Detailed Circuit Errors To get detailed circuit errors, set CircuitOptions.</description>
      
    </item>
    
    <item>
      <title>error handling</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/error-handling/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/error-handling/</guid>
      
      <description>Overview During development, when Blazor apps encounter an error, it displays a light yellow bar the bottom of the screen. Customize it in wwwroot/index.html:
&amp;lt;div id=&amp;#34;blazor-error-ui&amp;#34;&amp;gt; An unhandled error has occurred. &amp;lt;a href=&amp;#34;&amp;#34; class=&amp;#34;reload&amp;#34;&amp;gt;Reload&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;dismiss&amp;#34;&amp;gt;🗙&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; </description>
      
    </item>
    
    <item>
      <title>error handling</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/error-handling/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/error-handling/</guid>
      
      <description>ErrorBoundary Blazor apps do not have a middleware processing pipeline that can be handled for global error handling. Instead, use the ErrorBoundary component.
The ErrorBoundary component renders its child content normally, and renders error UI when an unhandled exception occurs.
Example: wrapping the body content of the app&amp;rsquo;s main layout in Shared/MainLayout.razor:
&amp;lt;main&amp;gt; &amp;lt;article class=&amp;#34;content px-4&amp;#34;&amp;gt; &amp;lt;ErrorBoundary&amp;gt; @Body &amp;lt;/ErrorBoundary&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;/main&amp;gt; CascadingValue As an alternative to ErrorBoundary, use an error processing component as a cascading value to handle errors in a centralized way.</description>
      
    </item>
    
    <item>
      <title>logging</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/logging/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/logging/</guid>
      
      <description>Overview Without additional configuration, Blazor Server apps log to server-side .NET console in Development environment at LogLevel.Information or higher.
SignalR Client Logging </description>
      
    </item>
    
    <item>
      <title>logging</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/logging/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/logging/</guid>
      
      <description>Overview Without additional configuration, Blazor WASM apps log to client-side browser developer tools at LogLevel.Information or higher.
Logging in Program.cs
After WebAssemblyHostBuilder is built:
var host = builder.Build(); var logger = host.Services.GetRequiredService&amp;lt;ILoggerFactory&amp;gt;() .CreateLogger&amp;lt;Program&amp;gt;(); logger.LogInformation(&amp;#34;Logged after the app is built in Program.cs.&amp;#34;); await host.RunAsync(); Configure Logging Use the WebAssemblyHostBuilder.Logging property.
Log Categories, log event IDs, log message templates, log exception parameters, filter functions, and custom logger providers are supported in Blazor WASM.</description>
      
    </item>
    
    <item>
      <title>logging</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/logging/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/logging/</guid>
      
      <description>Overview At default log levels, and with no additional providers:
Blazor Server logs to the server-side .NET console in Development environment at LogLevel.Information or higher. Blazor WASM logs to the client-side browser developer tools console at LogLevel.Information or higher. Notes &amp;amp; Documentation
Notes on Logging in .NET apply to these notes as well. Notes on Logging in ASP.NET Core apply to these notes as well. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/logging?view=aspnetcore-7.0 Logging in Components Injecting an ILogger&amp;lt;T&amp;gt; Pages/Counter1.</description>
      
    </item>
    
    <item>
      <title>signalr</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/signalr/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/signalr/</guid>
      
      <description>Overview </description>
      
    </item>
    
    <item>
      <title>static files</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/static-files/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/static-files/</guid>
      
      <description>Overview Serve static assets by calling UseStaticFiles in the request processing pipeline.
Static Files in Non-Development Environments Static assets are only enabled by default in the Development environment. In other environments, call UseStaticWebAssets on the WebApplicationBuilder:
Program.cs
if (builder.Environment.IsStaging()) { builder.WebHost.UseStaticWebAssets(); } File Mappings and Static File Options </description>
      
    </item>
    
    <item>
      <title>static files</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/static-files/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/static-files/</guid>
      
      <description>Overview For the Server app of a hosted Blazor WASM solution, configure static file middleware by calling UseStaticFiles in the request processing pipeline.
Static Web Asset Base Path By default, publishing a Blazor WASM app publishes the app&amp;rsquo;s static assets at the root path of the published output. This is configurable with &amp;lt;StaticWebAssetBasePath&amp;gt;:
project.csproj
&amp;lt;PropertyGroup&amp;gt; &amp;lt;StaticWebAssetBasePath&amp;gt;{PATH}&amp;lt;/StaticWebAssetBasePath&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Scenarios Client project of hosted Blazor WASM app &amp;lt;StaticWebAssetBasePath&amp;gt; not set Client app is published at /BlazorHostedSample/Server/bin/Release/{TFM}/publish/wwwroot/ &amp;lt;StaticWebAssetBasePath&amp;gt; set to app1 Client app is published at /BlazorHostedSample/Server/bin/Release/{TFM}/publish/wwwroot/app1/ Standalone Blazor WASM app &amp;lt;StaticWebAssetBasePath&amp;gt; not set App is published at /BlazorStandaloneSample/bin/Release/{TFM}/publish/wwwroot/ &amp;lt;StaticWebAssetBasePath&amp;gt; set to app1 App is published at /BlazorStandaloneSample/bin/Release/{TFM}/publish/wwwroot/app1/ </description>
      
    </item>
    
    <item>
      <title>blazor hosting models</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-hosting-models/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-hosting-models/</guid>
      
      <description>Overview Regardless of the hosting model chosen, the way Razor components are built is the same. The same Razor components can be used with any of the hosting models, unchanged.
Blazor Server Hosts Razor components on the server in an ASP.NET Core app.
UI updates are handled via a SignalR connection using WebSockets protocol The state on the server with each associated client is called a circuit Circuits can tolerate temporary network interruptions If the app is opened in multiple tabs, each tab is a separate circuit Circuits are terminated gracefully by closing a browser tab or navigating to an external URL Interrupted circuits are maintained for a configurable amount of time The runtime stays on the server: The runtime executes the C# code; sends UI requests from the browser to the server; applies UI updates to a rendered component that are sent back to the browser The client runs the Blazor script (blazor.</description>
      
    </item>
    
    <item>
      <title>configuration</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/configuration/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-wasm/configuration/</guid>
      
      <description>Overview Blazor WASM loads configuration from these files by default:
wwwroot/appsettings.json wwwroot/appsettings.{ENVIRONMENT}.json To read configuration files other than these, use an HttpClient.
Important Notes Configuration and settings files in Blazor WASM apps are visible to end users. Do not use these configuration providers in Blazor WASM: Azure Key Vault (the client secret cannot be secured client-side) Azure App (Blazor WASM apps don&amp;rsquo;t run on the server) Logging configuration, even if in one of these files, is not loaded by default.</description>
      
    </item>
    
    <item>
      <title>configuration</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/configuration/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/configuration/</guid>
      
      <description>Overview For Blazor Server, see the ASP.NET Core Configuration section. For Blazor WASM, see the Blazor WASM Configuration section </description>
      
    </item>
    
    <item>
      <title>depenency injection</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/depenency-injection/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/depenency-injection/</guid>
      
      <description>Default Services HttpClient (Scoped) IJSRuntime (Server=Scoped, WASM=Singleton) — an instance of a JavaScript runtime where JS calls are dispatched NavigationManager (Server=Scoped, WASM=Singleton) — helpers for working with URIs and navigation state Requesting Services in Components Inject services into components using @inject directive:
@page &amp;#34;/customer-list&amp;#34; @* Inject type into property *@ @inject IDataAccess DataRepository @if (customers != null) { &amp;lt;ul&amp;gt; @foreach (var customer in customers) { &amp;lt;li&amp;gt;@customer.FirstName @customer.LastName&amp;lt;/li&amp;gt; } &amp;lt;/ul&amp;gt; } @code { private IReadOnlyList&amp;lt;Customer&amp;gt;?</description>
      
    </item>
    
    <item>
      <title>routing and navigation</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/routing-and-navigation/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/blazor-server/routing-and-navigation/</guid>
      
      <description>ASP.NET Core Endpoint Routing Integration Blazor Server integrates with ASP.NET Core endpoint routing via MapBlazorHub:
app.UseRouting(); app.MapBlazorHub(); app.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); </description>
      
    </item>
    
    <item>
      <title>1 overview</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/1-overview/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/1-overview/</guid>
      
      <description>MVC and Razor Pages Razor Pages are built into ASP.NET Core MVC and use the same features for routing, model binding, filters, authorization, etc.
Comparison:
Technology Organization Routing Request Handling MVC Separate folders for Controllers, Models, Views, etc. Attribute-based routing Controller Actions Razor Pages A single folder (/Pages) Route based relative to location in folder Handlers In Visual Studio:
Project template Uses Missing Use for Web API MVC controllers /Views, /Pages — can be added Web APIs Web App Razor Pages /Views, /Pages — can be added Web apps Razor Pages The default approach for new web apps in Visual Studio.</description>
      
    </item>
    
    <item>
      <title>1 traditional web apps vs spas</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/1-traditional-web-apps-vs-spas/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/1-traditional-web-apps-vs-spas/</guid>
      
      <description>Documentation: https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/
Traditional Web Apps Perform most app logic on the server Choose when: Client-side requirements are simple (or even read-only) (search engines; blogs; CMS public-facing apps) App needs to function in browsers without JavaScript Single Page Applications Perform most UI logic in web browser and communicate with the web server via APIs Using CI/CD may be more difficult Choose when: App must expose a rich UI with many features SPAs load more quickly; user actions are more responsive SPAs support incremental updates, saving partially completed forms/docs; drag-and-drop; disconnected mode Team is familiar with JavaScript / TypeScript / Blazor WASM App must already expose an API for other clients Blazor (Blazor Server or Blazor WASM) Build rich UIs (like with SPA) but without significant JavaScript Choose when App must expose a rich UI with many features Team is more comfortable with .</description>
      
    </item>
    
    <item>
      <title>2 architectural principles</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/2-architectural-principles/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/2-architectural-principles/</guid>
      
      <description>Design Principles Principles | DevIQ
Separation of concerns Software should be separated based on the kind of work it performs.
The behavior responsible for choosing which items to format should be kept separate from the behavior responsible for formatting the items; these behaviors are only incidentally related to one another. Encapsulation Parts of an application should be encapsulated (insulated) from other parts.
App components and layers should be able to adjust their internal implementation without breaking their collaborators.</description>
      
    </item>
    
    <item>
      <title>2 working with dependencies</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/2-working-with-dependencies/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/2-working-with-dependencies/</guid>
      
      <description>When evaluating how your app works with its dependencies, remember::
The static cling code smell (Static Cling | DevIQ) When classes make calls to static methods or access static properties which have side effects or dependencies on infrastructure, static cling occurs.
Example: A method that calls a static method that writes to a database. The caller is now tightly coupled to the database because anything that breaks the database call will break that method.</description>
      
    </item>
    
    <item>
      <title>3 common web app architectures</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/3-common-web-app-architectures/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/3-common-web-app-architectures/</guid>
      
      <description>Monolithic application An entire application deployed as a single unit.
When it needs to scale horizontally, the entire app is duplicated. Generally a single project compiled to a single assembly deployed as a single unit. Organization of a Monolithic Application
Separation of concerns is achieved through folders.
&amp;ldquo;N-Layer&amp;rdquo; architecture apps Most common layers: User Interface (UI) Business Logic (BLL) Data Access (DAL) Users make requests through the UI, which interacts only with the BLL.</description>
      
    </item>
    
    <item>
      <title>3 structuring the app</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/3-structuring-the-app/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/3-structuring-the-app/</guid>
      
      <description>Monolithic web apps have a single entry point in the Web project.
Projects
ApplicationCore
a. Contains object model, interfaces
b. References as few dependencies as possible
c. Referenced by other projects in this solution Infrastructure
a. Contains implementation details (how persistence is performed; how notifications are sent)
b. Implements interfaces defined in ApplicationCore
c. References implementation-specific packages (like EF Core) but does not expose details of those implementations outside of the project UI</description>
      
    </item>
    
    <item>
      <title>4 common client side web technologies</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/4-common-client-side-web-technologies/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/4-common-client-side-web-technologies/</guid>
      
      <description>Complex web apps achieve separation of concerns by separating page content (HTML), layout and styling (CSS), and behavior (JavaScript).
HTML HTML elements represent formatted text, images, form inputs, and other structures.
CSS CSS controls the look and layout of HTML elements. CSS styles can be applied to:
CSS preprocessors CSS stylesheets do not support conditional logic, variables, or other programming language features.
CSS preprocessors (like Sass (Ruby-based) and LESS (JavaScript-based)) add this support.</description>
      
    </item>
    
    <item>
      <title>4 security</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/4-security/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/4-security/</guid>
      
      <description>Ensure SSL is used by the application: https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl
Identity ASP.NET Core Identity (built in) has support for local user accounts and external identity providers. (An external option is [Identity Server (github.com)(https://github.com/IdentityServer/IdentityServer4)])
ASP.NET Core Identity is included in projects if Individual Accounts is selected.
Configuring Identity In Program.cs var builder = WebApplication.CreateBuilder(args); // Add services to the container. var connectionString = builder.Configuration.GetConnectionString(&amp;#34;DefaultConnection&amp;#34;); builder.Services.AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt; options.UseSqlServer(connectionString)); builder.Services.AddDatabaseDeveloperPageExceptionFilter(); builder.Services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(options =&amp;gt; options.SignIn.RequireConfirmedAccount = true) .</description>
      
    </item>
    
    <item>
      <title>5 client communication</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/5-client-communication/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/5-client-communication/</guid>
      
      <description>ASP.NET Core apps, aside from serving pages and responding to requests via web APIs, can also communicate directly with connected clients. This is usally done via WebSockets. SignalR is a library that implements WebSockets and other transport technologies.
Use cases:
Live chat apps Monitoring apps job progress updates Notifications Interactive forms apps </description>
      
    </item>
    
    <item>
      <title>6 domain driven design</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/6-domain-driven-design/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/5-develop-asp-net-core-mvc-apps/6-domain-driven-design/</guid>
      
      <description>Domain-Driven Design is an agile approach to building software that emphasizes a focus on the business domain. The same terminology is used for the real-world concept being modeled, the software equivalent, and any structures to persist the concept (like database tables).
The domain model is made up of objects that interact with one another to represent the behavior of the system and includes:
Entities — represent objects with a thread of identity; usually stored in persistence with a key Aggregates — groups of objects that should be persisted as a unit Value objects — concepts that can be compared on the basis of the sum of their property values (like DateRange consisting of a start and end date) Domain events — things happenging within the system that are of interest to other parts of the system Use DDD for large applications with significant business complexity.</description>
      
    </item>
    
    <item>
      <title>6 working with data</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/6-working-with-data/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/6-working-with-data/</guid>
      
      <description>EF Core vs. Micro-ORM (Dapper) EF Core abstracts SQL from the developer, but also has more overhead due to translating LINQ expressions to SQL and change tracking on entities. Dapper is more lightweight and focuses on performance.
Comparison EF Core private readonly CatalogContext _context; public async Task&amp;lt;IEnumerable&amp;lt;CatalogType&amp;gt;&amp;gt; GetCatalogTypes() { return await _context.CatalogTypes.ToListAsync(); } Dapper private readonly SqlConnection _conn; public async Task&amp;lt;IEnumerable&amp;lt;CatalogType&amp;gt;&amp;gt; GetCatalogTypesWithDapper() { return await _conn.QueryAsync&amp;lt;CatalogType&amp;gt;(&amp;#34;SELECT * FROM CatalogType&amp;#34;); } SQL vs NoSQL Relational databases (like SQL) map objects to tables and rows.</description>
      
    </item>
    
    <item>
      <title>7 testing asp net core mvc apps</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/7-testing-asp-net-core-mvc-apps/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/7-testing-asp-net-core-mvc-apps/</guid>
      
      <description>Overview </description>
      
    </item>
    
    <item>
      <title>8 development process for azure</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/8-development-process-for-azure/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/8-development-process-for-azure/</guid>
      
      <description>Overview </description>
      
    </item>
    
    <item>
      <title>9 azure hosting recommendations</title>
      <link>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/9-azure-hosting-recommendations/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/reading/architecting-modern-web-apps/9-azure-hosting-recommendations/</guid>
      
      <description>Overview </description>
      
    </item>
    
    <item>
      <title>reliable web app pattern</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/reliable-web-app-pattern/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/reliable-web-app-pattern/</guid>
      
      <description>Overview A set of guidelines to help migrate a web app to the cloud.
https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/reliable-web-app/_net/pattern-overview</description>
      
    </item>
    
    <item>
      <title>application state</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/application-state/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/application-state/</guid>
      
      <description>Overview Application state for the current-running instance of the application can be saved and shared between Components.
Create some class to store state:
public class ApplicationState { // create a property/field for each piece of data to be stored public int NumberOfMessages { get; set; } = 0; } Add the instance to DI:
builder.Services.AddScoped&amp;lt;ApplicationState&amp;gt;(); Inject it and use it:
[Inject] public ApplicationState? ApplicationState { get; set; } int a = ApplicationState.</description>
      
    </item>
    
    <item>
      <title>classes and nesting</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/classes-and-nesting/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/classes-and-nesting/</guid>
      
      <description>Component Classes ComponentBase is the base class for Razor components. It implements IComponent.
Components are generated as C# partial classes. They can either be written as:
A single file with C# @code blocks, HTML markup, and Razor markup, like: Pages/Counter.razor
@page &amp;#34;/counter&amp;#34; &amp;lt;PageTitle&amp;gt;Counter&amp;lt;/PageTitle&amp;gt; &amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt; &amp;lt;p role=&amp;#34;status&amp;#34;&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt; &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; @onclick=&amp;#34;IncrementCount&amp;#34;&amp;gt;Click me&amp;lt;/button&amp;gt; @code { private int currentCount = 0; private void IncrementCount() { currentCount++; } } Or, HTML and Razor markup in a .</description>
      
    </item>
    
    <item>
      <title>data binding</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/data-binding/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/data-binding/</guid>
      
      <description>One-way Data Binding Data from the code-behind is bound in the UI in a one-way mode:
&amp;lt;h1 class=&amp;#34;page-title&amp;#34;&amp;gt; Details for @FirstName @LastName &amp;lt;/h1&amp;gt; @code { public string FirstName { get; set; } public string LastName { get; set; } } Or in a form control, such as an input:
&amp;lt;!-- changing the value of the input, changing the value in the UI will not change it in the Employee instance --&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form-control-plaintext&amp;#34;&amp;gt; @Employee.</description>
      
    </item>
    
    <item>
      <title>forms</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/forms/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/components/forms-and-input-components/forms/</guid>
      
      <description>Overview Blazor contains built-in Components for forms. Microsoft.AspNetCore.Components.Forms contains classes for managing forms and access to built-in Input* components. This namespace is included in _Imports.razor by default.
EditForm The Blazor version of HTML&amp;rsquo;s form.
ExampleModel.cs
public class ExampleModel { public string? Name { get; set; } } Pages/FormExample1.razor
@page &amp;#34;/form-example-1&amp;#34; @using Microsoft.Extensions.Logging @inject ILogger&amp;lt;FormExample1&amp;gt; Logger &amp;lt;!-- The Component is rendered here. OnSubmit is a callback and registers HandleSubmit as the handler: --&amp;gt; &amp;lt;EditForm Model=&amp;#34;@exampleModel&amp;#34; OnSubmit=&amp;#34;@HandleSubmit&amp;#34;&amp;gt; &amp;lt;!</description>
      
    </item>
    
    <item>
      <title>http status codes</title>
      <link>http://localhost:1313/wieserpedia/web-development/html/http-status-codes/</link>
      <pubDate>Tue, 28 Mar 2023 08:57:35 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/html/http-status-codes/</guid>
      
      <description>Informational (100-199)
Success (200-299)
Redirection (300-399)
Client Error (400-499)
Server Error (500-599)</description>
      
    </item>
    
    <item>
      <title>example</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/session-and-state/example/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/session-and-state/example/</guid>
      
      <description>A session and state implementation example.
Demonstration — Adding a Shopping Cart Create the shopping cart item model:
/Models/ShoppingCartItem.cs
public class ShoppingCartItem { public int ShoppingCartItemId { get; set; } public Pie Pie { get; set; } = default!; // the Pie added to the cart public int Amount { get; set; } // the cost of the Pie public string? ShoppingCartId { get; set; } // a GUID } Create a DbSet for the ShoppingCartItems:</description>
      
    </item>
    
    <item>
      <title>layout</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/layout/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/layout/</guid>
      
      <description>Overview The default layout file is Pages/Shared/_Layout.cshtml (Razor Pages) and Views/Shared/_Layout.cshtml (MVC).
Referencing a Layout Razor views have a Layout property that can be used by individual views to reference a layout it wants to use:
SomeView.cshtml
@{ // this could be a full path but ASP.NET Core MVC knows to check /Views/Shared for a .cshtml file: Layout = &amp;#34;_Layout&amp;#34;; } Alternatively, use a ViewStart file placed at /Views/_ViewStart.cshtml with this same code which will then be used automatically by every View.</description>
      
    </item>
    
    <item>
      <title>razor class libraries</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-class-libraries/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/common/razor-class-libraries/</guid>
      
      <description>Overview Razor Class Libraries can contain Razor views, pages, controllers, page models, Razor Components, View components, and data models along with their associated static files. They can be packaged and reused.
Creating Visual Studio project type = Razor Class Library dotnet new razorclasslib
ASP.NET Core templates assume RCL content is in Areas folder.
Precedence When a view, partial view, or Razor Page exists in both the web app and the RCL, the web app takes precedence over (overrides) the one in the RCL.</description>
      
    </item>
    
    <item>
      <title>dependency injection</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/dependency-injection/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/dependency-injection/</guid>
      
      <description>Dependency Injection into Controllers Code sample: View or download sample code (github.com)
MVC controllers request dependencies explicitly via constructors. Assuming an IDateTime service:
public class HomeController : Controller { private readonly IDateTime _dateTime; public HomeController(IDateTime dateTime) =&amp;gt; _dateTime = dateTime; // … } Dependency Injection into Actions Use the [FromServices] attribute:
public IActionResult About([FromServices] IDateTime dateTime) =&amp;gt; Content( $&amp;#34;Current server time: {dateTime.Now}&amp;#34;); Options Pattern to Access Settings Generally, do not inject IConfiguration into a controller.</description>
      
    </item>
    
    <item>
      <title>controllers</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/controllers/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/controllers/</guid>
      
      <description>Overview [Documentation] A controller defines a set of actions. An action is a method on a controller which handles requests. Requests are mapped to actions through routing.
A controller is responsible for initial processing of the request and instantiation of the model. Business logic should remain in the model.
The controller:
validates request data takes the result of the model&amp;rsquo;s processing (if any) returns either the appropriate proper view or the result of the API call.</description>
      
    </item>
    
    <item>
      <title>partial views</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/partial-views/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/partial-views/</guid>
      
      <description>Overview In Razor Pages, Partial Views work like they do in MVC.</description>
      
    </item>
    
    <item>
      <title>routing</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/routing/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/routing/</guid>
      
      <description>Overview MVC Controllers use Routing middleware to match a URL of an incoming request to and map them to actions.
Route templates are defined in Program.cs, describe how URL paths are matched to actions, and are used to generate URLs for links which are typically returned in responses.
To Use Controllers Call MapControllers to map attribute routed Controllers. Call MapControllerRoute or MapAreaControllerRoute to map both conventionally routed Controllers and attribute routed Controllers.</description>
      
    </item>
    
    <item>
      <title>templating</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/templating/</link>
      <pubDate>Mon, 20 Mar 2023 12:37:48 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/templating/</guid>
      
      <description>Templating Templating controls how a page is rendered. It uses variables, loops, conditions, and functions.
Params Use to access a variable:
&amp;lt;title&amp;gt;{{ .Params.title }}&amp;lt;/title&amp;gt; Site Use to access variables in config.toml:
&amp;lt;title&amp;gt;{{ .Site.title }}&amp;lt;/title&amp;gt; Conditions {{ if isset .Params &amp;#34;title&amp;#34; }} &amp;lt;title&amp;gt;{{ .Params.title }}&amp;lt;/title&amp;gt; {{ else }} &amp;lt;title&amp;gt;{{ .Site.title }}&amp;lt;/title&amp;gt; {{ end }} Variables Set variables with $:
{{ $favorite_food := &amp;#34;Gazelle&amp;#34; }} {{ $favorite_food }} Looping {{ $best_friends := slice &amp;#34;pumbaa&amp;#34; &amp;#34;timon&amp;#34; &amp;#34;nala&amp;#34; &amp;#34;rafiki&amp;#34; }} &amp;lt;ul&amp;gt; {{ range $best_friends }} &amp;lt;li&amp;gt;{{ .</description>
      
    </item>
    
    <item>
      <title>layouts, styles, partials</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/layouts-styles-partials/</link>
      <pubDate>Mon, 20 Mar 2023 12:37:30 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/layouts-styles-partials/</guid>
      
      <description>Layouts Content is purely the content of a page and expressed in Markdown.
Layouts are the &amp;ldquo;framing&amp;rdquo; of a page (header, footer, etc) and the formatting of the content.
Content pages use the single layout by default.
A content page named _index.html uses the list layout.
Hugo uses this lookup order to determine which layout to use. The last place it checks is /layouts/_default.
Baseof Create /layouts/_default/baseof.html:
&amp;lt;!doctypehtml&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;metacharset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;{{ .</description>
      
    </item>
    
    <item>
      <title>pagemodel</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/pagemodel/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/pagemodel/</guid>
      
      <description>PageModel Razor Pages use a C# class called PageModel to:
define data properties and associated operations for that model&amp;rsquo;s Razor page define page handlers (like OnGet) for requests sent to that page PageModel supports keeping all page-specifc logic and properties in their own namespace &amp;amp; directory.
A Page with a PageModel Pages/Index2.cshtml
@page @using RazorPagesIntro.Pages @model Index2Model &amp;lt;h2&amp;gt;Separate page model&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt; @Model.Message &amp;lt;/p&amp;gt; That page&amp;rsquo;s code-behind: Pages/Index2.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages; using Microsoft.</description>
      
    </item>
    
    <item>
      <title>partial views</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/partial-views/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/partial-views/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
Partial Views A partial view is a regular view that&amp;rsquo;s used as part of another view. Partial views exist both in MVC apps (Views/) and Razor Pages apps (Pages/). They can also be placed in /Views/Shared/. By convention, their filename starts with _.
Partial views depend on data passed to them from a calling (parent) view. They do not depend on code to execute to render content.</description>
      
    </item>
    
    <item>
      <title>passing data</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/passing-data/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/mvc/views/passing-data/</guid>
      
      <description>From Pluralsight/ASP.NET Core 6 Fundamentals
ViewModels ViewModels (strongly typed) If you specify a model type in the view, we call this a ViewModel. An instance of the ViewModel is passed to the view from the action.
ViewModels are either stored in Models/ or Viewmodels/.
Address.cs
namespace WebApplication1.ViewModels { public class Address { public string Name { get; set; } public string Street { get; set; } public string City { get; set; } public string State { get; set; } public string PostalCode { get; set; } } } Define a model with @model.</description>
      
    </item>
    
    <item>
      <title>razor tag helpers</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/razor-tag-helpers/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/razor-tag-helpers/</guid>
      
      <description>Overview Tag Helpers extend standard HTML elements. They provide extra server-side attributes for an HTML element.
Partial Tag Helper Asynchronously renders a partial view.
Note that the name attribute accepts the partial view&amp;rsquo;s name without its file extension:
&amp;lt;partial name=&amp;#34;_ValidationScriptsPartial&amp;#34; /&amp;gt; This is equivalent to Razor HTML Helper syntax:
@{await Html.RenderPartialAsync(&amp;#34;_ValidationScriptsPartial&amp;#34;);} Label Tag Helper Extends the HTML &amp;lt;label&amp;gt; element: The asp-for attribute accepts a PageModel property. The value of the PageModel&amp;rsquo;s Name property will be rendered as the content for the element.</description>
      
    </item>
    
    <item>
      <title>hosting</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/hosting/</link>
      <pubDate>Fri, 17 Mar 2023 13:34:53 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/hosting/</guid>
      
      <description>GitHub Create GitHub repo Push local repo to GitHub From GitHub repo &amp;gt; Settings &amp;gt; Pages &amp;gt; Build and deployment &amp;gt; Source = GitHub Actions Create .github/workflows/hugo.yaml file in local repo: Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: &amp;#34;pages&amp;#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.</description>
      
    </item>
    
    <item>
      <title>modules</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/modules/</link>
      <pubDate>Fri, 17 Mar 2023 13:31:33 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/modules/</guid>
      
      <description>Overview Modules can be a whole project or just one of the 7 component types (static, content, layouts, etc).
Hugo Modules are powered by Go Modules.
Hugo modules are managed with hugo mod command.</description>
      
    </item>
    
    <item>
      <title>configuring markup</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/configuring-markup/</link>
      <pubDate>Fri, 17 Mar 2023 13:21:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/configuring-markup/</guid>
      
      <description>Configuring Markup All markup related settings and their defaults:
[markup] defaultMarkdownHandler = &amp;#39;goldmark&amp;#39; [markup.asciidocExt] backend = &amp;#39;html5&amp;#39; extensions = [] failureLevel = &amp;#39;fatal&amp;#39; noHeaderOrFooter = true preserveTOC = false safeMode = &amp;#39;unsafe&amp;#39; sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true linkifyProtocol = &amp;#39;https&amp;#39; strikethrough = true table = true taskList = true typographer = true [markup.</description>
      
    </item>
    
    <item>
      <title>configuration</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/configuration/</link>
      <pubDate>Fri, 17 Mar 2023 13:20:55 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/configuration/</guid>
      
      <description>Configuration Default configuration file is hugo.toml, hugo.yaml, or hugo.json in root of site.
hugo --config filename.toml, … # generate a new config file(s) Configuration Directories The configDir (ie: config/) can be used to store settings. Each file represents a configuration root object, so params.toml would contain:
[Params] foo = &amp;#39;bar&amp;#39; Example structure:
├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.</description>
      
    </item>
    
    <item>
      <title>directory structure</title>
      <link>http://localhost:1313/wieserpedia/web-development/hugo/directory-structure/</link>
      <pubDate>Fri, 17 Mar 2023 13:20:38 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/hugo/directory-structure/</guid>
      
      <description>Directory Structure Scaffolds a project directory structure and takes a single directory and uses it as the input to create a website.
hugo new site creates:
example/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── config.toml archetypes hugo creates new content files with date, title, and draft = true frontmatter.
assets All the files which need to be processed by Hugo Pipes.</description>
      
    </item>
    
    <item>
      <title>prefer composition over inheritance</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/principles/prefer-composition-over-inheritance/</link>
      <pubDate>Thu, 16 Mar 2023 17:38:39 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/principles/prefer-composition-over-inheritance/</guid>
      
      <description>Prefer Composition over Inheritance Inheritance is the specialization of a general concept Creates Is-A relationships. The derived class is tightly coupled to the base class. There is no additional performance cost of invoking the base class members. The Liskov Substitution Principle states that &amp;ldquo;objects of a base class shall be replaceable with objects of its derived classes without breaking the application.&amp;rdquo; public class House { public string Color { get; set; } public string GetAddress() =&amp;gt; &amp;#34;Address&amp;#34;; } public class GlassHouse : House { public string WarningSign() =&amp;gt; &amp;#34;No rocks please!</description>
      
    </item>
    
    <item>
      <title>interfaces</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/concepts/interfaces/</link>
      <pubDate>Thu, 16 Mar 2023 17:35:39 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/concepts/interfaces/</guid>
      
      <description>Interfaces are a description of the services that a class provides. They define what is available, not how it is available.</description>
      
    </item>
    
    <item>
      <title>docker compose</title>
      <link>http://localhost:1313/wieserpedia/docker/docker-compose/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/docker/docker-compose/</guid>
      
      <description>Overview Docker Compose helps to define and share multi-container apps. It defines an application stack in a single file.
Docker Compose automatically creates a network for an application stack.
Example This docker run command&amp;hellip;
docker run -dp 3000:3000 \ -w /app -v &amp;#34;$(pwd):/app&amp;#34; \ --network todo-app \ -e MYSQL_HOST=mysql \ -e MYSQL_USER=root \ -e MYSQL_PASSWORD=secret \ -e MYSQL_DB=todos \ node:18-alpine \ sh -c &amp;#34;yarn install &amp;amp;&amp;amp; yarn run dev&amp;#34; &amp;hellip;and this one&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>msbuild</title>
      <link>http://localhost:1313/wieserpedia/tools/visual-studio/msbuild/</link>
      <pubDate>Tue, 14 Mar 2023 21:16:15 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/visual-studio/msbuild/</guid>
      
      <description>MSBuild Runs build processes to build apps. Used by Visual Studio to build. Used by dotnet build to build. Project (.proj) Files XML-based Properties Key-value pairs used to configure builds.
Always inside a &amp;lt;PropertyGroup&amp;gt; tag:
&amp;lt;PropertyGroup&amp;gt; &amp;lt;BuildDir&amp;gt;Build&amp;lt;/BuildDir&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Conditionals &amp;lt;SomeProperty Condition=&amp;#34;condition&amp;#34;&amp;gt;DefaultValue&amp;lt;/SomeProperty&amp;gt; Items Inputs into the build system; usually files.
Grouped into item types based on user-defined item names. Item types are used in tasks which use the individual items to perform the steps of the build process.</description>
      
    </item>
    
    <item>
      <title>containerization</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/containerization/</link>
      <pubDate>Fri, 10 Mar 2023 13:32:54 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/containerization/</guid>
      
      <description>Configure Container Image Most configuration is handled through MSBuild properties. Exception: RUN commands require a Dockerfile.
ContainerBaseImage The image used as the basis for the image being created.
&amp;lt;PropertyGroup&amp;gt; &amp;lt;ContainerBaseImage&amp;gt;mcr.microsoft.com/_net/runtime:6.0&amp;lt;/ContainerBaseImage&amp;gt; &amp;lt;/PropertyGroup&amp;gt; Defaults:
If project is self-contained, the mcr.microsoft.com/_net/runtime-deps image is used. If project is an ASP.NET Core project, the mcr.microsoft.com/_net/aspnet image is used. Otherwise the mcr.microsoft.com/_net/runtime image is used. ContainerRuntimeIdentifier The OS and architecture used by the container of the ContainerBaseImage supports more than one platform.</description>
      
    </item>
    
    <item>
      <title>fluent interface</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/fluent-interface/</link>
      <pubDate>Wed, 08 Mar 2023 13:29:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/fluent-interface/</guid>
      
      <description>// Defines the data context class Context { public string FirstName { get; set; } public string LastName { get; set; } public string Sex { get; set; } public string Address { get; set; } } class Customer { private Context _context = new Context(); // Initializes the context // set the value for properties public Customer FirstName(string firstName) { _context.FirstName = firstName; return this; } public Customer LastName(string lastName) { _context.</description>
      
    </item>
    
    <item>
      <title>visitor</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/visitor/</link>
      <pubDate>Sun, 05 Mar 2023 15:55:35 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/visitor/</guid>
      
      <description>Visitor Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: The body of the foreach loop</description>
      
    </item>
    
    <item>
      <title>strategy</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/strategy/</link>
      <pubDate>Sun, 05 Mar 2023 15:55:22 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/strategy/</guid>
      
      <description>Strategy Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>observer</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/observer/</link>
      <pubDate>Sun, 05 Mar 2023 15:55:10 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/observer/</guid>
      
      <description>Observer Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: INotifyPropertyChanged</description>
      
    </item>
    
    <item>
      <title>mediator</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/mediator/</link>
      <pubDate>Sun, 05 Mar 2023 15:55:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/mediator/</guid>
      
      <description>Mediator Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>command</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/command/</link>
      <pubDate>Sun, 05 Mar 2023 15:53:50 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/command/</guid>
      
      <description>Command Type: Behavioral
Purpose: Turns a request into a stand-alone object that contains all information about the request.
Use to:
Enable passing requests as method arguments Delay or queue a request&amp;rsquo;s execution Implement reversible operations Principles: Single Responsibility Principle; Open/Closed Principle
Complexity:
Popularity:
In .NET: EventArgs
Implementing Declare the command interface with a single execution method.
public interface ICommand { void Execute(); } Extract requests into concrete command classes that implement this interface.</description>
      
    </item>
    
    <item>
      <title>template method</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/template-method/</link>
      <pubDate>Sun, 05 Mar 2023 15:53:38 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/template-method/</guid>
      
      <description>Template Method Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: IComparable</description>
      
    </item>
    
    <item>
      <title>state</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/state/</link>
      <pubDate>Sun, 05 Mar 2023 15:53:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/state/</guid>
      
      <description>State Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>momento</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/momento/</link>
      <pubDate>Sun, 05 Mar 2023 15:53:23 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/momento/</guid>
      
      <description>Memento Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>iterator</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/iterator/</link>
      <pubDate>Sun, 05 Mar 2023 15:53:16 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/iterator/</guid>
      
      <description>Iterator Type: Behavioral
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: IEnumerable&amp;lt;T&amp;gt;, IEnumerator&amp;lt;T&amp;gt;</description>
      
    </item>
    
    <item>
      <title>chain of responsibility</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/chain-of-responsibility/</link>
      <pubDate>Sun, 05 Mar 2023 15:52:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/behavioral/chain-of-responsibility/</guid>
      
      <description>Chain of Responsibility Type: Behavioral Purpose:
Use to:
Principles:
Complexity:
Popularity: In .NET: ASP.NET Core middleware</description>
      
    </item>
    
    <item>
      <title>proxy</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/proxy/</link>
      <pubDate>Sun, 05 Mar 2023 15:52:33 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/proxy/</guid>
      
      <description>Proxy Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>flyweight</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/flyweight/</link>
      <pubDate>Sun, 05 Mar 2023 15:52:25 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/flyweight/</guid>
      
      <description>Flyweight Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: String interning</description>
      
    </item>
    
    <item>
      <title>facade</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/facade/</link>
      <pubDate>Sun, 05 Mar 2023 15:52:14 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/facade/</guid>
      
      <description>Façade Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: System.Net (OS, CWD, CPU all in one interface)</description>
      
    </item>
    
    <item>
      <title>decorator</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/decorator/</link>
      <pubDate>Sun, 05 Mar 2023 15:52:05 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/decorator/</guid>
      
      <description>Decorator Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: IOStream, MemoryStream, FileStream</description>
      
    </item>
    
    <item>
      <title>composite</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/composite/</link>
      <pubDate>Sun, 05 Mar 2023 15:51:56 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/composite/</guid>
      
      <description>Composite Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:
In .NET: MVC Views hierarchies</description>
      
    </item>
    
    <item>
      <title>bridge</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/bridge/</link>
      <pubDate>Sun, 05 Mar 2023 15:51:44 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/bridge/</guid>
      
      <description>Bridge Type: Structural
Purpose:
Use to:
Principles:
Complexity:
Popularity:</description>
      
    </item>
    
    <item>
      <title>adapter</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/adapter/</link>
      <pubDate>Sun, 05 Mar 2023 15:51:03 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/structural/adapter/</guid>
      
      <description>Adapter Type: Structural
Purpose: Enables objects with incompatible interfaces to collaborate.
Use to:
Enable use of an existing class whose interface is not compatible with your code. Reuse several existing subclasses that lack some common functionality that cannot be added to the superclass.
Principles: Single Responsibility Principle; Open/Closed Principle
Complexity: 1/3
Popularity: 3/3 Overview Object Adapter The Client is a class that contains the existing business logic of the program.</description>
      
    </item>
    
    <item>
      <title>singleton</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/singleton/</link>
      <pubDate>Sun, 05 Mar 2023 15:30:17 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/singleton/</guid>
      
      <description>Singleton Type: Creational
Purpose: Ensure that a class has only one instance while providing a global access point to this instance.
Use to:
Solve for needing a single instance of a class available to all clients (like a database instance). Provide strict control over global variables.
Principles: Violates Single Responsibility Principle
Complexity: 1/3
Popularity: 2/3 This pattern is not natively thread-safe.
Overview The Singleton class declares the static method getInstance that returns the same instance of its own class.</description>
      
    </item>
    
    <item>
      <title>prototype</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/prototype/</link>
      <pubDate>Sun, 05 Mar 2023 15:08:44 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/prototype/</guid>
      
      <description>Prototype Type: Creational
Purpose: Copy (clone) existing objects without making your code dependent on their classes.
Use to:
Prevent a dependency on the concrete classes of objects needing cloned. Reduce the number of subclasses that only differ in the way they initialize their respective objects.
Principles:
Complexity: 1/3
Popularity: 2/3
In .NET: System.Net.Http.Headers Overview Basic Implementation The Prototype interface declares the cloning methods. In most cases, it’s a single clone method.</description>
      
    </item>
    
    <item>
      <title>builder</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/builder/</link>
      <pubDate>Sun, 05 Mar 2023 09:51:45 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/builder/</guid>
      
      <description>Builder Type: Creational
Purpose: Produce different types and representations of an object using the same construction code.
Use to:
Create different representations of some product Create composite trees or other complex objects
Principles: Single Responsibility Principle
Complexity: 2/3
Popularity: 3/3
In .NET: StringBuilder, ApplicationBuilder, EF CoreModelBuilder Overview The Builder interface declares product construction steps that are common to all types of builders. Concrete Builders provide different implementations of the construction steps.</description>
      
    </item>
    
    <item>
      <title>factory method</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/factory-method/</link>
      <pubDate>Sat, 04 Mar 2023 20:28:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/factory-method/</guid>
      
      <description>Factory Method Type: Creational
Purpose: Provides an interface for creating objects in a superclass but allows subclasses to alter the type of the objects created.
Use when:
You don&amp;rsquo;t know ahead of time the exact types and dependencies of the objects your code will work with. You want to provide users of your code with a way to extend its internal components.
Principles: Single Responsibility Principle; Open/Closed Principle
Complexity: 1/3</description>
      
    </item>
    
    <item>
      <title>abstract factory</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/abstract-factory/</link>
      <pubDate>Sat, 04 Mar 2023 18:52:25 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/creational/abstract-factory/</guid>
      
      <description>Abstract Factory Type: Creational
Purpose: Produce families of related objects without specifying their concrete classes.
Use when: You have a class with a set of factory methods that blur its primary responsibility.
Principles: Single Responsibility Principle; Open/Closed Principle
Complexity: 2/3
Popularity: 3/3
In .NET: IHttpClientFactory
Overview Abstract Products declare interfaces for a set of distinct but related products which make up a product family. Concrete Products are various implementations of abstract products, grouped by variants.</description>
      
    </item>
    
    <item>
      <title>rate limiting</title>
      <link>http://localhost:1313/wieserpedia/_net/web/rate-limiting/</link>
      <pubDate>Fri, 03 Mar 2023 09:35:03 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/rate-limiting/</guid>
      
      <description>Overview Availability: .NET 7
Rate limiting is built into .NET 7.
Built-in Rate Limiting Algorithms Namespace System.Threading.RateLimiting Abstract type RateLimiter
Use:
RateLimiter limiter = new ConcurrencyLimiter( new ConcurrencyLimiterOptions( permitLimit: 2, queueProcessingOrder: QueueProcessingOrder.OldestFirst, queueLimit: 2 )); Concurrency limit Define a maximum number of concurrent requests that can access a resource.
Token bucket limit A bucket is filled with tokens. Each request permanently consumes a token. At interval, more tokens are added to the bucket.</description>
      
    </item>
    
    <item>
      <title>communitytoolkit.diagnostics</title>
      <link>http://localhost:1313/wieserpedia/_net/toolkits/communitytoolkit.diagnostics/</link>
      <pubDate>Tue, 28 Feb 2023 15:58:54 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/toolkits/communitytoolkit.diagnostics/</guid>
      
      <description>Overview APIs to validate parameters and throw exceptions in faulting code paths.
dotnet add package CommunityToolkit.Diagnostics using CommunityToolkit.Diagnostics; Guard Helper methods that verify conditions when code is running and throw exceptions in one line.
Contains methods for comparisons, strings, collections, and tasks.
Engineering Note 2023-03-02: Guard.IsNullOrEmpty is not considered a null check by the C# analyzer and so even types with this guard will still report as maybe-null.
Without Guard public static void SampleMethod(int[] array, int index, Span&amp;lt;int&amp;gt; span, string text) { if (array is null) throw new ArgumentNullException(nameof(array), &amp;#34;The array must not be null&amp;#34;); if (array.</description>
      
    </item>
    
    <item>
      <title>hateoas</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/hateoas/</link>
      <pubDate>Wed, 22 Feb 2023 12:03:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/hateoas/</guid>
      
      <description>HATEOAS Hypermedia As The Engine Of Application State Contrast this with interface description languages where clients are given descriptions on how to consume a web service. Example A GET request results in information and 3 methods being presented in the response:
GET /accounts/12345
Response
{ accountId=12345, balance=100.00, links: deposit=../deposit withdraw=../withdraw transfer= ../transfer } Some time later, client calls /accounts again. This time, the account is overdrawn so a different set of methods are presented:</description>
      
    </item>
    
    <item>
      <title>wadl</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/protocols/wadl/</link>
      <pubDate>Wed, 22 Feb 2023 12:01:39 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/protocols/wadl/</guid>
      
      <description>Web Application Description Language (WADL) XML-based interface description language The REST equivalent of SOAP&amp;rsquo;s WSDL. Not a W3C standard. Elements Param — describes inputs Method — describes request and response of resource Request — describes input; types are required; HTTP headers are required Response — describes output, error information </description>
      
    </item>
    
    <item>
      <title>service oriented architecture</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/methodologies/service-oriented-architecture/</link>
      <pubDate>Wed, 22 Feb 2023 11:30:23 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/methodologies/service-oriented-architecture/</guid>
      
      <description>Service-Oriented Architecture (SOA) An architectural style with a focus on discrete services vs. a monolithic design.
Service — a function made available over a network to consumers.
Represents a repeatable business activity with a specific outcome. Self-contained Black box to consumers Composable Service Mesh — a conjunction of services that provide functionality akin to an application.
Services must be stateless — they must return the requested value or an exception.</description>
      
    </item>
    
    <item>
      <title>rational unified process</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/methodologies/rational-unified-process/</link>
      <pubDate>Wed, 22 Feb 2023 11:13:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/methodologies/rational-unified-process/</guid>
      
      <description>Rational Unified Process Created by Rational Software, which was later acquired by IBM (2013). An adaptable process framework. An implementation of unified process. RUP Building Blocks Roles (who) — a set of related skills, competencies and responsibilities. Work products (what) — something resulting from a Task. Task (how) — a unit of work assigned to a role that provides a meaningful result. 6 Engineering Disciplines Business modeling Requirements Analysis &amp;amp; Design Implementation Testing Deployment 6 Best Practices Develop iteratively Manage requirements Use components (RUP supports OOP) Model visually (prefer XML) Verify quality Control changes (continuous integration) Tools IBM Rational Method Composer—use to author, configure, view and publish processes Eclipse Process Framework (open source) </description>
      
    </item>
    
    <item>
      <title>delegates</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/concepts/delegates/</link>
      <pubDate>Wed, 22 Feb 2023 11:10:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/concepts/delegates/</guid>
      
      <description>Delegates A type-safe function pointer. A reference to a method. Delegate objects are passed to code that can then call the referenced method. Used to implement callbacks and event listeners. They create the ability to notify several methods that an event has occurred. Can also be used to call multiple methods at once (that match their signature). </description>
      
    </item>
    
    <item>
      <title>parallel invoke</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/parallel-invoke/</link>
      <pubDate>Fri, 17 Feb 2023 09:58:06 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/parallel-invoke/</guid>
      
      <description>Overview Use Parallel.Invoke to execute operations in parallel on a data source. The runtime handles scheduling and scales automatically to the number of cores on the host. Warning: None of the operations must modify the data source (risk of race condition).
string words[] = // some array of words here Parallel.Invoke(() =&amp;gt; { GetLongestWord(words); }, () =&amp;gt; { GetMostCommonWords(words); }, { GetCountForWord(words, &amp;#34;booger&amp;#34;); }, … ); // close Parallel.Invoke </description>
      
    </item>
    
    <item>
      <title>with delegates</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/asynchronous-programming-model/with-delegates/</link>
      <pubDate>Fri, 17 Feb 2023 08:54:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/asynchronous-programming-model/with-delegates/</guid>
      
      <description>Overview Delegates enable calling any synchronous method in an asynchronous manner.
How it Works The CLR automatically defines BeginInvoke and EndInvoke methods for a delegate with the appropriate signature. This can then be used like the APM model.
BeginInvoke Has same parameters as method to be executed asynchronously, plus: an AsyncCallback delegate that references the method to be called when the async call completes a user-defined object that passes information into the callback method Returns an IAsyncResult EndInvoke If called before async call is complete, blocks calling thread until it is.</description>
      
    </item>
    
    <item>
      <title>cancelling parallel loops</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/cancelling-parallel-loops/</link>
      <pubDate>Thu, 16 Feb 2023 15:23:54 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/cancelling-parallel-loops/</guid>
      
      <description>Overview Cancellation is achieved by:
Supplying a CancellationToken to the Parallel.For or Parallel.ForEach method&amp;rsquo;s ParallelOptions parameter Enclosing the parallel call in a try-catch block Example
int[] nums = Enumerable.Range(0, 1_000_000).ToArray(); using CancellationTokenSource cts = new(); ParallelOptions po = new(); po.CancellationToken = cts.Token; try { Parallel.ForEach(nums, po, (num) =&amp;gt; { double d = Math.Sqrt(num); Console.WriteLine($&amp;#34;{d} on {Thread.CurrentThread.ManagedThreadId}&amp;#34;); }); } catch { … } </description>
      
    </item>
    
    <item>
      <title>thread local and partition local variables</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/thread-local-and-partition-local-variables/</link>
      <pubDate>Thu, 16 Feb 2023 15:07:11 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/thread-local-and-partition-local-variables/</guid>
      
      <description>Thread-Local Variables Stores and retrieves state in each separate task that is created by a Parallel.For loop. Instead of writing to a shared resource on each iteration, you compute and store the value until all iterations for the task are complete.
Parallel.For w/Thread-Local Variables Example
int[] nums = Enumerable.Range(0, 1_000_000).ToArray(); long total = 0; Parallel.For&amp;lt;long&amp;gt;( // By default, the type parameter would be int, so this makes it `long` 0, // Starting element index nums.</description>
      
    </item>
    
    <item>
      <title>asynchronous vs parallel vs concurrent</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/programming-models/asynchronous-vs-parallel-vs-concurrent/</link>
      <pubDate>Thu, 16 Feb 2023 14:38:58 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/programming-models/asynchronous-vs-parallel-vs-concurrent/</guid>
      
      <description>Overview Asynchronous — executing a task one one thread while awaiting completion of another task currently being executed on another thread. Concurrency — executing the same task on two threads. Non-deterministic (the order in which different pieces of the task are complete is not known). Parallel — executing the same task on two threads. Deterministic (the order in which different pieces of the task are complete is known). </description>
      
    </item>
    
    <item>
      <title>app startup</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/app-startup/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/app-startup/</guid>
      
      <description>Overview [Documentation] This template supports Razor Pages, MVC controllers with views, Web API controllers, and Minimal APIs app models.
Configures required services ILogger&amp;lt;T&amp;gt; is provided by the ASP.NET framework Creates the request handling pipeline via middleware Program.cs
var builder = WebApplication.CreateBuilder(args); // Configures Kestrel // Add services to the container. builder.Services.AddRazorPages(); // For a Razor Pages client-side Web UI builder.Services.AddControllersWithViews(); // For an MVC client-side Web UI var app = builder.</description>
      
    </item>
    
    <item>
      <title>yaml</title>
      <link>http://localhost:1313/wieserpedia/web-development/yaml/yaml/</link>
      <pubDate>Sun, 15 Jan 2023 19:56:46 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/yaml/yaml/</guid>
      
      <description>YAML key: value # A key-value pair complexMap: # A map that contains a kvp and another map key: value key2: # A key that references another map subKey: value items: # A list - item 1 - item 2 itemsMap: # A list of maps - map1: value map1Prop: value - map2: value map2Prop: value </description>
      
    </item>
    
    <item>
      <title>app service</title>
      <link>http://localhost:1313/wieserpedia/azure/app-service/</link>
      <pubDate>Fri, 13 Jan 2023 20:57:52 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/azure/app-service/</guid>
      
      <description>Overview An HTTP-based services for hosting web apps, REST APIs, and mobile back-ends.
Features:
Automatic scaling (horizontally and vertically) CI/CD (Azure DevOps, GitHub, Bitbucket, FTP, local Git repo) App Service Plans A set of compute resources for a web app to run.
One or more apps can be configured on an app service plan Azure Functions can also run in an app service plan Deployments Deploy to Azure App Service:</description>
      
    </item>
    
    <item>
      <title>environments</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/environments/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/environments/</guid>
      
      <description>Overview [Documentation] ASP.NET reads the following environment variables to determine the environment:
DOTNET_ENVIRONMENT ASPNETCORE_ENVIRONMENT For WebApplicationBuilder (the default), DOTNET_ENVIRONMENT has precedence.
For WebHost (ConfigureWebHostDefaults, CreateDefaultBuilder), ASPNETCORE_ENVIRONMENT has precedence.
IHostEnvironment.EnvironmentName The launchSettings.json file sets ASPNETCORE_ENVIRONMENT to Development on the local machine. Set to Production if ASPNETCORE_ENVIRONMENT and DOTNET_ENVIRONMENT have not been set. Setting Environment From Command Line dotnet run --environment Production
Development Environment launchSettings.json The environment for local machine development can be set in Properties/launchSettings.</description>
      
    </item>
    
    <item>
      <title>error handling</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/error-handling/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/error-handling/</guid>
      
      <description>Overview [Documentation] ASP.NET Core has built-in error handling features: A developer exception page; custom error pages; static status code pages; startup exception handling.
Developer exception page Displays detailed information about unhandled request exceptions. Requires development environment and app built with WebApplication.CreateBuilder (not WebHost.CreateDefaultBuilder).
Note: The developer exception page is not guaranteed to provide any information; use logging. Custom exception handler page (for Production environment) Use UseExceptionHandler middleware.
Catches and logs unhandled exceptions; re-executes request using the original HTTP method in an alternate pipeline with path indicated.</description>
      
    </item>
    
    <item>
      <title>making http requests</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/making-http-requests/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/making-http-requests/</guid>
      
      <description>Overview [Documentation] See Problems with HttpClient
Via IHttpClientFactory Register IHttpClientFactory in the DI container:
var builder = WebApplication.CreateBuilder(args); builder.Services.AddHttpClient(); Inject an IHttpClientFactory:
public class BasicModel : PageModel { private readonly IHttpClientFactory _httpClientFactory; public BasicModel(IHttpClientFactory httpClientFactory) =&amp;gt; _httpClientFactory = httpClientFactory; public IEnumerable&amp;lt;GitHubBranch&amp;gt;? GitHubBranches { get; set; } public async Task OnGet() { var httpRequestMessage = new HttpRequestMessage( HttpMethod.Get, &amp;#34;https://api.github.com/repos/_net/AspNetCore.Docs/branches&amp;#34;) { Headers = { { HeaderNames.Accept, &amp;#34;application/vnd.github.v3+json&amp;#34; }, { HeaderNames.UserAgent, &amp;#34;HttpRequestsSample&amp;#34; } } }; var httpClient = _httpClientFactory.</description>
      
    </item>
    
    <item>
      <title>static files</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/static-files/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/static-files/</guid>
      
      <description>Overview [Documentation] Static files are stored in the web root directory CONTENT_ROOT/wwwroot. Change with UseWebRoot. Serve with UseStaticFiles.
Serve Static Files in the Web Root Static files are accessible via a path relative to the web root. If you create wwwroot/images/ and add SomeImage.jpg,
access via URL at https://hostname/images/SomeImage.jpg and via markup: &amp;lt;img src=&amp;quot;~/images/MyImage.jpg&amp;quot; class=&amp;quot;img&amp;quot; alt=&amp;quot;My image&amp;quot; /&amp;gt; Serve Static Files Outside of the Web Root Use UseStaticFiles and pass StaticFileOptions:</description>
      
    </item>
    
    <item>
      <title>hosts</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/hosts/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/hosts/</guid>
      
      <description>Generic Host [Documentation] The host encapsulates DI, logging, configuration, and IHostedService implementations.
ASP.NET Core creates a WebApplicationBuilder and a WebApplication (a form of the Generic Host) which eliminates the need for a Startup class.
See also: Generic Host
Create a Host with an IHostedService Implementation CreateDefaultBuilder await Host.CreateDefaultBuilder(args) .ConfigureServices(services =&amp;gt; { services.AddHostedService&amp;lt;SampleHostedService&amp;gt;(); }) .Build() .RunAsync(); CreateDefaultBuilder:
Sets content root to GetCurrentDirectory Loads host configuration from env vars (prefixed with DOTNET_) then command line args Loads app configuration (appsettings.</description>
      
    </item>
    
    <item>
      <title>httpcontext</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/httpcontext/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/httpcontext/</guid>
      
      <description>Overview [Documentation] HttpContext encapsulates all information about an HTTP request and response.
Initialized when HTTP request is received Accessible by middleware and app frameworks HttpContext is not thread safe.
HttpRequest Accessed via HttpContext.Request.
Initialized when HTTP request is received Mutable Common members:
Path, Method, Headers RouteValues — a collection of route values; set when request is matched to a route Query — a collection of query values parsed from QueryString ReadFormAsync() — reads request body as a form and returns a form values collection See also: Prefer ReadFormAsync over Request.</description>
      
    </item>
    
    <item>
      <title>list of built in middleware</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/middleware/list-of-built-in-middleware/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/middleware/list-of-built-in-middleware/</guid>
      
      <description>Overview Middleware Description Order Authentication Provides authentication support. Before HttpContext.User is needed. Terminal for OAuth callbacks. Authorization Provides authorization support. Immediately after the Authentication Middleware. Cookie Policy Tracks consent from users for storing personal information and enforces minimum standards for cookie fields, such as secure and SameSite. Before middleware that issues cookies. Examples: Authentication, Session, MVC (TempData). CORS Configures Cross-Origin Resource Sharing. Before components that use CORS. UseCors currently must go before UseResponseCaching due to this bug.</description>
      
    </item>
    
    <item>
      <title>services and dependency injection</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/services-and-dependency-injection/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/services-and-dependency-injection/</guid>
      
      <description>Dependency Injection [Documentation] See notes on Dependency Injection in .NET.
Makes configured services available throughout an app. ASP.NET Core templates automatically register over 250 services including:
IApplicationBuilderFactory IServiceProvider as a built-in service container ILogger&amp;lt;T&amp;gt; (so a logger services does not need to be registered separately) ILoggerFactory IHostApplicationLifetime IHostLifetime IHostEnvironment or IWebHostEnvironment IServer IOptions&amp;lt;T&amp;gt; DiagnosticSource DiagnosticListener Services are added to the DI container with WebApplicationBuilder.Services in Program.cs. When WebApplicationBuilder is instantiated, many framework-provided services are added.</description>
      
    </item>
    
    <item>
      <title>web servers</title>
      <link>http://localhost:1313/wieserpedia/asp.net/fundamentals/web-servers/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/fundamentals/web-servers/</guid>
      
      <description>Overview ASP.NET on Windows ships with:
Kestrel IIS HTTP Server (an in-process server for IIS) HTTP.sys On IIS/Express:
IIS HTTP Server—runs in same process as IIS worker process Kestrel—runs in separate process as IIS worker process Documentation: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-7.0&amp;amp;tabs=windows
Kestrel vs HTTP.sys Server Performance Cross-platform Port and TLS configuration Alternate transports Port Sharing Authentication Fast proxying Direct file transmission Response caching Kestrel Better Yes Yes Yes No user-mode No No No HTTP.</description>
      
    </item>
    
    <item>
      <title>scaffolding</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/scaffolding/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/razor-pages/scaffolding/</guid>
      
      <description>Overview A model can be scaffolded so that the scaffolding tool creates the CRUD operations for that model:
Under Pages/ add a folder for the model being scaffolded Right-click that folder &amp;gt; Add &amp;gt; New scaffolded item &amp;gt; Razor Pages using Entity Framework (CRUD) &amp;gt; Select a Model class &amp;gt; select + button in Data context class In lab-tutorial-razor-pages, this creates /Pages/Movies/Create.cshtml, /Delete.cshtml, /Details.cshtml, and /Edit.cshtml</description>
      
    </item>
    
    <item>
      <title>controls</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/controls/</link>
      <pubDate>Thu, 05 Jan 2023 19:25:29 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/controls/</guid>
      
      <description>Overview Control — a UI element that displays content or enables interaction.
Alphabetical Index of Controls
3 Steps to Using Controls Add a control to the UI Set properties on the control Add code to the control&amp;rsquo;s event handlers Add a Control Use Blend for Visual Studio or Visual Studio XAML Designer or add the control via code.
Note: controls added via code are not visible in XAML Designer. Set the Control&amp;rsquo;s Name and Properties Set the control&amp;rsquo;s x:Name attribute:</description>
      
    </item>
    
    <item>
      <title>z depth and shadow</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/z-depth-and-shadow/</link>
      <pubDate>Thu, 05 Jan 2023 19:14:16 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/z-depth-and-shadow/</guid>
      
      <description>Overview Z-depth is the distance between two surfaces on the z-axis. It illustrates how close an object is to the viewer.
Shadows also express depth and visual hierarchy.
Shadow APIs ThemeShadow Can be applied to any XAML element. Applies shadows to elements based on a z-depth value. Built in to common controls at 32px depth. ThemeShadow in Popups To apply to an element in a Popup, apply a ThemeShadow to the element&amp;rsquo;s Shadow property then elevate the element from others behind it by using the Z component of the Translation property:</description>
      
    </item>
    
    <item>
      <title>transforms</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/transforms/</link>
      <pubDate>Thu, 05 Jan 2023 19:10:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/transforms/</guid>
      
      <description>Overview Transforms define how to map points from one coordinate space to another.
Four types of transforms:
TranslateTransform — move an element in x-y space by setting X and Y values. ScaleTransform — grow/shrink an element based on a center point by setting values for CenterX, CenterY, ScaleX, and ScaleY. RotateTransform — rotate an element in x-y space by setting Angle, CenterX, and CenterY. SkewTransform — skew or shear in x-y space by setting AngleX, AngleY, CenterX, and CenterY.</description>
      
    </item>
    
    <item>
      <title>attached layouts</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/attached-layouts/</link>
      <pubDate>Thu, 05 Jan 2023 18:50:36 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/attached-layouts/</guid>
      
      <description>Overview Attached layout models allow for altering the layout of items at runtime.</description>
      
    </item>
    
    <item>
      <title>silhouettes</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/silhouettes/</link>
      <pubDate>Thu, 05 Jan 2023 18:49:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/silhouettes/</guid>
      
      <description>App Silhouettes Common pattern of relationship between elements such as app layering, menus, navigation, commanding, and content areas.
Top Navigation silhouette NavigationView is used in content layer Navigation is on same row as commands
Menu Bar silhouette MenuBar used as the base layer along with a CommandBar
Left Navigation silhouette NavigationView on top of app&amp;rsquo;s base layer
Tab View silhouette TabView on app&amp;rsquo;s base layer</description>
      
    </item>
    
    <item>
      <title>custom panels (panel base class)</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/custom-panels-panel-base-class/</link>
      <pubDate>Mon, 02 Jan 2023 22:05:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/custom-panels-panel-base-class/</guid>
      
      <description>Overview </description>
      
    </item>
    
    <item>
      <title>splitview</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/splitview/</link>
      <pubDate>Mon, 02 Jan 2023 22:00:22 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/splitview/</guid>
      
      <description>Overview SplitView class (microsoft.com)
SplitView controls have an expandable / collapsible pane and a content area:
SplitView&amp;rsquo;s content area is always visible. The pane has four modes:
Overlay — hidden until opened; when opened, overlays content area Inline — always visible, does not overlay content area CompactOverlay — narrow portion (just wide enough to show icons) is always visible; when opened, overlays content area CompactInline — same as CompactOverlay but, when opened, pushes content out of its way &amp;lt;SplitView IsPaneOpen=&amp;#34;True&amp;#34; DisplayMode=&amp;#34;Inline&amp;#34; OpenPaneLength=&amp;#34;296&amp;#34;&amp;gt; &amp;lt;SplitView.</description>
      
    </item>
    
    <item>
      <title>panels</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/panels/</link>
      <pubDate>Mon, 02 Jan 2023 21:31:13 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/panels/panels/</guid>
      
      <description>Overview Layout panels are containers to arrange and group UI elements.
Common Panel Properties Panel attached properties Used to let child elements inform parent element how they should be positioned in UI. Syntax: AttachedPropertyProvider.PropertyName
This Button control informs the parent Canvas that the Button should be positioned 50 eps from the left edge of the Canvas:
&amp;lt;Canvas&amp;gt; &amp;lt;Button Canvas.Left=&amp;#34;50&amp;#34;&amp;gt;Hello&amp;lt;/Button&amp;gt; &amp;lt;/Canvas&amp;gt; Panel borders RelativePanel, StackPanel, and Grid panels have border properties to draw a border around them without requiring a Border element: BorderBrush, BorderThickness, CornerRadius, and Padding.</description>
      
    </item>
    
    <item>
      <title>alignment margin padding</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/alignment-margin-padding/</link>
      <pubDate>Mon, 02 Jan 2023 21:02:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/alignment-margin-padding/</guid>
      
      <description>Dimensions Dimensions should be set in increments of 4 effective pixels.
Height / Width specify element size. Default = NaN. Use Auto or star sizing for fluid behavior. ActualHeight / ActualWidth report element size at runtime and are changed in a SizeChanged event. MinWidth / MaxWidth and MinHeight / MaxHeight provide constraints while still supporting fluid sizing. Text element dimensions are controlled by FontSize. They do not have a Height / Width property but do have a calculated ActualHeight / ActualWidth.</description>
      
    </item>
    
    <item>
      <title>multiple views</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/multiple-views/</link>
      <pubDate>Mon, 02 Jan 2023 20:53:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/multiple-views/</guid>
      
      <description>Overview Multiple views allow independent parts of apps to be viewed in separate windows.
When implemented, the taskbar shows each window separately.
APIs Windows.UI.ViewManagement Namespace - Windows UWP applications | Microsoft Learn
Windows.UI.WindowManagement namespace (microsoft.com)
Windowing Hosts CoreWindow / ApplicationView A 1:1 pairing of a thread and a window the app uses to display content Main view is always hosted in ApplicationView; content in a secondary window can be hosted in an ApplicationView or AppWindow Not the preferred technique AppWindow Preferred technique (Windows 10 1903+) Operates on the same UI thread it is created from </description>
      
    </item>
    
    <item>
      <title>layouts</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/layouts/</link>
      <pubDate>Mon, 02 Jan 2023 20:33:28 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/layouts/layouts/</guid>
      
      <description>Overview XAML layout system supports automatic resizing of elements, layout panels, and visual states
Implementing Responsive Layouts with XAML Achieved by using the appropriate layout properties and panels to reposition, resize, and reflow content fluidly.
Layout Properties Height &amp;amp; Width Set to Auto or use star sizing (which is the default) To set constraints, set MinWidth/MaxWidth and MinHeight/MaxHeight. To read value at runtime, use ActualHeight/ActualWidth Alignment Use HorizontalAlignment/VerticalAlignment Visibility The Visibility enum can be Visible or Collapsed.</description>
      
    </item>
    
    <item>
      <title>implementing basic navigation</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/navigation/implementing-basic-navigation/</link>
      <pubDate>Mon, 02 Jan 2023 17:38:12 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/navigation/implementing-basic-navigation/</guid>
      
      <description>A TextBlock &amp;lt;TextBlock x:Name=&amp;#34;pageTitle&amp;#34; Text=&amp;#34;Page 1&amp;#34; /&amp;gt; A HyperlinkButton &amp;lt;HyperlinkButton Content=&amp;#34;Click to go to page 2&amp;#34; Click=&amp;#34;HyperlinkButton_Click&amp;#34; HorizontalAlignment=&amp;#34;Center&amp;#34;/&amp;gt; Code-behind:
// Handle the Click event of the HyperlinkButton: private void HyperlinkButton_Click(object sender, RoutedEventArgs e) { this.Frame.Navigate(typeof(Page2)); } </description>
      
    </item>
    
    <item>
      <title>navigation</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/navigation/navigation/</link>
      <pubDate>Mon, 02 Jan 2023 17:27:02 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/navigation/navigation/</guid>
      
      <description>Overview An app is a collection of pages. Navigation is the act of moving between pages and within a page.
Navigation Structures Flat/Lateral Pages exist side by side Able to navigate from one page to another in any order Hierarchical Each child page has one parent, but a parent can have more than one child. To reach a child page, you must navigate through parent. Navigation Controls Frame Any app with multiple pages uses a Frame The app&amp;rsquo;s main page contains a Frame and a primary navigation element like a navigation view control.</description>
      
    </item>
    
    <item>
      <title>commanding</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/commanding/</link>
      <pubDate>Mon, 02 Jan 2023 17:19:09 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/design/commanding/</guid>
      
      <description>Overview Command elements are interactive UI elements that let users perform actions (send an email, delete an item, submit a form). Command interfaces are composed of common command elements, the command surfaces that host them, the interactions they support, and the experience they provide.
Command elements Buttons—trigger an immediate action Lists—present items in an interactive list or grid (drop-down list, list box, list view, grid view) Selection controls—select from a few options (CheckBox, RadioButton, toggle switch) Calendar, date and time pickers—view/modify date and time info (calendar date picker, calendar view, date picker, time picker) Predictive text entry—Provide suggestions as users type (AutoSuggestBox) Command surfaces App canvas (content area)</description>
      
    </item>
    
    <item>
      <title>project structure</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/project-structure/</link>
      <pubDate>Mon, 02 Jan 2023 16:54:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/project-structure/</guid>
      
      <description>App Class The App class is the app&amp;rsquo;s entry point Defined in App.xaml and App.xaml.cs Derives from Microsoft.UI.Xaml.Application InitializeComponent method parses contents of App.xaml OnLaunched method is invoked when app is launched creates and activates a new instance of MainWindow App.xaml
&amp;lt;Application x:Class=&amp;#34;LuckyNumbers.App&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:LuckyNumbers&amp;#34;&amp;gt; &amp;lt;Application.Resources&amp;gt; &amp;lt;ResourceDictionary&amp;gt; &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt; &amp;lt;XamlControlsResources xmlns=&amp;#34;using:Microsoft.UI.Xaml.Controls&amp;#34; /&amp;gt; &amp;lt;!-- Other merged dictionaries here --&amp;gt; &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt; &amp;lt;!-- Other app resources here --&amp;gt; &amp;lt;/ResourceDictionary&amp;gt; &amp;lt;/Application.Resources&amp;gt; &amp;lt;/Application&amp;gt; App.xaml.cs
public partial class App : Application { public App() { this.</description>
      
    </item>
    
    <item>
      <title>debugging</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/debugging/</link>
      <pubDate>Sun, 01 Jan 2023 17:22:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/debugging/</guid>
      
      <description>Live Visual Tree Debug &amp;gt; Windows &amp;gt; Live Visual Tree
Toggle between showing all WinUI XAML or just XAML you have written:
Show all elements in the MainWindow:
The numbers indicate how many children (direct and indirect) each element contains:
Click to enable a toolbar that floats over the app UI:
Select Element—select an element in UI and it will be selected in Live Visual Tree:
Click brackets to navigate to this element:</description>
      
    </item>
    
    <item>
      <title>create a controltemplate</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/control/create-a-controltemplate/</link>
      <pubDate>Sun, 01 Jan 2023 09:54:59 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/control/create-a-controltemplate/</guid>
      
      <description>Create a Control Template Create a copy of the default ControlTemplate for CheckBox:
Solution Explorer &amp;gt; Dependencies &amp;gt; Packages &amp;gt; Microsoft.WindowsAppSDK …
This package contains the WinUI library and a generic.xaml file that contains all the styles for the controls of WinUI.
… Right-click Microsoft.WindowsAppSDK &amp;gt; Open file in Explorer &amp;gt; lib &amp;gt; net6.0-windows.10.x.y.z &amp;gt; Microsoft.WinUI &amp;gt; Themes &amp;gt; generic.xaml
generic.xaml
Copy the above Style.
Resources/Styles.xaml
Paste the style for the CheckBox copied from generic.</description>
      
    </item>
    
    <item>
      <title>templates</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/control/templates/</link>
      <pubDate>Sun, 01 Jan 2023 09:12:52 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/control/templates/</guid>
      
      <description>Overview There are user controls and custom controls:
User controls have hardcoded UI&amp;rsquo;s in their XAML files Custom controls have UIs defined in a ControlTemplate. Set the Template property to change the UI of a custom control. This allows for changing the UI even if you don&amp;rsquo;t own the code for the control. All WinUI controls (Button, TextBox, CheckBox, etc) are implemented as custom controls. Define the Look of a Custom Control Starting with a normal grey button…</description>
      
    </item>
    
    <item>
      <title>js interop</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/advanced/js-interop/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/advanced/js-interop/</guid>
      
      <description>Overview .NET can invoke JavaScript and vice-versa. IJSRuntime is automatically registered as a service by the Blazor framework. Documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/?view=aspnetcore-7.0 https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-7.0 Warning: JavaScript code must only be executed after the Component is fully rendered. Invoke JavaScript from the OnAfterRenderAsync method.
Prerendering Invoking JavaScript is not possible during prerendering.
JavaScript Locations In &amp;lt;body&amp;gt; markup Place the JavaScript inside the closing &amp;lt;/body&amp;gt; element of wwwroot/index.html (Blazor WASM) or Pages/_Host.cshtml (Blazor Server):
&amp;lt;body&amp;gt; .</description>
      
    </item>
    
    <item>
      <title>styles</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/styles/</link>
      <pubDate>Sat, 31 Dec 2022 09:16:27 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/styles/</guid>
      
      <description>Overview Styles allow you to apply the same property values to multiple elements in XAML.
Benefits of Styles Styles allow you to apply common style property values to multiple controls without having to define them on each control individually.
Creating Styles Styles can be created in the Resources property of the parent element of the elements being styled:
MainWindow.xaml
&amp;lt;!-- ... --&amp;gt; &amp;lt;!-- Customer detail --&amp;gt; &amp;lt;StackPanel Grid.Row=&amp;#34;1&amp;#34; Grid.Column=&amp;#34;1&amp;#34; Margin=&amp;#34;10&amp;#34; Visibility=&amp;#34;{x:Bind ViewModel.</description>
      
    </item>
    
    <item>
      <title>dependency injection</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/dependency-injection/</link>
      <pubDate>Thu, 29 Dec 2022 21:44:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/dependency-injection/</guid>
      
      <description>Overview The MainWindow knows how to create the MainViewModel with a customer data provider.
This is problematic because MainWindow&amp;rsquo;s responsibility is only to be the MainWindow of our application. Knowing how to instantiate a MainViewModel is outside of its scope.
MainViewModel is a dependency that MainWindow needs (and stores in its MainViewModel property below).
Manually Inject the MainViewModel Dependency into MainWindow Adjust MainWindow so its constructor takes a MainViewModel as a parameter (required for DI):</description>
      
    </item>
    
    <item>
      <title>applying</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-templates/applying/</link>
      <pubDate>Wed, 28 Dec 2022 20:58:21 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-templates/applying/</guid>
      
      <description>Data Templates Use a Data Template for the ListView in the Navigation so that you can see the first AND last name of the customers.
Defining a Data Template MainWindow.xaml
&amp;lt;!-- ... --&amp;gt; &amp;lt;ListView Grid.Row=&amp;#34;1&amp;#34; ItemsSource=&amp;#34;{x:Bind ViewModel.Customers, Mode=OneWay}&amp;#34; SelectedItem=&amp;#34;{x:Bind ViewModel.SelectedCustomer, Mode=TwoWay}&amp;#34; DisplayMemberPath=&amp;#34;FirstName&amp;#34; ScrollViewer.HorizontalScollMode=&amp;#34;Enabled&amp;#34; ScrollVIewer.HorizontalScrollBarVisibility=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;!-- Set the ListView&amp;#39;s ItemTemplate property: --&amp;gt; &amp;lt;ListView.ItemTemplate&amp;gt; &amp;lt;!-- Use any UI element inside this DataTemplate: --&amp;gt; &amp;lt;DataTemplate&amp;gt; &amp;lt;StackPanel Orientation=&amp;#34;Horizontal&amp;#34;&amp;gt; &amp;lt;!-- Bind to the DataContext: --&amp;gt; &amp;lt;TextBlock Text=&amp;#34;{Binding FirstName, Mode=OneWay}&amp;#34; FontWeight=&amp;#34;Bold&amp;#34;/&amp;gt; &amp;lt;TextBlock Text=&amp;#34;{Binding LastName, Mode=OneWay}&amp;#34; Margin=&amp;#34;5 0 0 0&amp;#34;/&amp;gt; &amp;lt;/StackPanel&amp;gt; &amp;lt;/DataTemplate&amp;gt; &amp;lt;/ListView.</description>
      
    </item>
    
    <item>
      <title>concepts</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-templates/concepts/</link>
      <pubDate>Wed, 28 Dec 2022 20:32:09 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-templates/concepts/</guid>
      
      <description>WinUI&amp;rsquo;s Flexible Content Model Data Templates define a user interface for data. It is often defined as a Resource.
ContentControl Consider ContentControl (the base class of Button, CheckBox, ListViewItem, others).
ContentControl defines the Content property which is of type object. This is what allows you to assign an arbitrary object (and not just a string) to the Content property. ContentControl&amp;rsquo;s Content Property If a UIElement (base class of Panels and Controls) is assigned to ContentControl&amp;rsquo;s Content property, it is rendered.</description>
      
    </item>
    
    <item>
      <title>resources</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/resources/resources/</link>
      <pubDate>Wed, 28 Dec 2022 19:11:14 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/resources/resources/</guid>
      
      <description>Overview In XAML, every element has a Resources property of type ResourceDictionary.
HeaderControl.xaml
&amp;lt;!-- ... --&amp;gt; &amp;lt;!-- Instead of hard-coding this value, it can be stored in a resource: --&amp;gt; &amp;lt;Grid Background =&amp;#34;F05A28&amp;#34;&amp;gt; &amp;lt;!-- ... --&amp;gt; Defining Resources Application-wide resources are stored in App.xaml: App.xaml
&amp;lt;!-- ... --&amp;gt; &amp;lt;Application.Resources&amp;gt; &amp;lt;ResourceDictionary&amp;gt; &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt; &amp;lt;XamlControlResources xmlns=&amp;#34;using:Microsoft.UI.Xaml.Controls&amp;#34; /&amp;gt; &amp;lt;!-- Other merged dictionaries here --&amp;gt; &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt; &amp;lt;!-- Other app resources here --&amp;gt; &amp;lt;!-- Since the Resources property is a ResourceDictionary, it needs a Key and a Value.</description>
      
    </item>
    
    <item>
      <title>github cli</title>
      <link>http://localhost:1313/wieserpedia/cli/github-cli/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/github-cli/</guid>
      
      <description>Authenticate gh auth login --git-protocol ssh | https --scopes strings --web --with-token # Read token from STDIN gh auth logout gh auth refresh --scopes strings gh auth setup-git # Configure git to use GitHub CLI as credential helper gh auth status --show-token gh auth token Aliases gh alias set prd &amp;#34;pr create --draft&amp;#34; # gh prd will now run gh pr create --draft Browse gh browse # Open browser to issue/PR # gh browse filename:line-number gh browse --commit # Open the last commit --no-browser # Just print destination URL --projects # Open repo projects --repo owner/repo --settings # Open repo settings --wiki # Open repo wiki Codespace gh codespace # Manage codespaces Config gh config get key gh config list gh config set key value Keys:</description>
      
    </item>
    
    <item>
      <title>github flavored markdown</title>
      <link>http://localhost:1313/wieserpedia/web-development/github-flavored-markdown/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/github-flavored-markdown/</guid>
      
      <description>Overview GitHub-Flavored Markdown is an extended markdown syntax by GitHub.
Collapsible Sections &amp;lt;details&amp;gt;&amp;lt;summary&amp;gt;CLICK ME&amp;lt;/summary&amp;gt; &amp;lt;p&amp;gt; #### We can hide anything, even code! ```ruby puts &amp;#34;Hello World&amp;#34; \``` &amp;lt;/p&amp;gt; &amp;lt;/details&amp;gt; CLICK ME We can hide anything, even code! puts &amp;#34;Hello World&amp;#34; Code Blocks See also: linguist/languages.yml at master · github/linguist
``` function test() { console.log(&amp;#34;notice the blank line before this function?&amp;#34;); } ``` Syntax Highlighting ```ruby require &amp;#39;redcarpet&amp;#39; markdown = Redcarpet.new(&amp;#34;Hello World!</description>
      
    </item>
    
    <item>
      <title>jekyll</title>
      <link>http://localhost:1313/wieserpedia/web-development/github-pages/jekyll/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/github-pages/jekyll/</guid>
      
      <description>Overview GitHub pages uses Jekyll as its static site generator.
Some configuration settings cannot be changed for GitHub Pages:
lsi: false safe: true source: [your repo&amp;#39;s top level directory] incremental: false highlighter: rouge gist: noscript: false kramdown: math_engine: mathjax syntax_highlighter: rouge Custom Variables Set custom variables that can be accessed in Liquid:
--- food: Pizza --- &amp;lt;h1&amp;gt;{{ page.Food }}&amp;lt;/ht1&amp;gt; Themes GitHub Pages support Jekyll themes.
Built-in themes Jekyll theme documentation In _config.</description>
      
    </item>
    
    <item>
      <title>executing logic in a viewmodel</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/executing-logic-in-a-viewmodel/</link>
      <pubDate>Sun, 18 Dec 2022 20:02:53 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/executing-logic-in-a-viewmodel/</guid>
      
      <description>First Technique to Execute Logic in a ViewModel Bind events to methods with x:Bind
Assume an Add method in the ViewModel that should be called every time a Button is clicked in the View:
Okay Approach Use the Button&amp;rsquo;s Click event; install an event handler in the View&amp;rsquo;s code-behind file:
Disadvantage: An event handler needs to be installed in the code-behind file for every method of the ViewModel that needs to be called.</description>
      
    </item>
    
    <item>
      <title>binding visibility with x bind</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/binding-visibility-with-x-bind/</link>
      <pubDate>Sun, 18 Dec 2022 19:48:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/binding-visibility-with-x-bind/</guid>
      
      <description>Bind the Visibility property with x:Bind MainViewModel.cs
public class MainViewModel : INotifyPropertyChanged { private readonly ICustomerDataProvider _customerDataProvider; private CustomerItemViewModel? _selectedCustomer; public MainViewModel(ICustomerDataProvider customerDataProvider) { // … } public ObservableCollection&amp;lt;CustomerItemViewModel&amp;gt; Customers { get; } = new(); public CustomerItemViewModel? SelectedCustomer { get =&amp;gt; _selectedCustomer; set { if (_selectedCustomer != null) { _selectedCustomer = value; RaisePropertyChanged(); RaisePropertyChanged(nameof(IsCustomerSelected)); } } } public bool IsCustomerSelected =&amp;gt; SelectedCustomer is not null; public event PropertyChangedEventHandler? PropertyChanged; public Task LoadAsync() { // … if (customers is not null) foreach (var customer in customers) Customers.</description>
      
    </item>
    
    <item>
      <title>x bind vs binding</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/x-bind-vs-binding/</link>
      <pubDate>Sun, 18 Dec 2022 19:13:17 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/x-bind-vs-binding/</guid>
      
      <description>Overview Prefer x:Bind over Binding whenever possible.
Binding &amp;lt;TextBlock Text={&amp;#34;Binding Path=…}&amp;#34;/&amp;gt; Resolves binding path at runtime Data Sources ElementName, Source, or RelativeSource Uses DataContext if none of the above are set x:Bind &amp;lt;TextBlock Text={&amp;#34;x:Bind Path=…}&amp;#34;/&amp;gt; Resolves binding path a compile time Creates C# code behind the scenes Data Sources Does not use data sources. Uses Root object of XAML document (an instance of the class that is specified with the x:Class attribute) Advantages of x:Bind Better performance Compile-time errors Better debugging experience (ability to step into genereated data binding code) Example with x:Bind MainWindow.</description>
      
    </item>
    
    <item>
      <title>coupling vs cohesion</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/principles/coupling-vs-cohesion/</link>
      <pubDate>Sat, 17 Dec 2022 09:47:30 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/principles/coupling-vs-cohesion/</guid>
      
      <description>Loose coupling between modules
High cohesion within modules
Coupling The degree of interdependence between software modules.
Advantages A change in one module does not have a ripple effects requiring a change in another. Promotes code re-use and ease of testing by reducing dependencies. Cohesion The degree to which elements inside a module belong together.
If methods of a class are similar in many aspects, the class has high cohesion. Advantages Improved code readability Improved code reusability Complexity is manageable Examples Bad: The only relationship between the parts is that they have been grouped together.</description>
      
    </item>
    
    <item>
      <title>create another viewmodel</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/create-another-viewmodel/</link>
      <pubDate>Wed, 14 Dec 2022 19:21:02 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/create-another-viewmodel/</guid>
      
      <description>Create a ViewModel for a Customer CustomerItemViewModel.cs
public class CustomerItemViewModel : ViewModelBase { private readonly Customer _model; public CustomerItemViewModel(Customer model) { _model = model; } public int Id =&amp;gt; _model.Id; public string? FirstName { get =&amp;gt; _model.Firstname set { if (_model.Firstname != value) { _model.Firstname = value; RaisePropertyChanged(); } } } public string? LastName { get =&amp;gt; _model.Lastname set { if (_model.Lastname!= value) { _model.Lastname= value; RaisePropertyChanged(); } } } public bool IsDeveloper { get =&amp;gt; _model.</description>
      
    </item>
    
    <item>
      <title>refactor logic into a viewmodelbase class</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/refactor-logic-into-a-viewmodelbase-class/</link>
      <pubDate>Wed, 14 Dec 2022 19:09:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/refactor-logic-into-a-viewmodelbase-class/</guid>
      
      <description>Refactor Logic into a ViewModelBase Class Move the INotifyPropertyChanged interface into a base class so that it can be moved into other ViewModels:
MainViewModel.cs
public class MainViewModel : INotifyPropertyChanged { … } ViewModelBase.cs
public class ViewModelBase : INotifyPropertyChanged { // Moved from MainViewModel: public event PropertyChangedEventHandler? PropertyChanged; // Moved from MainViewModel: // Change access modifier to protected to call this from subclasses: protected virtual void RaisePropertyChanged(string? propertyName = null) { // The sender is this MainViewModel instance; PropertyChanged?</description>
      
    </item>
    
    <item>
      <title>notify data binding when property changes</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/notify-data-binding-when-property-changes/</link>
      <pubDate>Wed, 14 Dec 2022 18:56:52 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/notify-data-binding-when-property-changes/</guid>
      
      <description>Notify the Data Binding when Property Changes Implement the INotifyPropertyChanged interface on the ViewModel:
MainViewModel.cs
public class MainViewModel : INotifyPropertyChanged { private readonly ICustomerDataProvider _customerDataProvider; private Customer? _selectedCustomer; // Using an interface prevents MainViewModel from being tightly coupled to DataProvider public MainViewModel(ICustomerDataProvider customerDataProvider) { … } // A collection type that notifies the data binding when items are added or removed public ObservableCollection&amp;lt;Customer&amp;gt; Customers { get; } = new(); public Customer?</description>
      
    </item>
    
    <item>
      <title>create a viewmodel</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/create-a-viewmodel/</link>
      <pubDate>Wed, 14 Dec 2022 18:55:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/create-a-viewmodel/</guid>
      
      <description>Creating New Folder &amp;gt; ViewModel; MainViewModel.cs
MainViewModel.cs
public class MainViewModel { private readonly ICustomerDataProvider _customerDataProvider; // Using an interface prevents MainViewModel from being tightly coupled to DataProvider public MainViewModel(ICustomerDataProvider customerDataProvider) { _customerDataProvider = customerDataProvider; } // A collection type that notifies the data binding when items are added or removed public ObservableCollection&amp;lt;Customer&amp;gt; Customers { get; } = new(); public Task LoadAsync() { if (Customers.Any()) // Customers were loaded already return; var customers = await _customerDataProvider.</description>
      
    </item>
    
    <item>
      <title>add a property</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/add-a-property/</link>
      <pubDate>Wed, 14 Dec 2022 18:55:12 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/add-a-property/</guid>
      
      <description>Add a SelectedCustomer Property This is the current state. The Text property of the TextBox is bound to the SelectedItem property of the ListView so that the FirstName of the selected customer displays in the TextBox.
However, the binding was achieved through UI logic in XAML. The ViewModel has no idea what Customer is selected.
To solve for this, created a SelectedCustomer property in the ViewModel and bind it to the SelectedItem in the ListView.</description>
      
    </item>
    
    <item>
      <title>using viewmodel</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/using-viewmodel/</link>
      <pubDate>Mon, 12 Dec 2022 20:58:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/using-viewmodel/</guid>
      
      <description>Using ViewModel for the MainWindow MainWindow.xaml
&amp;lt;!-- Set a name on the grid so we can reference it in the code-behind: --&amp;gt; &amp;lt;Window … &amp;lt;Grid Background=&amp;#34;#222222&amp;#34; x:Name=&amp;#34;root&amp;#34;&amp;gt; MainWindow.xaml.cs
public sealed partial class MainWindow : Window { public MainViewModel ViewModel { get; } public MainWindow() { this.InitializeComponent(); Title = &amp;#34;Customers App&amp;#34;; ViewModel = new MainViewModel(new CustomerDataProvider()); root.DataContext = ViewModel; // &amp;lt;— Assign the ViewModel to the DataContext root.Loaded += Root_Loaded; // &amp;lt;— Load the data of the ViewModel when the View gets loaded: } // This event handler gets called when root Grid is loaded: private async void Root_Loaded(object sender, RoutedEventArgs e) { await ViewModel.</description>
      
    </item>
    
    <item>
      <title>mvvm pattern</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/mvvm-pattern/</link>
      <pubDate>Mon, 12 Dec 2022 17:00:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/mvvm-pattern/mvvm-pattern/</guid>
      
      <description>Model View ViewModel Pattern View .xaml and corresponding .xaml.cs file Visual elements (like ListView) ViewModel This is a model that is actually made for the View (hence &amp;ldquo;ViewModel&amp;rdquo;) Contains UI logic ViewModel uses the Model The View is connected to the ViewModel via data bindings A ViewModel instance is assigned to the View&amp;rsquo;s DataContext property to enable this Usually contains a LoadAsync() method that uses the DataProvider to fill the Customers property In the View&amp;rsquo;s code-behind, create an event handler for the Loaded event.</description>
      
    </item>
    
    <item>
      <title>data binding</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-binding/</link>
      <pubDate>Mon, 12 Dec 2022 16:39:12 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/data-binding/</guid>
      
      <description>Data Binding Linking properties of objects in the View to those in the Data layer so that changes in one are reflected in the other. Makes event handlers unnecessary. Can be implemented in XAML or code, but more common in XAML. Bind the Firstname textbox to the selected item in the ListView:
This is the ListView that holds the names. Add an x:Name to it:
&amp;lt;!-- ... --&amp;gt; &amp;lt;ListView Grid.Row=&amp;#34;1&amp;#34; x:Name=&amp;#34;customerListView&amp;#34; ScrollViewer.</description>
      
    </item>
    
    <item>
      <title>namespaces</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/namespaces/</link>
      <pubDate>Mon, 12 Dec 2022 16:30:39 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/namespaces/</guid>
      
      <description>&amp;lt;!-- x:Class maps to `Microsoft.UI.Xaml`, `.Controls`, `.Data`, `.Input`, `.Shapes` --&amp;gt; &amp;lt;!-- xmlns — This is the *default* namespace because it does not have a prefix --&amp;gt; &amp;lt;!-- xmlns:x — Defines attributes for the XAML language, like the `x:Name` attribute --&amp;gt; &amp;lt;!-- xmlns:d — Designer namespace that defines properties like DesignWidth, DesignHeight; since XAML does not have a designer, this namespace is not needed --&amp;gt; &amp;lt;!-- xmlns:mc — The markup compatibility namespace defines the Ignorable attribute --&amp;gt; &amp;lt;!</description>
      
    </item>
    
    <item>
      <title>usercontrols</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/usercontrols/</link>
      <pubDate>Mon, 12 Dec 2022 13:39:26 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/usercontrols/</guid>
      
      <description>UserControls UserControls compartmentalize XAML.
Creating New folder &amp;gt; &amp;ldquo;Controls&amp;rdquo; &amp;gt; New item &amp;gt; WinUI &amp;gt; User Control (WinUI 3) &amp;gt; &amp;ldquo;HeaderControl&amp;rdquo;
HeaderControl.xaml
&amp;lt;!-- Create a UserControl tag to hold the control: --&amp;gt; &amp;lt;UserControl x:Class=&amp;#34;WiredBrainCoffee.CustomersApp.Controls.HeaderControl&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:WiredBrainCoffee.CustomersApp.Controls&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34;&amp;gt; &amp;lt;Grid Background=&amp;#34;#F05A28&amp;#34;&amp;gt; &amp;lt;StackPanel HorizontalAlignment=&amp;#34;Center&amp;#34; Orientation=&amp;#34;Horizontal&amp;#34;&amp;gt; &amp;lt;Image Source=&amp;#34;/Images/logo.png&amp;#34; Width=&amp;#34;100&amp;#34; Margin=&amp;#34;5&amp;#34;/&amp;gt; &amp;lt;TextBlock Text=&amp;#34;Customers App&amp;#34; FontSize=&amp;#34;30&amp;#34; VerticalAlignment=&amp;#34;Center&amp;#34; Foreground=&amp;#34;White&amp;#34;/&amp;gt; &amp;lt;TextBlock Text=&amp;#34;Version 1.0&amp;#34; FontSize=&amp;#34;16&amp;#34; VerticalAlignment=&amp;#34;Bottom&amp;#34; Margin=&amp;#34;10 0 0 22&amp;#34; Foreground=&amp;#34;#333333&amp;#34;/&amp;gt; &amp;lt;/StackPanel&amp;gt; &amp;lt;/Grid&amp;gt; &amp;lt;/UserControl&amp;gt; HeaderControl.xaml.cs code-behind:</description>
      
    </item>
    
    <item>
      <title>attached properties</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/attached-properties/</link>
      <pubDate>Mon, 12 Dec 2022 13:16:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/attached-properties/</guid>
      
      <description>In XAML Grid.Column is an attached property; it is a property defined in the Grid class but set on the Rectangle.
Set Grid.Row=&amp;quot;1&amp;quot; to move to the second row of the grid.
In C# var btn = new Button(); btn.SetValue(Grid.RowProperty, 1); var row = (int)btn.GetValue(Grid.RowProperty); </description>
      
    </item>
    
    <item>
      <title>positioning elements</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/positioning-elements/</link>
      <pubDate>Sun, 11 Dec 2022 19:00:58 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/positioning-elements/</guid>
      
      <description>Positioning Elements with Layout Properties HorizontalAlignment property has values of Left, Center, Right, Stretch
VerticalAlignment property has values of Top, Center, Bottom, Stretch
When Width and Height properties are set, the element will not grow or shrink:
Margin Margin=&amp;quot;&amp;lt;Left Top Right Bottom&amp;gt;&amp;quot;
Margin=&amp;quot;50&amp;quot; results in a margin of 50 pixels on all sides.
Margin=&amp;quot;50 10&amp;quot; results in 50 pixels for left and right margins and 10 pixels for top and bottom margins.</description>
      
    </item>
    
    <item>
      <title>sizing rows and columns</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/sizing-rows-and-columns/</link>
      <pubDate>Sun, 11 Dec 2022 18:40:59 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/sizing-rows-and-columns/</guid>
      
      <description>Sizing Setting Height to &amp;quot;*&amp;quot; for both RowDefinitions results in both rows growing proportionally:
Star Sizing Setting the first RowDefinition to &amp;quot;3*&amp;quot; results in a total of 4 stars for the two RowDefinitions, 3 of which go to the first RowDefinition:
Absolute Sizing Absolute sizing uses pixels.
Here, the first RowDefinition is 100 pixels; the other two split the remaining space evenly:
Setting the third row of the grid to &amp;quot;Auto&amp;quot; results in the row using the height of the tallest element in the row (in this case, the orange rectangle):</description>
      
    </item>
    
    <item>
      <title>building a layout</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/building-a-layout/</link>
      <pubDate>Sun, 11 Dec 2022 18:27:01 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/building-a-layout/</guid>
      
      <description>MainWindow.xaml
&amp;lt;Window x:Class=&amp;#34;WiredBrainCoffee.CustomersApp.MainWindow&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:WiredBrainCoffee.CustomersApp&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34;&amp;gt; &amp;lt;!-- A `Grid` with two columns and three rows: --&amp;gt; &amp;lt;Grid Background=&amp;#34;#222222&amp;#34;&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;ColumnDefinition Width=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;ColumnDefinition Width=&amp;#34;*&amp;#34;/&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;Grid.RowDefinitions&amp;gt; &amp;lt;!-- For the header: --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;!-- For Navigation and Customer Details --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;*&amp;#34;/&amp;gt; &amp;lt;!-- For the border element: --&amp;gt; &amp;lt;RowDefinition Height=&amp;#34;Auto&amp;#34;/&amp;gt; &amp;lt;/Grid.RowDefinitions&amp;gt; &amp;lt;!-- Header: a horizontal `StackPanel` with an image and two TextBlocks: ----&amp;gt; &amp;lt;!-- This grid defines the background: --&amp;gt; &amp;lt;Grid Grid.</description>
      
    </item>
    
    <item>
      <title>ui</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/ui/</link>
      <pubDate>Sat, 10 Dec 2022 17:28:28 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/ui/ui/</guid>
      
      <description>WinUI Layout Panels StackPanel Often used to stack OK/Cancel buttons.
Note: StackPanel.Children can be omitted
Grid Often used for the main layout of a UI. Displays a UI&amp;rsquo;s elements in rows and columns.
Add RowDefinitions to the Grid.RowDefinitions property. Specifying two RowDefinitions results in two rows.
The same is true for ColumnDefinitions.
RowDefinition has a Height property; ColumnDefinition has a Width property.
ColumnSpan and RowSpan properties span an element across multiple columns or rows.</description>
      
    </item>
    
    <item>
      <title>elements and attributes</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/elements-and-attributes/</link>
      <pubDate>Fri, 09 Dec 2022 20:33:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/winui-3/xaml/elements-and-attributes/</guid>
      
      <description>Elements &amp;amp; Attributes Attribute Syntax Button is an element; in XAML, elements are mapped to Classes.
&amp;lt;Button&amp;gt; Content=&amp;#34;Add customer&amp;#34; &amp;lt;/Button&amp;gt; ^ Closing element tag.
Since the element has no content between the opening/closing tags, it can instead be written as a self-closing element:
&amp;lt;Button x:Name=&amp;#34;btnAddCustomer&amp;#34; This is a a special XAML attribute. Content=&amp;#34;Add customer&amp;#34; `Content` is an *attribute*; in XAML, attributes can map to *properties*. Clicked=&amp;#34;Button_Click&amp;#34; /&amp;gt; This attribute is mapped to an event of the button, Button_Click.</description>
      
    </item>
    
    <item>
      <title>modifiers</title>
      <link>http://localhost:1313/wieserpedia/_net/types/modifiers/</link>
      <pubDate>Fri, 25 Nov 2022 21:11:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/modifiers/</guid>
      
      <description>Access Modifiers public – Access is unrestricted. private – Access is limited to this type in this assembly only. protected – Access is limited to this type or derivatives, or derivatives in a referenced assembly. internal – Access is limited to this assembly only. protected internal – Combination of protected + internal. private protected – Combination of private + protected. Modifier This Assembly (Derived Type) This Assembly (Other Type) External Assembly (Derived Type) External Assembly (Other Type) public yes yes yes yes private no no no no protected yes no yes no internal yes yes no no protected (internal) yes yes yes no private (internal) yes no no no Other Modifiers virtual – This member may be overridden in a derived type.</description>
      
    </item>
    
    <item>
      <title>native aot deployment</title>
      <link>http://localhost:1313/wieserpedia/_net/deployment/native-aot-deployment/</link>
      <pubDate>Fri, 25 Nov 2022 20:53:06 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/deployment/native-aot-deployment/</guid>
      
      <description>Overview Publishing as Native AOT produces a self-contained app that has been ahead-of-time compiled into native code.
Advantages:
Faster startup time Smaller memory footprint Limitations:
Availability: GA: .NET 7: Console applications only Preview: ASP.NET Core 8 All limitations of trimming apply. All limitations of single-file deployments apply. No dynamic loading (Assembly.LoadFile) No runtime code generation (System.Reflection.Emit) Apps include required runtime libraries (like all self-contained apps), so their size is larger than framework-dependent apps.</description>
      
    </item>
    
    <item>
      <title>required properties and fields</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/required-properties-and-fields/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/required-properties-and-fields/</guid>
      
      <description>Overview Availability: C# 11 / .NET 7 Properties can be marked required to indicate that they must be present in the JSON payload for deserialization to succeed. Otherwise, Deserialize methods throw a JsonException.
Techniques for Marking Fields/Properties Add the required modifier to the field/property (C# 11) Annotate the property with JsonRequiredAttribute (.NET 7) a. Use this technique if the requirement should only apply to deserialization. Modify the JsonPropertyInfo.IsRequired property of the contract model (.</description>
      
    </item>
    
    <item>
      <title>processing tasks</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/processing-tasks/</link>
      <pubDate>Wed, 23 Nov 2022 10:36:13 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/processing-tasks/</guid>
      
      <description>Processing Tasks as They Complete [Documentation] Task.WhenAny allows for starting multiple tasks at the same time and processing them one by one in the order in which they complete instead of the order in which they are started.
static async Task SumPageSizesAsync() { var stopwatch = Stopwatch.StartNew(); IEnumerable&amp;lt;Task&amp;lt;int&amp;gt;&amp;gt; downloadTasksQuery = from url in s_urlList select ProcessUrlAsync(url, s_client); // Start each Task since LINQ uses deferred execution otherwise: List&amp;lt;Task&amp;lt;int&amp;gt;&amp;gt; downloadTasks = downloadTasksQuery.</description>
      
    </item>
    
    <item>
      <title>task</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task/</link>
      <pubDate>Wed, 23 Nov 2022 09:58:39 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task/</guid>
      
      <description>Overview In C#, Thread and Task are both types used for asynchronous operations. Task is a higher level of abstraction than Thread.
System.Threading.Tasks contains types for writing concurrent and asynchronous code.
TaskFactory — static methods for creating and starting tasks. TaskScheduler — thread scheduling infrastructure. Task — a wrapper around a thread that enables easier management. System.Threading.Tasks.Extensions.ValueTask is a lightweight implementation of a generalized task-returning value.
Task and Task&amp;lt;T&amp;gt; [Documentation] Task represents a single asynchronous operation that does not return a value.</description>
      
    </item>
    
    <item>
      <title>continuations</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/continuations/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/continuations/</guid>
      
      <description>Continuations A continuation task (continuation) is an async task that is invoked by another task (the antecedent) when the antecedent finishes. Continuations allow descendant operations to consume the results of an ancestor. In this way, you can chain tasks. A continuation is created in the WaitingForActivation state and activated automatically when its antecedent task completes. Blocking Continuations, like any Task, do not block the current thread.
To block until a continuation finishes, call Task.</description>
      
    </item>
    
    <item>
      <title>parallel async io</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/parallel-async-io/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/parallel-async-io/</guid>
      
      <description>Parallel Asynchronous I/O Simple Example public async Task SimpleParallelWriteAsync() { string folder = Directory.CreateDirectory(&amp;#34;tempfolder&amp;#34;).Name; IList&amp;lt;Task&amp;gt; writeTaskList = new List&amp;lt;Task&amp;gt;(); for (int index = 11; index &amp;lt;= 20; ++ index) { string fileName = $&amp;#34;file-{index:00}.txt&amp;#34;; string filePath = $&amp;#34;{folder}/{fileName}&amp;#34;; string text = $&amp;#34;In file {index}{Environment.NewLine}&amp;#34;; writeTaskList.Add(File.WriteAllTextAsync(filePath, text)); } await Task.WhenAll(writeTaskList); // This will write all 10 files in parallel. } Fine Control Example public async Task ProcessMultipleWritesAsync() { IList&amp;lt;FileStream&amp;gt; sourceStreams = new List&amp;lt;FileStream&amp;gt;(); try { string folder = Directory.</description>
      
    </item>
    
    <item>
      <title>consuming tap</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/consuming-tap/</link>
      <pubDate>Mon, 21 Nov 2022 22:06:24 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/consuming-tap/</guid>
      
      <description>Overview [Documentation] In this pattern, callbacks achieve waiting without blocking. Language-based async support hides the callbacks.
Await keyword The await keyword suspends execution. It installs a callback by using continuation. The callback resumes the async method at the point of suspension.
When the async method is resumed:
If operation completed successfully and was a Task&amp;lt;TResult&amp;gt;, then TResult is returned. If awaited task ended in Canceled state, an OperationCanceledException is thrown. If awaited task ended in Faulted state, the exception that caused the fault is thrown.</description>
      
    </item>
    
    <item>
      <title>implementing tap</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/implementing-tap/</link>
      <pubDate>Mon, 21 Nov 2022 22:06:15 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/task-asynchronous-programming/implementing-tap/</guid>
      
      <description>Overview [Documentation] The TAP pattern can be implemented via the C# compiler, manually, or in a hybrid of both.
Creating TAP Methods Compiler Approach Create TAP methods by using the async keyword. Compiler will automatically perform necessary transformations to implement TAP.
TAP methods must return Task or Task&amp;lt;T&amp;gt;. Any exceptions that go unhandled in body of task are marshalled to the output task and task ends in Faulted state. Except when an OperationCanceledException goes unhandled; then task ends in Canceled state.</description>
      
    </item>
    
    <item>
      <title>null state static analysis</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/null-state-static-analysis/</link>
      <pubDate>Sat, 19 Nov 2022 08:48:52 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/null-state-static-analysis/</guid>
      
      <description>Overview The System.Diagnostics.CodeAnalysis contains attributes interpreted by the C# compiler for null-state static analysis.
These attributes help to fully describe the null-state of arguments and return values in your APIs. Adding these attributes gives the compiler more information about the rules for an API. These attributes do not enable more checks. Documentation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis Preconditions The AllowNull and DisallowNull are used to specify that preconditions on variables may not match the nullable annotations on those variables.</description>
      
    </item>
    
    <item>
      <title>editorconfig</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig/</link>
      <pubDate>Thu, 17 Nov 2022 15:45:22 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig/</guid>
      
      <description>Overview EditorConfig is a cross-platform file format for defining code styles.
File Format EditorConfig files consist of preambles (the lines that precede the first section), section names (between brackets), and sections (which run from the beginning of the section header to the beginning of the next section header). Comments start with ; or # No inline comments Section Headers are enclosed in [ ] No non-whitespace characters outside brackets May contain characters and whitespace between brackets Path separators are always / Sections Key-Value Pairs are of format key=value</description>
      
    </item>
    
    <item>
      <title>linq and files</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/linq-and-files/</link>
      <pubDate>Mon, 14 Nov 2022 20:11:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/linq-and-files/</guid>
      
      <description>For all examples:
string startFolder = @&amp;#34;*path*&amp;#34;; System.IO.DirectoryInfo dir = new(startFolder); IEnumerable&amp;lt;System.IO.FileInfo&amp;gt; fileList = dir.GetFiles(&amp;#34;*.*&amp;#34;, System.IO.SearchOption.AllDirectories); Query for Files by Attribute or Name var fileQuery = from file in fileList where file.Extension == &amp;#34;.txt&amp;#34; orderby file.Name select file; Find the Newest File var newestFile = (from file in fileQuery orderby file.CreationTime select new { file.FullName, file.CreationTime }) .Last(); Group Files by Extension int trimLength = startFolder.Length; var queryGroupByExt = from file in fileList group file by File.</description>
      
    </item>
    
    <item>
      <title>linq and strings</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/linq-and-strings/</link>
      <pubDate>Mon, 14 Nov 2022 20:11:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/linq-and-strings/</guid>
      
      <description>For all examples:
string startFolder = @&amp;#34;*path*&amp;#34;; System.IO.DirectoryInfo dir = new(startFolder); IEnumerable&amp;lt;System.IO.FileInfo&amp;gt; fileList = dir.GetFiles(&amp;#34;*.*&amp;#34;, System.IO.SearchOption.AllDirectories); Query for Files by Attribute or Name var fileQuery = from file in fileList where file.Extension == &amp;#34;.txt&amp;#34; orderby file.Name select file; Find the Newest File var newestFile = (from file in fileQuery orderby file.CreationTime select new { file.FullName, file.CreationTime }) .Last(); Group Files by Extension int trimLength = startFolder.Length; var queryGroupByExt = from file in fileList group file by File.</description>
      
    </item>
    
    <item>
      <title>design patterns</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/patterns/design-patterns/</link>
      <pubDate>Mon, 14 Nov 2022 09:55:57 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/patterns/design-patterns/</guid>
      
      <description>The 23 Design Patterns from the Gang of Four Creational Structural Behavioral Class Factory Method Adapter (class) Interpreter
Template Method
Object Abstract Factory
Builder
Prototype
Singleton
Adapter (object)
Bridge
Composite
Decorator
Facade
Flyweight
Proxy
Chain of Responsibility
Command
Iterator
Mediator
Memento
Observer
State
Strategy
Visitor
Concepts Factory—a method or class that produces something:
A method that creates a GUI A class that creates users A static method that calls a class constructor in a certain way Creation Method—a method that creates objects.</description>
      
    </item>
    
    <item>
      <title>aggregate</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/aggregate/</link>
      <pubDate>Sun, 13 Nov 2022 19:07:11 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/aggregate/</guid>
      
      <description>An aggregate operation computes a single value from a collection.
Methods Aggregate Aggregate&amp;lt;T1&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, T, T&amp;gt; function)
Performs an operation on the first two elements in the collection. It takes that result and performs an operation on the next element… …and so on for all elements. var nums = new[]{1,2,3,4}; var sum = nums.Aggregate( (a,b) =&amp;gt; a + b); Console.WriteLine(sum); // output: 10 (1+2+3+4) Aggregate&amp;lt;T1&amp;gt;(this IEnumerable&amp;lt;T1&amp;gt; source, T2 seed, Func&amp;lt;T2, T1, T2&amp;gt; function)</description>
      
    </item>
    
    <item>
      <title>concatenation</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/concatenation/</link>
      <pubDate>Sun, 13 Nov 2022 19:06:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/concatenation/</guid>
      
      <description>A concatenation operation appends one sequence to another.
Methods
Method Description Query syntax Concat Concatenates one sequence to another N/A </description>
      
    </item>
    
    <item>
      <title>convert</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/convert/</link>
      <pubDate>Sun, 13 Nov 2022 18:58:51 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/convert/</guid>
      
      <description>Convert methods change the type of objects.
Methods As* methods change the static type of the collection but do not enumerate it.
To* methods enumerate the collection and put the items into a different collection type.
Methods Description Query expression AsEnumerable Returns the input typed as IEnumerable N/A AsQueryable Converts an IEnumerable to IQueryable N/A Cast Casts the elements of a collection to a new type from var in words OfType Selects values depending on their ability to be cast to the specified type N/A ToArray Convert a collection to an array (forces query execution) N/A ToDictionary Puts elements into a Dictionary&amp;lt;TKey, TValue&amp;gt; based on a key-selector function (forces query execution) N/A ToList Convert a collection to a List&amp;lt;T&amp;gt; (forces query execution) N/A ToLookup Puts elements into a Lookup&amp;lt;TKey, TValue&amp;gt; based on a key-selector function (forces query execution) N/A </description>
      
    </item>
    
    <item>
      <title>element operations</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/element-operations/</link>
      <pubDate>Thu, 10 Nov 2022 20:58:21 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/element-operations/</guid>
      
      <description>Element operations return a single, specific element from a sequence.
Methods Method Description Query expression ElementAt(OrDefault) Returns the element at the specified index N/A First(OrDefault) Returns the first element of a collection, or the first element that satisfies a condition N/A Last(OrDefault) Returns the last element of a collection, or the last element that satisfies a condition N/A Single(OrDefault) Returns the only element of a collection that satisfies a condition. Throws InvalidOperationException if no such element or more than one such element.</description>
      
    </item>
    
    <item>
      <title>equality</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/equality/</link>
      <pubDate>Thu, 10 Nov 2022 20:49:03 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/equality/</guid>
      
      <description>Two sequences, whose pair-wise elements are equal, and which have the same number of such elements, are equal.
NOTE: This method uses equality (reference equality), not equivalence (value equality) unless an IEqualityComparer&amp;lt;T&amp;gt; is used.
Methods Method Description Query expression SequenceEqual Determines whether two sequences are equal by comparing elements in a pair-wise manner N/A Examples Pet pet1 = new Pet { Name = &amp;#34;Turbo&amp;#34;, Age = 2 }; Pet pet2 = new Pet { Name = &amp;#34;Peanut&amp;#34;, Age = 8 }; List&amp;lt;Pet&amp;gt; pets1 = new List&amp;lt;Pet&amp;gt; { pet1, pet2 }; List&amp;lt;Pet&amp;gt; pets2 = new List&amp;lt;Pet&amp;gt; { pet1, pet2 }; bool equal = pets1.</description>
      
    </item>
    
    <item>
      <title>generate</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/generate/</link>
      <pubDate>Thu, 10 Nov 2022 20:42:58 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/generate/</guid>
      
      <description>A generate operation creates a new sequence of values.
Methods Method Description Query expression DefaultIfEmpty Replace an empty collection with a default-valued singleton collection N/A Empty Return an empty collection N/A Range Generate a collection that contains a sequence of numbers N/A Repeat Generate a collection that contains one value repeated n times N/A Examples IEnumerable&amp;lt;int&amp;gt; squares = Enumerable.Range(1, 10).Select(x =&amp;gt; x * x); squares.ForEach(i =&amp;gt; Console.WriteLine(i)); // Output: 1 4 9 16 25 36 49 64 81 100 </description>
      
    </item>
    
    <item>
      <title>group</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/group/</link>
      <pubDate>Thu, 10 Nov 2022 20:15:40 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/group/</guid>
      
      <description>A group operation puts data into groups such that the elements in each group share a common attribute.
Methods Method Description Query expression GroupBy Groups elements that share a common attribute. Groups are represented by an IGrouping&amp;lt;TKey,TElement&amp;gt;. group … by ToLookup Inserts elements into a Lookup&amp;lt;TKey, TElement&amp;gt; based on a key-selector function. A Lookup is a one-to-many dictionary. N/A Examples Query Expression List&amp;lt;int&amp;gt; numbers = new List&amp;lt;int&amp;gt;() { 35, 44, 200, 84, 3987, 4, 199, 329, 446, 208 }; IEnumerable&amp;lt;IGrouping&amp;lt;int, int&amp;gt;&amp;gt; query = from number in numbers group number by number % 2; foreach (var group in query) if (group.</description>
      
    </item>
    
    <item>
      <title>join</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/join/</link>
      <pubDate>Thu, 10 Nov 2022 20:06:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/join/</guid>
      
      <description>A jon operation is the association of objects in one data source with objects that share a common attribute in another data source.
Join operations target data sources whose relationships to each other cannot be followed directly.
Join Type In LINQ, Join implements an inner join.
GroupJoin has no direct equivalent in relational database terms.
It implements a superset of inner joins and outer joins.
Methods Method Description Query expression Join Join two sequences based on key-selector functions and extract pairs of values.</description>
      
    </item>
    
    <item>
      <title>partition</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/partition/</link>
      <pubDate>Tue, 08 Nov 2022 21:36:23 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/partition/</guid>
      
      <description>A partitioning operation divides an input set into two sections, without rearranging the elements, and then returning one of the sections.
Methods Method Description Query expression Skip Skips elements up to a specified position in the collection N/A SkipWhile Skips elements based on a predicate function until an element does not satisfy the condition N/A Take Takes elements up to a specified position in a collection N/A TakeWhile … N/A Chunk Splits elements of a collection into chunks of a specified maximum size N/A </description>
      
    </item>
    
    <item>
      <title>project</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/project/</link>
      <pubDate>Tue, 08 Nov 2022 21:06:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/project/</guid>
      
      <description>A projection operation transforms an object into a new form that often consists only of those properties that will be subsequently used.
Methods Method Description Query expression Select Project values that are based on a transform function select SelectMany Project sequences of values that are based on a transform function and then flatten them into one sequence Multiple from clauses Zip Produce a sequence of tuples with elements from 2-3 sequences N/A Notes The output sequence of a zip operation is never longer in length than the shortest input sequence.</description>
      
    </item>
    
    <item>
      <title>quantify</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/quantify/</link>
      <pubDate>Tue, 08 Nov 2022 21:02:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/quantify/</guid>
      
      <description>A quantifying operation return Boolean for whether some or all of the elements in a set satisfy a condition.
Methods Method Description Query expression All Bool whether all elements in a collection satisfy a condition N/A Any Bool whether any elements in a collection satisfy a condition N/A Contains Bool whether a collection contains a specified element N/A </description>
      
    </item>
    
    <item>
      <title>filter</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/filter/</link>
      <pubDate>Tue, 08 Nov 2022 20:55:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/filter/</guid>
      
      <description>A filtering operation restricts the result set to contain only those elements that satisfy a specified condition.
Methods
Method Description Query expression OfType Selects values depending on their ability to be cast to the specified type N/A Where Selects values based on a predicate function N/A Example
string[] words = { &amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;jumps&amp;#34; }; words.Where(w =&amp;gt; w.Length == 3); </description>
      
    </item>
    
    <item>
      <title>set operations</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/set-operations/</link>
      <pubDate>Tue, 08 Nov 2022 20:37:38 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/set-operations/</guid>
      
      <description>Set operations are query operations that produce a result set that is based on the presence or absence of equivalent elements within the same or separate sets.
Methods Method Description Query expression Distinct(By) Removes duplicate values from a collection N/A Except(By) Returns the elements of one collection that do not appear in the other N/A Intersect(By) Elements that appear in each of two collections N/A Union(By) Unique elements that appear in either of two collections N/A The *By methods take a keySelector which is used as the comparative discriminator of the source type.</description>
      
    </item>
    
    <item>
      <title>sort</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/sort/</link>
      <pubDate>Mon, 07 Nov 2022 21:31:15 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/sort/</guid>
      
      <description>A sorting operation orders the elements of a sequence based on one or more attributes.
Methods Method Description Query expression OrderBy Sort values in ascending order orderby ThenBy Perform a secondary sort in ascending order orderby …, … Reverse Reverse the order of the elements N/A Query Expression Sort Ascending string[] words = { &amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;jumped&amp;#34;, &amp;#34;over&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;lazy&amp;#34;, &amp;#34;dog&amp;#34; }; var query = from word in words orderby word.</description>
      
    </item>
    
    <item>
      <title>standard query operators</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/standard-query-operators/</link>
      <pubDate>Sun, 06 Nov 2022 09:37:07 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/standard-query-operators/standard-query-operators/</guid>
      
      <description>Overview The standard query operators are extension methods of IEnumerable&amp;lt;T&amp;gt; or IQueryable&amp;lt;T&amp;gt;. They are the static methods of the Enumerable and Queryable classes.
Manner of Execution Standard Query Operator methods can execute in immediate or deferred manner.
If deferred, in streaming or non-streaming forms.
Deferred Queries A deferred query fetches the updated data from the data source each time query results are iterated. A deferred query can be forced to execute immediately with Enumerable.</description>
      
    </item>
    
    <item>
      <title>query operators</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/overview/query-operators/</link>
      <pubDate>Sat, 05 Nov 2022 22:15:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/overview/query-operators/</guid>
      
      <description>Query Operations LINQ queries can be filtered, sorted (ordered), grouped, joined, and selected:
Filtering &amp;amp; Sorting (Ordering) var queryA = from cust in customers where cust.City == &amp;#34;London&amp;#34; // this is the *filter* orderby cust.Name ascending // this is the *sorter* select cust; Grouping The group clause results in queryG being typed IEnumerable&amp;lt;IGrouping&amp;lt;string, Customer&amp;gt;&amp;gt;.
Each group itself contains a key and a sequence that consists of all members of that group:</description>
      
    </item>
    
    <item>
      <title>data transformations</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/overview/data-transformations/</link>
      <pubDate>Sat, 05 Nov 2022 22:14:36 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/overview/data-transformations/</guid>
      
      <description>Data Transformations LINQ can transform data. It can use a source sequence as input, modify it, and create a new output sequence.
Join Multiple Inputs into One Output Sequence Assume:
class Student(string First, string Last, int ID, string Street, string City, List&amp;lt;int&amp;gt; Scores) class Teacher(string First, string Last, int ID, string City) List&amp;lt;Student&amp;gt; students = new() { … }; List&amp;lt;Teacher&amp;gt; teachers = new() { … }; string peopleInDenver = ( from student in students where student.</description>
      
    </item>
    
    <item>
      <title>queries</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/overview/queries/</link>
      <pubDate>Sat, 05 Nov 2022 21:40:53 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/overview/queries/</guid>
      
      <description>Query A query is an expression that specifies what information to retrieve from a data source. Optionally, it also specifies how the resulting data should be sorted, grouped, and shaped when returned.
A query and the results it produces are distinct.
A query is stored in a query variable and initialized with a query expression.
3 Parts of a Query Operation&amp;lt; int[] numbers = new int[7] { 0, 1, 2, 3, 4, 5, 6 }; // (1) Obtain the data source // The *query expression* in *query syntax*: IEnumerable&amp;lt;int&amp;gt; numQuery = // (2) Create the query and store it in the *query variable* (`numQuery`) from num in numbers // Must begin with `from` where (num % 2) == 0 select num; // Must end with `select` or `group` foreach (int num in numQuery) { // (3) Execute the query (data retrieved here) Console.</description>
      
    </item>
    
    <item>
      <title>ref structs</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/ref-structs/</link>
      <pubDate>Thu, 03 Nov 2022 20:34:52 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/ref-structs/</guid>
      
      <description>ref Structs Instances of a ref struct are allocated on the stack and cannot escape to the managed heap.
Restrictions:
A ref struct cannot implement interfaces A ref struct cannot be a type argument A ref struct variable cannot be captured via lambda expression or local function A ref struct variable cannot be used in an async method (but can be used in a synchronous method that return Task/Task&amp;lt;T&amp;gt;) Disposable A ref struct can be made disposable: create an instance or extension Dispose method that is accessible, parameterless, and returns void.</description>
      
    </item>
    
    <item>
      <title>class vs struct vs record</title>
      <link>http://localhost:1313/wieserpedia/_net/types/class-vs-struct-vs-record/</link>
      <pubDate>Thu, 03 Nov 2022 18:41:48 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/class-vs-struct-vs-record/</guid>
      
      <description> Type / Feature Memory Semantics Mutability Equality Class heap reference mutable reference Record heap reference immutable value Struct stack value mutable value (inefficient) </description>
      
    </item>
    
    <item>
      <title>communitytoolkit</title>
      <link>http://localhost:1313/wieserpedia/_net/toolkits/communitytoolkit/</link>
      <pubDate>Sun, 23 Oct 2022 20:55:20 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/toolkits/communitytoolkit/</guid>
      
      <description>.NET Community Toolkit https://learn.microsoft.com/en-us/dotnet/communitytoolkit/
A collection of helpers and APIs; UI platform agnostic Includes the MVVM Toolkit which was formerly a separate toolkit CommunityToolkit.Mvvm (formerly &amp;ldquo;Microsoft MVVM Toolkit&amp;rdquo;) — platform-agnostic MVVM library
CommunityToolkit.Diagnostics — helper APIs for argument validation and error checking.
CommunityToolkit.HighPerformance
Windows Community Toolkit Helpers, extensions, and custom controls for UWP apps on Windows 10/11 .NET Community Toolkit was historically part of Windows Community Toolkit .NET MAUI Community Toolkit Reusable elements for .</description>
      
    </item>
    
    <item>
      <title>cloning</title>
      <link>http://localhost:1313/wieserpedia/cli/git/cloning/</link>
      <pubDate>Sun, 23 Oct 2022 16:10:04 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/cloning/</guid>
      
      <description>Cloning a Repository git clone &amp;lt;url&amp;gt; &amp;lt;directory&amp;gt; – executes md directory &amp;gt; cd directory &amp;gt; git init &amp;gt; git remote add &amp;gt; git fetch &amp;gt; git checkout
sets local master branch to track remote master branch Cloning with Other Credentials In the URL, add the username: https://username@github.com/username/repository.git</description>
      
    </item>
    
    <item>
      <title>status</title>
      <link>http://localhost:1313/wieserpedia/cli/git/status/</link>
      <pubDate>Sun, 23 Oct 2022 16:09:14 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/status/</guid>
      
      <description>Viewing File Status git status [--short] – returns the state of files in the repository and branch</description>
      
    </item>
    
    <item>
      <title>commit</title>
      <link>http://localhost:1313/wieserpedia/cli/git/commit/</link>
      <pubDate>Sun, 23 Oct 2022 16:07:37 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/commit/</guid>
      
      <description>Committing Changes Each commit is a snapshot of a project that can be reverted to later.
git commit – commits changes and launches text editor to get a commit message git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot; – commits changes and logs the commit with git commit -a -m &amp;quot;&amp;lt;msg&amp;gt;&amp;quot; – adds (stages) every file that is already tracked; commits; logs with </description>
      
    </item>
    
    <item>
      <title>gitignore</title>
      <link>http://localhost:1313/wieserpedia/cli/git/gitignore/</link>
      <pubDate>Sun, 23 Oct 2022 16:07:20 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/gitignore/</guid>
      
      <description>Overview gitignore files specify intentional untracked files that Git should ignore.
Order of Precedence Patterns from the command line Patterns from .gitignore file in same directory Patterns from .gitignore file in parent directories up to the top level of the working tree Patterns from $GIT_DIR/info/exclude Patterns from the file specified by core.excludesFile Pattern Format # for comments
\ for escapes
/ as the directory separator char
/ at the end of a pattern matches directories only !</description>
      
    </item>
    
    <item>
      <title>merging</title>
      <link>http://localhost:1313/wieserpedia/cli/git/merging/</link>
      <pubDate>Sun, 23 Oct 2022 16:07:02 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/merging/</guid>
      
      <description>Merging Branches git merge &amp;lt;branch&amp;gt; merge branch into the current branch
Managing Merge Conflicts View conflicts with git status. After resolving conflicts, run git add on each file to stage it, which marks it resolved in git. Use git mergetool for a GUI tool to resolve merge conflicts. </description>
      
    </item>
    
    <item>
      <title>diffs</title>
      <link>http://localhost:1313/wieserpedia/cli/git/diffs/</link>
      <pubDate>Sun, 23 Oct 2022 16:06:17 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/diffs/</guid>
      
      <description>Viewing Staged and Unstaged Changes git diff – compare working directory to staging git diff --staged – compare staging to last commit git difftool[--tool-help] – use a GUI tool to compare changes</description>
      
    </item>
    
    <item>
      <title>add remove rename</title>
      <link>http://localhost:1313/wieserpedia/cli/git/add-remove-rename/</link>
      <pubDate>Sun, 23 Oct 2022 16:06:02 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/add-remove-rename/</guid>
      
      <description>Add Files git add path # adds path to Staging Removing Files From Tracking and Working Directory git rm --cached &amp;lt;file&amp;gt; # untrack file; ADD FOLDER TO .gitignore FIRST git rm -r --cached &amp;lt;folder&amp;gt; # untrack folder; ADD FOLDER TO .gitignore FIRST git rm &amp;lt;file&amp;gt; # delete and untrack &amp;lt;file&amp;gt;; at next commit, file will be removed and no longer tracked Moving/Renaming Files git mv &amp;lt;from&amp;gt; &amp;lt;to&amp;gt; </description>
      
    </item>
    
    <item>
      <title>logs</title>
      <link>http://localhost:1313/wieserpedia/cli/git/logs/</link>
      <pubDate>Sun, 23 Oct 2022 16:05:41 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/logs/</guid>
      
      <description>Logs git log – return commits made in this repository git log vX.X..vY.Y | helper-script &amp;gt; changelogs/Y.Y
generate changelogs see also: https://github.com/github-changelog-generator/github-changelog-generator see also: https://pypi.org/project/gitchangelog/ git log &amp;lt;branch&amp;gt; – return commits of branch --all – return commits of all branches -&amp;lt;n&amp;gt; – return only the last n entries --after &amp;lt;date&amp;gt; – only return results after ; format of is either YYY-MM-DD or relative --before &amp;lt;date&amp;gt; – only return results before --all – return commit history for all branches --decorate – return where the branch pointers are pointing --follow – list version history for a file, including renames --graph – return an ASCII graph depicting branch and merge history --no-merges – do not return merge commits --pretty – return pretty-printed results --pretty=oneline – return each commit on a single line.</description>
      
    </item>
    
    <item>
      <title>tagging</title>
      <link>http://localhost:1313/wieserpedia/cli/git/tagging/</link>
      <pubDate>Sun, 23 Oct 2022 16:05:23 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/tagging/</guid>
      
      <description>Tagging Tags apply to commits.
git tag --list – return existing tags git tag -a &amp;lt;tag&amp;gt; -m &amp;quot;&amp;lt;msg&amp;gt;&amp;quot; – create annotated tag named for pending commit with tagging message git show &amp;lt;tag&amp;gt; – return information on git tag -a &amp;lt;tag&amp;gt; [checksum] – tag commit [checksum] as after the fact; [checksum] can be partial git push &amp;lt;remote&amp;gt; &amp;lt;tag&amp;gt; – push to git push &amp;lt;remote&amp;gt; --tags – push all tags to git tag -d &amp;lt;tag&amp;gt; – delete from local repository git push &amp;lt;remote&amp;gt; --delete &amp;lt;tag&amp;gt; – delete from repository</description>
      
    </item>
    
    <item>
      <title>remotes</title>
      <link>http://localhost:1313/wieserpedia/cli/git/remotes/</link>
      <pubDate>Sun, 23 Oct 2022 16:05:11 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/remotes/</guid>
      
      <description>Remote Repositories git fetch &amp;lt;remote&amp;gt; – retrieve all data from remote repository since last fetch (or clone) does not modify working directory; requires merging git fetch --all – fetch from all remotes git pull – executes fetch &amp;gt; merge git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt; – push to repository git remote -v – return remote repositories, their shortnames, and URLs git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt; – add a new Git remote repository git remote show &amp;lt;remote&amp;gt; – return information about repository, including if you&amp;rsquo;re up-to-date.</description>
      
    </item>
    
    <item>
      <title>undoing changes</title>
      <link>http://localhost:1313/wieserpedia/cli/git/undoing-changes/</link>
      <pubDate>Sun, 23 Oct 2022 16:04:59 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/undoing-changes/</guid>
      
      <description>Exploring Previous Commits Review Commit History git log -n --oneline — review the previous n commits git log --branches=* — view all commits across all branches git branch -a — return a list of all known branches Access a Previous Commit Use git checkout COMMIT-ID to load a previous commit.
Normally, HEAD points to main or some other local branch. When checking out a previous commit, HEAD no longer points to a branch; it is detached.</description>
      
    </item>
    
    <item>
      <title>help</title>
      <link>http://localhost:1313/wieserpedia/cli/git/help/</link>
      <pubDate>Sun, 23 Oct 2022 16:04:18 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/help/</guid>
      
      <description>Getting Help git help &amp;lt;verb&amp;gt; – get manpage-level help on git &amp;lt;verb&amp;gt; --help – get manpage-level help on man git-&amp;lt;verb&amp;gt; – get manpage-level help on git &amp;lt;verb&amp;gt; -h – get concise help on </description>
      
    </item>
    
    <item>
      <title>updating git</title>
      <link>http://localhost:1313/wieserpedia/cli/git/updating-git/</link>
      <pubDate>Sun, 23 Oct 2022 16:04:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/updating-git/</guid>
      
      <description>Upgrading git update-git-for-windows</description>
      
    </item>
    
    <item>
      <title>configuration</title>
      <link>http://localhost:1313/wieserpedia/cli/git/configuration/</link>
      <pubDate>Sun, 23 Oct 2022 09:52:51 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/configuration/</guid>
      
      <description>Configuration Config Files /etc/git/gitconfig or C:\Program Files\Git\etc\gitconfig — config for all users on the system (--system) ~/.git — config for all repositories of the current user (--global) ~ is $HOME on Windows .git/ — config for this repository only (--local (default)) Configuration Commands git config [scope] &amp;lt;key&amp;gt; &amp;lt;value&amp;gt; set configuration &amp;lt;key&amp;gt; to &amp;lt;value&amp;gt; Checking Configuration git config --list — list all configuration settings Git can find Note: Git uses the last value for each unique key it sees git config &amp;lt;key&amp;gt; return the value of &amp;lt;key&amp;gt; git config --show-origin &amp;lt;key&amp;gt; return the origin (configuration file) of &amp;lt;key&amp;gt; and its value One-Time Config git config --global user.</description>
      
    </item>
    
    <item>
      <title>boxing and unboxing</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/boxing-and-unboxing/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/boxing-and-unboxing/</guid>
      
      <description>Overview Boxing &amp;amp; Unboxing are performed by the CLR because it uses the Unified Type System in which a value of any type is treated an object.
Boxing Converting a value type (struct, enum, numeric types, floats, bool, char) to object (or an interface type implemented by this value). The CLR &amp;ldquo;boxes&amp;rdquo; the value inside an object and stores it on the heap. A new object is allocated, constructed, and stored.</description>
      
    </item>
    
    <item>
      <title>platform lifecycle</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-lifecycle/platform-lifecycle/</link>
      <pubDate>Sun, 09 Oct 2022 19:43:58 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-lifecycle/platform-lifecycle/</guid>
      
      <description>Platform Lifecycle Events Namespace: Microsoft.Maui.LifecycleEvents
.NET MAUI uses delegates that are invoked in response to a platform lifecycle event being raised. You can create handlers for these delegates. Android Each delegate has an identically named extension method used to register a handler for that delegate.
Responding to Android Lifecycle Delegates Call ConfigureLifecycleEvents method on MauiAppBuilder object in CreateMauiApp method of MauiProgram class:
using Microsoft.Maui.LifecycleEvents; namespace PlatformLifecycleDemo { public static class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.</description>
      
    </item>
    
    <item>
      <title>app components</title>
      <link>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-components/</link>
      <pubDate>Fri, 02 Sep 2022 12:24:49 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/user-interfaces/maui/app-components/</guid>
      
      <description>Application Class The App class is instantiated and loaded by the boostrap code for each platform. It is the model of the application as a whole. Inherits default behaviors from Microsoft.Maui.Controls.Application. Creates an instance of AppShell and assigns it to the MainPage property. Handles lifecycle events (like when the app is sent to the background). AppShell Class An AppShell:
Describes the hierarchy of an app Provides a common navigation experience via URIs Includes an integrated search handler An AppShell derives from the Shell class and contains three main hierarchical objects:</description>
      
    </item>
    
    <item>
      <title>3 types example</title>
      <link>http://localhost:1313/wieserpedia/_net/dependency-injection/3-types-example/</link>
      <pubDate>Fri, 26 Aug 2022 07:37:34 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/dependency-injection/3-types-example/</guid>
      
      <description>3 Types of Dependency Injection:
Constructor Injection – Injector class supplies the Service (dependency) through the Client class constructor. Property Injection – Injector class supplies the Service through a public property of the Client class. Method Injection – Client class implements an interface which declares the methods to supply the Service (dependency); Injector uses this interface to supply the Service to the Client class. interface IService { void Serve(); } public class Service1 : IService { public void Serve() =&amp;gt; &amp;#34;Service1 is running.</description>
      
    </item>
    
    <item>
      <title>another example</title>
      <link>http://localhost:1313/wieserpedia/_net/dependency-injection/another-example/</link>
      <pubDate>Fri, 26 Aug 2022 07:36:43 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/dependency-injection/another-example/</guid>
      
      <description>Using DI, we move the creation and binding of dependent objects outside of the class that depends on them. It involves 3 classes: (1) Client class – class which depends on the Service. (2) Service class – class that provides the Service that the Client class depends on. (3) Injector class – creates a Service class object and injects it into the Client object.
Non-DI Example public interface ICustomerDataAccess { string GetCustomerName(int id); } public class CustomerDataAccess: ICustomerDataAccess { public CustomerDataAccess() { } public string GetCustomerName(int id) =&amp;gt; &amp;#34;Dummy Customer Name&amp;#34;; } public class DataAccessFactory { public static ICustomerDataAccess GetCustomerDataAccessObj() =&amp;gt; new CustomerDataAccess(); } public class CustomerBusinessLogic { ICustomerDataAccess _custDataAccess; public CustomerBusinessLogic() { // DataAccessFactory is used here.</description>
      
    </item>
    
    <item>
      <title>microsoft&#39;s example</title>
      <link>http://localhost:1313/wieserpedia/_net/dependency-injection/microsofts-example/</link>
      <pubDate>Fri, 26 Aug 2022 07:34:23 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/dependency-injection/microsofts-example/</guid>
      
      <description>Dependent Service Implementation Example public class MessageWriter { public void WriteMessage(string message) =&amp;gt; Console.WriteLine($&amp;#34;MessageWriter.WriteMessage called. Message: {message}&amp;#34;); } If a class creates an instance of MessageWriter then, MessageWriter becomes a dependency of that class:
public class Worker : BackgroundService { private readonly MessageWriter _messageWriter = new MessageWriter(); protected override async Task ExecuteAsync(CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { _messageWriter.Write($&amp;#34;Worker running at: {DateTimeOffset.Now}&amp;#34;); await Task.Delay(1000, stoppingToken); } } } Worker creates, and directly depends on, MessageWriter.</description>
      
    </item>
    
    <item>
      <title>implementation</title>
      <link>http://localhost:1313/wieserpedia/_net/configuration/implementation/</link>
      <pubDate>Tue, 23 Aug 2022 17:15:19 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/configuration/implementation/</guid>
      
      <description>Example Install packages:
dotnet add package Microsoft.Extensions.Configuration.Json dotnet add package Microsoft.Extensions.Configuration.Binder dotnet add package Microsoft.Extensions.Configuration.EnvironmentVariables # Only if using environment variables. Assuming this appsettings.json file:
{ &amp;#34;Settings&amp;#34;: { &amp;#34;KeyOne&amp;#34;: 1, &amp;#34;KeyTwo&amp;#34;: true, &amp;#34;KeyThree&amp;#34;: { &amp;#34;Message&amp;#34;: &amp;#34;Oh, that&amp;#39;s nice...&amp;#34; } } } Set the file properties:
Build action = Content Copy to Output Directory = Copy always or Copy if newer // Assuming this code for settings object:
public class Settings { public int KeyOne { get; set; } public bool KeyTwo { get; set; } public NestedSettings KeyThree { get; set; } = null!</description>
      
    </item>
    
    <item>
      <title>example</title>
      <link>http://localhost:1313/wieserpedia/_net/dependency-injection/example/</link>
      <pubDate>Tue, 23 Aug 2022 16:03:38 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/dependency-injection/example/</guid>
      
      <description>Dependency Injection with Generic Host &amp;amp; Default HostBuilder Example With a Hosted Service public class Program { public static async Task Main(string[] args) { await Host.CreateDefaultBuilder(args) // Set the ContentRoot to the path of the executing assembly: .UseContentRoot(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)) .ConfigureServices((hostContext, services) =&amp;gt; { services .AddHostedService&amp;lt;ConsoleService&amp;gt;(); // IHostedService has full access to the DI container: .AddSingleton&amp;lt;IWeatherService, WeatherService&amp;gt;(); services.AddOptions&amp;lt;WeatherSettings&amp;gt;() .Bind(hostContext.Configuration.GetSection(&amp;#34;Weather&amp;#34;)); }) .RunConsoleAsync(); } } internal sealed class ConsoleHostedService : IHostedService { private int? _exitCode; private readonly ILogger _logger; private readonly IHostApplicationLifetime _appLifetime; private readonly IWeatherService _weatherService; public ConsoleHostedService( ILogger&amp;lt;ConsoleHostedService&amp;gt; logger, IHostApplicationLifetime appLifetime, IWeatherService weatherService) { _logger = logger; _appLifetime = appLifetime; _weatherService = weatherService; } public Task StartAsync(CancellationToken cancellationToken) { _appLifetime.</description>
      
    </item>
    
    <item>
      <title>idempotent functions</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/principles/idempotent-functions/</link>
      <pubDate>Tue, 23 Aug 2022 08:58:15 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/principles/idempotent-functions/</guid>
      
      <description>Pure functions are idempotent.
Idempotent — Always producing identical output for identical input, even when called repeatedly.
Examples:
Changing a person&amp;rsquo;s address in a database. HTTP GET, PUT, DELETE. </description>
      
    </item>
    
    <item>
      <title>ihttpclientfactory</title>
      <link>http://localhost:1313/wieserpedia/_net/web/http/ihttpclientfactory/</link>
      <pubDate>Fri, 22 Jul 2022 09:36:06 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/http/ihttpclientfactory/</guid>
      
      <description>Problems with HttpClient HttpClient implements IDisposable, but when the object gets disposed of, the underlying socket is not immediately released. This can lead to socket exhaustion. When using a shared instances of HttpClient in long-running processes, the if instantiated as a singleton or static object, HttpClient will fail to handle DNS changes. Overview IHttpClientFactory offers these benefits:
Supports DI. Injected HttpClient instances are Scoped. A central location for naming and configuring HttpClient objects.</description>
      
    </item>
    
    <item>
      <title>patterns</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/patterns/</link>
      <pubDate>Thu, 21 Jul 2022 08:27:56 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/patterns/</guid>
      
      <description>Delegates support minimal coupling between components.
Example with LINQ Where Method The Where method uses a delegate that determines which elements of a sequence pass the filter:
// Numbers where, for each number n, n is less than 10: var smallNumbers = numbers.Where(n =&amp;gt; n &amp;lt; 10); The prototype for Where:
public static IEnumerable&amp;lt;TSource&amp;gt; Where&amp;lt;TSource&amp;gt; (this IEnumerable&amp;lt;TSource&amp;gt; source, Func&amp;lt;TSource, bool&amp;gt; predicate); Loose coupling is achieved because:
There is no need to implement an interface There is no need to derive from a base class Example by Building a Logger Delegate public static class Logger { public static Action&amp;lt;string&amp;gt; WriteMessage; public static void LogMessage(string msg) { // The compiler generates an `Invoke` method for any delegate type declared.</description>
      
    </item>
    
    <item>
      <title>windows services</title>
      <link>http://localhost:1313/wieserpedia/_net/services/windows-services/</link>
      <pubDate>Mon, 27 Jun 2022 10:01:47 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/services/windows-services/</guid>
      
      <description>https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service</description>
      
    </item>
    
    <item>
      <title>worker services</title>
      <link>http://localhost:1313/wieserpedia/_net/services/worker-services/</link>
      <pubDate>Mon, 27 Jun 2022 08:19:08 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/services/worker-services/</guid>
      
      <description>Terminology Background Service – the BackgroundService type. Hosted Service – an implementation of IHostedService, or IHostedService itself. Worker Service – the Worker Service template from dotnet new. BackgroundService An implementation of IHostedService. Used for long-running, background processes. Cross-platform. Can be used in place of a Windows Service. Worker Service dotnet new worker produces:
Program.cs:
using SomeNamespace; // Create the default IHostBuilder: IHost host = Host.CreateDefaultBuilder(args).ConfigureServices(services =&amp;gt; { // Add the Worker class as a hosted service: services.</description>
      
    </item>
    
    <item>
      <title>generic host</title>
      <link>http://localhost:1313/wieserpedia/_net/generic-host/</link>
      <pubDate>Sun, 26 Jun 2022 19:15:58 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/generic-host/</guid>
      
      <description>Generic Host A host is an object that encapsulates an app&amp;rsquo;s resources and lifetime functionality. This allows for control over the app&amp;rsquo;s startup and graceful shutdown.
Examples: Dependency Injection, Logging, Configuration, IHostedService implementations Generic Host is represented by the HostBuilder type.
Namespace: Microsoft.Extensions.Hosting Documentation: https://docs.microsoft.com/en-us/dotnet/core/extensions/generic-host Process When a host starts, it calls IHostedService.StartAsync on each implementation of IHostedService registered in the service container&amp;rsquo;s collection of hosted services. If the implementation is a worker service, it calls BackgroundService.</description>
      
    </item>
    
    <item>
      <title>ad</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/modules/ad/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/modules/ad/</guid>
      
      <description>Overview [Documentation] Module: ActiveDirectory
The Active Directory module requires RSAT tools for Windows.
Manage User Accounts Locked Accounts Find locked user accounts:
Search-AdAccount -LockedOut Unlock user accounts:
Unlock-ADAccount -Identity &amp;#39;lockeduser&amp;#39; Or, both in one command:
Search-ADAccount -LockedOut | Unlock-ADAccount Find the Source of Locked Accounts Find the Domain Controller with the PDCe role:
$pdce = Get-ADDomain.PDCEmulator Check the Event Log for lockouts (ID 4740):
$filter = @{&amp;#39;LogName&amp;#39; = &amp;#39;Security&amp;#39;;&amp;#39;Id&amp;#39; = 4740} $events = Get-WinEvent -ComputerName $pdce -FilterHashTable $filter $events | Select-Object @{&amp;#39;Name&amp;#39; =&amp;#39;UserName&amp;#39;; Expression={$_.</description>
      
    </item>
    
    <item>
      <title>wsdl</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/protocols/wsdl/</link>
      <pubDate>Tue, 21 Jun 2022 14:10:55 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/protocols/wsdl/</guid>
      
      <description>WSDL – Web Service Description Language Describes the functionality of a SOAP-based web service.
WSDL elements &amp;lt;types&amp;gt; - The XML schema data types used by the web service. &amp;lt;message&amp;gt; - The data elements for each operation. &amp;lt;portType&amp;gt; - Defines a web service, its operations, and messages involved. &amp;lt;binding&amp;gt; - The protocol and data format for each port type. WSDL skeleton example &amp;lt;definitions&amp;gt; &amp;lt;types&amp;gt; data type definitions........ &amp;lt;/types&amp;gt; &amp;lt;message&amp;gt; definition of the data being communicated.</description>
      
    </item>
    
    <item>
      <title>azure ad</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/modules/azure-ad/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/modules/azure-ad/</guid>
      
      <description>Importing Must use Windows PowerShell (not PowerShell 7)
Import-Module AzureAd -UseWindowsPowerShell Connecting Connect-AzureAD Get a List of Groups of Which User is a Member Get-AzureADUser -SearchString hanawayc@gejohnson.com | Get-AzureADUserMembership | % {Get-AzureADObjectByObjectId -ObjectId $_.ObjectId | select DisplayName,ObjectType,MailEnabled,SecurityEnabled,ObjectId} | Format-Table Get a List of groups of Which User is an Owner Get-AzureADUser -SearchString user@example.com | Get-AzureADUserOwnedObject AzureAD POSH module is deprecated in favor of MS Graph.</description>
      
    </item>
    
    <item>
      <title>exchange online management</title>
      <link>http://localhost:1313/wieserpedia/cli/powershell/modules/exchange-online-management/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/powershell/modules/exchange-online-management/</guid>
      
      <description>Install-Module -Name ExchangeOnlineManagement -Force Update-Module -Name ExchangeOnlineManagement Import-Module ExchangeOnlineManagement Connect-ExchangeOnline -UserPrincipalName user@example.com Disconnect-ExchangeOnline -Confirm:$false </description>
      
    </item>
    
    <item>
      <title>interfaces vs abstract classes</title>
      <link>http://localhost:1313/wieserpedia/_net/types/interfaces/interfaces-vs-abstract-classes/</link>
      <pubDate>Sat, 28 May 2022 21:30:35 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/interfaces/interfaces-vs-abstract-classes/</guid>
      
      <description>Topic Interface Abstract Class Instantiable No No May contain constructor No Yes May provide default implementation Yes Yes Implementations override-able Must May Children must implement all members Yes No Multiple inheritance Yes No May contains fields No Yes (but not abstract fields) May contain static members No Yes Interfaces describe what an object can do. Abstract classes describe what an object is.
interface IPet { void Eat(); void Play(); void Sleep(); } public class Dog : IPet { public void Eat() { … } public virtual void Play() { … } public void Sleep() { … } } Virtual methods define implementations, but those implementations can be overridden in derived classes.</description>
      
    </item>
    
    <item>
      <title>msgraph</title>
      <link>http://localhost:1313/wieserpedia/web-development/msid/msgraph/</link>
      <pubDate>Wed, 11 May 2022 13:35:11 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/msid/msgraph/</guid>
      
      <description>Microsoft Graph Unified API model to access data in M365.
3 components Graph API (https://graph.microsoft.com/) Graph connectors (deliver data outside of Microsoft cloud into Graph) Graph Data Connect (deliver Graph data to Azure data stores) Primary namespace: microsoft.graph
Call a REST API Method Syntax: {HTTP method} https://graph.microsoft.com/{version}/{resource}?{query-parameters}
Example: GET https://graph.microsoft.com/%7bversion%7d/%7bresource%7d?%7bquery-parameters%7d
HTTP Methods GET, POST, PATCH, PUT, DELETE. GET and DELETE do not require a request body. POST, PATCH, PUT usually require a request body in JSON.</description>
      
    </item>
    
    <item>
      <title>shared access signatures</title>
      <link>http://localhost:1313/wieserpedia/web-development/msid/shared-access-signatures/</link>
      <pubDate>Wed, 11 May 2022 13:23:24 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/msid/shared-access-signatures/</guid>
      
      <description>Share Access Signatures A signed URI that points to one or more storage resources. Includes a token that contains a special set of query parameters.
Types of Shared Access Signatures User delegation SAS Secured with AAD credentials and also by permissions specified for the SAS. Applies to Blob storage only. Service SAS Secured with the storage account key. Applies to Blob, Queue, and Table Storage, and Azure Files. Account SAS Secured with the storage account key Applies to Blob, Queue, and Table Storage.</description>
      
    </item>
    
    <item>
      <title>msal</title>
      <link>http://localhost:1313/wieserpedia/web-development/msid/msal/</link>
      <pubDate>Tue, 10 May 2022 17:32:57 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/msid/msal/</guid>
      
      <description>MSAL – Microsoft Authentication Library Provides secure access to Graph, other Microsoft APIs, 3rd-party web APIs, or your own web API.
Authentication flows Authorization code – apps securely obtain tokens in the name of the user. Client credentials – service applications run without user interaction. On-behalf-of – App calls a service/web API which in turn calls Graph. Implicit – used in browser-based apps. Device code – sign in to a device from another device with a browser.</description>
      
    </item>
    
    <item>
      <title>microsoft identity platform</title>
      <link>http://localhost:1313/wieserpedia/web-development/msid/microsoft-identity-platform/</link>
      <pubDate>Tue, 10 May 2022 16:54:55 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/msid/microsoft-identity-platform/</guid>
      
      <description>Components OAuth 2.0 and OpenID Connect Microsoft work/school accounts via Azure AD Personal Microsoft accounts Social or local accounts via Azure AD B2C MSAL App management portal App configuration API and PowerShell Service Principals Applications must be reigstered with an Azure AD tenant. Apps can be registered in Azure portal as: Single-tenant (only your tenant) Multi-tenant (other tenants) Apps registered in Azure portal receive: App object (globally unique instance of the app) One and only one per app.</description>
      
    </item>
    
    <item>
      <title>plinq</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/plinq/</link>
      <pubDate>Mon, 09 May 2022 19:48:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/plinq/</guid>
      
      <description>PLINQ Parallel LINQ. Enable multiple threads to execute a query.
// Single-threaded: int[] fibonacciNumbers = numbers .Select(number =&amp;gt; Fibonacci(number)) .ToArray(); // Multi-threaded: int[] fibonacciNumbers = numbers .AsParallel() .Select(number =&amp;gt; Fibonacci(number)) .OrderBy(number =&amp;gt; number) // Parallel execution can cause results to become disordered. .ToArray(); </description>
      
    </item>
    
    <item>
      <title>examples</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/extension-methods/examples/</link>
      <pubDate>Sun, 08 May 2022 18:54:48 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/extension-methods/examples/</guid>
      
      <description>Where Where accepts a Func&amp;lt;string, bool&amp;gt; delegate. For each string passed to the function, it returns a bool value.
Targeting a Named Method static bool NameLongerThanFour(string name) =&amp;gt; name.length &amp;gt; 4; var query = names.Where(new Func&amp;lt;string, bool&amp;gt;(NameLongerThanFour)); Roslyn can instantiate the delegate for us so we can simplify:
var query = names.Where(NameLongerThanFour); Targeting a Lambda Expression var query = names.Where(name =&amp;gt; name.Length &amp;gt; 4); OrderBy &amp;amp; ThenBy var query = names .</description>
      
    </item>
    
    <item>
      <title>action func predicate</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/action-func-predicate/</link>
      <pubDate>Sun, 08 May 2022 17:27:26 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/action-func-predicate/</guid>
      
      <description>Built-in Delegates Built-in types Action, Func, and Predicate are special delegates that can be used without having to define a new delegate.
Action An Action delegate points to a method that has no return type.
It is used to perform an action using the arguments of the delegate.
class Program { static void Main(string[] args) { Action&amp;lt;string&amp;gt; log = new Action&amp;lt;string&amp;gt;(LogInfo); // The delegate. log.Invoke(&amp;#34;Testing 1 2 3&amp;#34;); } static void LogInfo(string message) { // The method with no return type.</description>
      
    </item>
    
    <item>
      <title>sets and bags</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/concepts/sets-and-bags/</link>
      <pubDate>Sun, 08 May 2022 17:04:09 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/concepts/sets-and-bags/</guid>
      
      <description>A set is a collection of one or more unique objects (no duplicates).
A bag is a collection of one or more objects that may have duplicates.
The union of two sets is the set which contains all the elements of both sets.
The intersection of two sets is the set which contains the common elements of both sets.
The except of two sets is the set of all elements in the first set except those also present in the second set.</description>
      
    </item>
    
    <item>
      <title>lambda expressions</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/lambda-expressions/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/lambda-expressions/</guid>
      
      <description>Lambda Expression Lambda expressions are anonymous functions.
The lambda operator =&amp;gt; (&amp;ldquo;returns&amp;rdquo;) separates a lambda&amp;rsquo;s parameter list from its body.
(x) =&amp;gt; x * x; // A lambda (anonymous method) with a parameter named x that returns x * x. Lambdas in Methods int MyFunc(int x) { return x; } …is equivalent to…
int MyFunc(int x) =&amp;gt; x; Lambdas in Anonymous Methods Func&amp;lt;int, int&amp;gt; = delegate (int x) { return x; }; …is equivalent to…</description>
      
    </item>
    
    <item>
      <title>extension methods</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/extension-methods/extension-methods/</link>
      <pubDate>Mon, 02 May 2022 07:55:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/extension-methods/extension-methods/</guid>
      
      <description>LINQ Extension Methods LINQ extension methods are static methods of Enumerable type in System.LINQ and appended to any sequence.
Sequences are types which implement IEnumerable like arrays, generic collections, etc.
Method Syntax Some queries must be expressed as a method call. Most commonly, the queries return a singleton numeric value, such as Sum, Max, Min, Average, etc:
List&amp;lt;int&amp;gt; numbers1 = new() { 5, 4, 1, 3, 9, 8, 6 }; List&amp;lt;int&amp;gt; numbers2 = new() { 15, 14, 11, 13, 19, 18, 16 }; double average = numbers1.</description>
      
    </item>
    
    <item>
      <title>generic delegates</title>
      <link>http://localhost:1313/wieserpedia/_net/types/generics/generic-delegates/</link>
      <pubDate>Thu, 28 Apr 2022 20:40:46 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/generics/generic-delegates/</guid>
      
      <description>Overview Below are generic delegates useful for manipulating arrays and lists.
Action&amp;lt;T&amp;gt; Represents a method that performs some action on an element of the specified type.
Usage:
Create a method that performs the desired action on an element Create an instance of the Action&amp;lt;T&amp;gt; delegate Pass the array and the delegate to the Array.ForEach static generic method Note: List&amp;lt;T&amp;gt; also has a ForEach method that uses an Action&amp;lt;T&amp;gt; delegate, but this method is not generic.</description>
      
    </item>
    
    <item>
      <title>subqueries</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/subqueries/</link>
      <pubDate>Wed, 27 Apr 2022 18:56:35 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/subqueries/</guid>
      
      <description>Subqueries A query clause may itself contain a query expression (a subquery). Each subquery starts with its own from clause that does not necessarily point to the same data source as the first from clause.
var queryGroupMax = from student in students // for each student in the `students` sequence… group student by student.Year into studentGroup // …group the student by `.Year` into new variable `studentGroup`. select new { Level = studentGroup.</description>
      
    </item>
    
    <item>
      <title>let clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/let-clause/</link>
      <pubDate>Wed, 27 Apr 2022 18:53:40 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/let-clause/</guid>
      
      <description>Let clause Use the let clause to store the result of an expression, such as a method call, in a new range variable (identifier).
Example 1 var studentQuery = from student in students let totalScore = studentScores[0] + student.Scores[1] + studentScores[2] + student.Scores[3] select totalScore; // The new identifer can also be selected Example 2 var studentQuery = from student in students let x = student.Scores[0] + student.Scores[1] + student.Scores[2] + student.</description>
      
    </item>
    
    <item>
      <title>join clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/join-clause/</link>
      <pubDate>Wed, 27 Apr 2022 18:45:49 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/join-clause/</guid>
      
      <description>Join clause Use join to associate and/or combine elements from one data source with elements from another based on an equality comparison between keys in each element.
After you have joined two sequences, you must use a select or group statement to specify which element to store in the output sequence.
var categoryQuery = from cat in categories // `categories` is a string array. // join `prod` objects whose `Category` property matches one of the categories in the `categories` string array: join prod in products on cat equals prod.</description>
      
    </item>
    
    <item>
      <title>orderby clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/orderby-clause/</link>
      <pubDate>Mon, 25 Apr 2022 21:09:01 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/orderby-clause/</guid>
      
      <description>Orderby clause Use the orderby clause to sort results in either ascending or descending order. You can also specify a secondary sort:
IEnumerable&amp;lt;Country&amp;gt; querySortedCountries = from country in countries orderby country.Area, country.Population descending // Sort first by Area (ascending), then Population. select country; </description>
      
    </item>
    
    <item>
      <title>where clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/where-clause/</link>
      <pubDate>Mon, 25 Apr 2022 21:06:54 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/where-clause/</guid>
      
      <description>Where clause Use the where clause to filter out elements from the data based on one or more predicate expressions:
IEnumerable&amp;lt;City&amp;gt; queryCityPop = from city in cities where city.Population &amp;lt; 200_000 &amp;amp;&amp;amp; city.Population &amp;gt; 100_000 // One predicate, two conditions. select city; </description>
      
    </item>
    
    <item>
      <title>into keyword</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/into-keyword/</link>
      <pubDate>Mon, 25 Apr 2022 21:03:34 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/into-keyword/</guid>
      
      <description>Into keyword The into keyword is used in a select or group clause to create a temporary identifier that stores a query.
Use this when you must perform additional query operations on a query after a grouping or select operation:
// percentileQuery is an IEnumerable&amp;lt;IGrouping&amp;lt;int, Country&amp;gt;&amp;gt; var percentileQuery = from country in countries let percentile = (int)country.Population / 10_000_000 // Group according to population in ranges of 10M. group country by percentile into countryGroup // countryGroup is the temporary identifier.</description>
      
    </item>
    
    <item>
      <title>select clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/select-clause/</link>
      <pubDate>Mon, 25 Apr 2022 20:59:19 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/select-clause/</guid>
      
      <description>Select clause A select clause produces all other types of sequences. A simple select clause just produces a sequence of the same type of objects as the objects in the data source:
IEnumerable&amp;lt;Country&amp;gt; sortedQuery = from country in countries orderby country.Area // Sort the elements in some new order. select country; // Produce a sequence of the reordered objects. But it can also transform (project) data into sequences of new types:</description>
      
    </item>
    
    <item>
      <title>group clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/group-clause/</link>
      <pubDate>Mon, 25 Apr 2022 20:57:23 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/group-clause/</guid>
      
      <description>Group clause The group clause produces a sequence of groups organized by a specified key. The key is specified after the by keyword.
var queryCountryGroups = from country in countries group country by country.Name[0]; // Here, country.Name[0] is the key. </description>
      
    </item>
    
    <item>
      <title>from clause</title>
      <link>http://localhost:1313/wieserpedia/_net/linq/clauses/from-clause/</link>
      <pubDate>Mon, 25 Apr 2022 20:57:19 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/linq/clauses/from-clause/</guid>
      
      <description>Multiple From Clauses Use additional from clauses when each element in the source is itself a collection or contains a collection.
IEnumerable&amp;lt;City&amp;gt; cityQuery = from country in countries // Here, countries is a collection of Country objects. from city in country.Cities // Here, Cities is a collection of City objects. where city.Population &amp;gt; 10000 select city; </description>
      
    </item>
    
    <item>
      <title>multitasking and multithreading</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/programming-models/multitasking-and-multithreading/</link>
      <pubDate>Sat, 19 Mar 2022 16:03:07 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/programming-models/multitasking-and-multithreading/</guid>
      
      <description>Multitasking In cooperative multitasking, the OS never initiates a context switch from one process to another. Processes voluntarily yield control periodically or when idle or when blocked.
In preemtive multitasking, the OS initiates context switching through interruptions based on its scheduler.
Processors Processes split themselves into multiple logical cores per physical core if they support multithreading.
Multiprocessing A system supports multiprocessing if it has multiple processors or multiple processor cores on a single integrated circuit.</description>
      
    </item>
    
    <item>
      <title>interfaces explicit implementation</title>
      <link>http://localhost:1313/wieserpedia/_net/types/interfaces/interfaces-explicit-implementation/</link>
      <pubDate>Sun, 06 Mar 2022 18:29:31 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/interfaces/interfaces-explicit-implementation/</guid>
      
      <description>Explicit Interface Implementation Internal Interface Classes in C# | Alex Franchuk Interfaces can be explicitly implemented. Assume a case where a class implements two interfaces that have a member with the same signature:
public interface IControl { void Paint(); } public interface ISurface { void Paint(); } public class SampleClass : IControl, ISurface { public void Paint(); } SampleClass sample = new SampleClass(); IControl control = sample; ISurface surface = sample; These all call the same method:</description>
      
    </item>
    
    <item>
      <title>partial methods</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/partial-methods/</link>
      <pubDate>Sun, 06 Mar 2022 18:24:23 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/partial-methods/</guid>
      
      <description>Partial Methods A partial class or struct may contain a partial method.
One part of the class contains the signature of the method.
An implementation is defined in the same part or another part of the class.
If the implementation is not defined, the method, and all calls to it, are removed at compile time.
A partial method is not required to have an implementation if all of these are true:</description>
      
    </item>
    
    <item>
      <title>partial classes</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/partial-classes/</link>
      <pubDate>Sun, 06 Mar 2022 18:16:55 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/partial-classes/</guid>
      
      <description>Partial Classes The partial keyword indicates that other parts of the class, struct, or interface can be defined in the namespace.
Rules All the parts must use the partial keyword. If any part is declared abstract, then the whole type is considered abstract. If any part is declared sealed, then the whole type is considered sealed. If any part declares a base type, then the whole type inherits that class. </description>
      
    </item>
    
    <item>
      <title>nested types</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/nested-types/</link>
      <pubDate>Sun, 06 Mar 2022 18:11:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/nested-types/</guid>
      
      <description>Nested Types A type defined within a class, struct, or interface is a nested type:
public class Outer { class Inner { Inner() { } } } Nested types default to private. They are only accessible from their containing type.
Accessing To access the outer type, pass it as an argument to the constructor fo the nested type:
public class Outer { public class Inner { private Outer parent; public Inner() { } public Inner(Outer parent) { this.</description>
      
    </item>
    
    <item>
      <title>object and collection initializers</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/object-and-collection-initializers/</link>
      <pubDate>Sun, 06 Mar 2022 17:36:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/object-and-collection-initializers/</guid>
      
      <description>Object Initializers Objects can be initialized when declared. Using object initializers works even when the initialization doesn&amp;rsquo;t match a constructor as long as a parameterless constructor exists.
The compiler processes object initializers by first accessing the parameterless instance constructor and then processing the member initializations:
public class StudentName { public int ID { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public StudentName() { } // This is the parameterless constructor that is accessed… public StudentName(string first, string last) { // …not this one.</description>
      
    </item>
    
    <item>
      <title>sterilizing a repo</title>
      <link>http://localhost:1313/wieserpedia/cli/git/sterilizing-a-repo/</link>
      <pubDate>Fri, 04 Mar 2022 20:41:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/sterilizing-a-repo/</guid>
      
      <description> git clone --mirror https://github.com/user/repo.git java -jar bfg.jar --delete-folders &amp;quot;{one,two,three}&amp;quot; repo.git cd repo.git git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now --aggressive git push </description>
      
    </item>
    
    <item>
      <title>extension methods</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/extension-methods/</link>
      <pubDate>Sat, 26 Feb 2022 21:38:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/extension-methods/</guid>
      
      <description>Extension Methods Extension methods extend existing types without creating a new derived type.
They are static methods, but they are called as if they were instance methods on the extended type.
Extension methods can also extend types that are sealed.
Binding An extension method with the same name and signature as an interface or class method will never be called.
The compiler will always bind to the interface or class method when there is a conflict.</description>
      
    </item>
    
    <item>
      <title>constants</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/constants/</link>
      <pubDate>Sat, 19 Feb 2022 11:32:28 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/constants/</guid>
      
      <description>Constant Constants – immutable values known at compile time which do not change.
Only built-in types may be declared const. Constants cannot be declared static (this would be redundant). Use Constants are used instead of magic numbers to provide meaningful names for special values.
Constant Integrals Instead of a constant int, byte, etc, use an enum.
Best Practice Constants can be grouped in a single, static class named Constants. This helps ensure those who use the constant understand it is constant and cannot be modified:</description>
      
    </item>
    
    <item>
      <title>static classes</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/static-classes/</link>
      <pubDate>Thu, 17 Feb 2022 20:46:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/static-classes/</guid>
      
      <description>Static Classes Static classes:
Contain only static members. Cannot be instantiated. Are implicitly sealed (cannot be derived from). Cannot contain instance constructors (only static constructors). It is more common to declare a non-static class with some static members than to declare an entire class static.
If a class contains static fields, provide a static constructor to initialize them.
Static Members A non-static class may contain static methods, fields, properties, or events.</description>
      
    </item>
    
    <item>
      <title>abstract classes</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/abstract-classes/</link>
      <pubDate>Thu, 17 Feb 2022 20:25:50 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/abstract-classes/</guid>
      
      <description>Abstract Classes Abstract classes and members are incomplete and must be implemented in a derived class.
They cannot be directly instantiated. They cannot be static. They may contain constructors. Abstract, Concrete, Virtual, and Static Members Abstract classes may contain abstract, concrete, virtual, and static members:
abstract members have no implementation. They must be implemented in the derived class. Use the override keyword. A field cannot be abstract. They cannot be static.</description>
      
    </item>
    
    <item>
      <title>polymorphism</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/polymorphism/</link>
      <pubDate>Thu, 17 Feb 2022 20:22:18 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/polymorphism/</guid>
      
      <description>Versioning C# is designed to allow versioning between base and derived classes in different libraries. This allows for introduction of a new member in a base class with the same name as a member in a derived class.
override and virtual and new can be used on methods, properties, indexers, and events. virtual If a method is virtual, any class inheriting it can implement its own version with override:
public class Graphics { public virtual void DrawLine() { } // These method can be implemented in a derived class.</description>
      
    </item>
    
    <item>
      <title>dynamic</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/dynamic/</link>
      <pubDate>Thu, 17 Feb 2022 19:03:02 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/dynamic/</guid>
      
      <description>Dynamic Type Namespace: System.Dynamic
Type: DynamicObject
Characteristics:
Bypasses static type checking. Functions like it has type object. At compile time, an element typed dynamic is assumed to support any operation. Conversions Converting to Dynamic dynamic d1 = 7; dynamic d2 = &amp;#34;a string&amp;#34;; Converting From Dynamic int i = d1; string s = d2; Uses HTML DOM Use a dynamic object to reference the HTML DOM, which can contain any combination of valid HTML and attributes.</description>
      
    </item>
    
    <item>
      <title>algorithms</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/algorithms/</link>
      <pubDate>Thu, 17 Feb 2022 19:00:29 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/algorithms/</guid>
      
      <description>Algorithms Algorithm – A series of instructions that perform a task.
Big-O Notation Used to describe time and space complexities of algorithms:
O(1) — O of 1 time aka constant time O(n) — Linear time O(log(n)) — Logarithmic time O(n^2) — Exponential timeLeast efficient O(n!) — Factorial time Hashing Credit: ByteByteGo blog
Simple Hashing A mechanism to distribute data evenly across servers.
Implementing For each object, hash its key with a hashing function (like MD5):</description>
      
    </item>
    
    <item>
      <title>publishing</title>
      <link>http://localhost:1313/wieserpedia/_net/deployment/publishing/</link>
      <pubDate>Wed, 16 Feb 2022 16:42:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/deployment/publishing/</guid>
      
      <description>Publishing dotnet publish [options] &amp;lt;proj|sltn&amp;gt; # Publish the application and its dependencies for hosting. --arch &amp;lt;x64|x86 # Specify the target architecture. Don&amp;#39;t use `--runtime`. --configuration Debug|Release --framework net6.0|net5.0|… # Specify the target .NET framework. --output &amp;lt;path # Specify the output directory. --self-contained &amp;lt;true|false&amp;gt; # Publish the .NET runtime with the application. Use with `--runtime`. --runtime &amp;lt;RID&amp;gt; # Specify the target runtime environment. Use with `--self-contained`. RIDs: win-x64, win10-x64, win-x86, linux-x64, rhel-x64</description>
      
    </item>
    
    <item>
      <title>expression bodied members</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/expression-bodied-members/</link>
      <pubDate>Wed, 16 Feb 2022 16:38:07 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/expression-bodied-members/</guid>
      
      <description>Expression-Bodied Members Expression body definitions are a concise form of implementing a member.
Usage member =&amp;gt; expression; Use in Methods Commonly used in types that override the ToString method:
public override string ToString() =&amp;gt; $&amp;#34;{fname} {lname}&amp;#34;.Trim(); Use in Read Only Properties public class Location { private string locationName; public Location(string name) { locationName = name; } public string Name =&amp;gt; locationName; } Use in Constructors and Properties public class Location { private string locationName; public Location(string name) =&amp;gt; Name = name; // Assigns argument name to property Name.</description>
      
    </item>
    
    <item>
      <title>equality and equivalence</title>
      <link>http://localhost:1313/wieserpedia/_net/types/equality-and-equivalence/</link>
      <pubDate>Wed, 16 Feb 2022 16:37:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/equality-and-equivalence/</guid>
      
      <description>Equality Comparisons Two types of Equality:
Equivalence (value equality) Identity (reference equality) Reference Equality (Identity) Objects have the same identity (or reference equality) if they refer to the same location in memory.
Comparisons Use ReferenceEquals:
areEqual = Object.ReferenceEquals(var1, var2); Notes Never test for reference equality on strings. Although string is a reference type, its equality operators have been overridden to make them behave like value types.
Value Equality (Equivalence) Objects have the same equivalence (or value equality) based on abstract definitions.</description>
      
    </item>
    
    <item>
      <title>async io</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/async-io/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/async-io/</guid>
      
      <description>Async Async reduces the need for threads in server-based applications. If the app uses a dedicated thread per response and 1,000 requests are handled simultaneously, 1,000 threads are needed. Async operations don&amp;rsquo;t need to use a thread during the wait. They use the existing I/O completion thread briefly at the end.
Asynchronous I/O – Writing Write Example public async Task SimpleWriteAsync() { string filePath = &amp;#34;simple.txt&amp;#34;; string text = $&amp;#34;Hello World&amp;#34;; await File.</description>
      
    </item>
    
    <item>
      <title>await</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/await/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/await/</guid>
      
      <description>Await The await keyword marks a point where the method cannot continue until the awaited async operation is complete.
It suspends this method and yields control back to the caller until then. It signs up the rest of the method as a continuation. It does not run on its own thread (unless called via Task.Run()). Example
async Task&amp;lt;int&amp;gt; GetTaskOfResultAsync() { int hours = 0; await Task.Delay(0); return hours; } // This calls the async method: Task&amp;lt;int&amp;gt; returnedTaskTResult = GetTaskOfResultAsync(); // This awaits the Task that the method returns and &amp;#34;unwraps&amp;#34; the int it holds: int intResult = await returnedTaskTResult; Awaiting Task.</description>
      
    </item>
    
    <item>
      <title>cancellation</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/cancellation/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/asynchronous-programming/cancellation/</guid>
      
      <description>Overview Cancellation allows asynchronous or long-running operations to stop cleanly.
Some objects invoke long-running, cancelable operations. These objects can pass a CancellationToken to those downstream operation. Downstream operations can pass that same token to other operations. When the cancellation token is invoked, it is a cancellation request; it means that the operation should stop as soon as possible after any required cleanup is performed. A single token can cancel multiple asynchronous invocations.</description>
      
    </item>
    
    <item>
      <title>imports</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/imports/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/imports/</guid>
      
      <description>Imports using namespace; // Imports all classes from namespace. using static namespace; // Imports only the static methods from namespace. using static System.Console; // This allows you to use WriteLine() without having to call Console.WriteLine(). global using namespace;	// Allows importing namespace into one file but available to the whole project. Console applications have these implicit using directives (auto imports):
using System; using System.IO; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.</description>
      
    </item>
    
    <item>
      <title>system.commandline</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/cli-apps/system.commandline/</link>
      <pubDate>Mon, 31 Jan 2022 20:07:53 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/cli-apps/system.commandline/</guid>
      
      <description>Overview System.CommandLine is pre-release. Documentation: https://learn.microsoft.com/en-us/dotnet/standard/commandline/ Installation:
dotnet add package system.commandline --pre-release Model Binding The process of parsing arguments and providing them to command handler code.
Of note, any type with a constructor that accepts a single string parameter can be bound (like FileInfo).
Root Command A root command, represented by RootCommand, represents the app executable itself:
RootCommand rootCommand = new(&amp;#34;app description&amp;#34;); Adding Commands to RootCommand rootCommand.Add(someCommand); Commands Commands are actions performed by the program.</description>
      
    </item>
    
    <item>
      <title>jsonnode</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsonnode/</link>
      <pubDate>Sun, 30 Jan 2022 12:35:13 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsonnode/</guid>
      
      <description>JsonNode Types: JsonNode, JsonArray, JsonObject, JsonValue, JsonNodeOptions
using System.Text.Json.Nodes; // Create a JsonNode DOM from a JSON string. JsonNode forecastNode = JsonNode.Parse(jsonString)!; // Parse can also parse a JsonArray or JsonObject // Write JSON from a JsonNode var options = new JsonSerializerOptions { WriteIndented = true }; Console.WriteLine(forecastNode!.ToJsonString(options)); // Get value from a JsonNode. JsonNode temperatureNode = forecastNode![&amp;#34;Temperature&amp;#34;]!; Console.WriteLine($&amp;#34;Type={temperatureNode.GetType()}&amp;#34;); // Type = System.Text.Json.Nodes.JsonValue`1[System.Text.Json.JsonElement] Console.WriteLine($&amp;#34;JSON={temperatureNode.ToJsonString()}&amp;#34;); // JSON = 25 // Get a typed value from a JsonNode.</description>
      
    </item>
    
    <item>
      <title>jsondocument and jsonelement</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsondocument-and-jsonelement/</link>
      <pubDate>Sun, 30 Jan 2022 12:11:30 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsondocument-and-jsonelement/</guid>
      
      <description>Serializing and Deserializing with JsonDocument Parsing into a JsonDocument JsonDocument doc = JsonDocument.Parse(json); // MUST dispose. Once a JsonDocument is disposed, all instances of JsonElement are also lost.
JsonElement JsonElement root = doc.RootElement; JsonElement propertyElement = root.GetProperty(&amp;#34;property&amp;#34;); // Get a JsonElement of property. // Assuming prop is a JSON Array: foreach (JsonElement prop in propertyElement.EnumerateArray()) { // Try to get Property from prop and store it in output if successful: if (prop.</description>
      
    </item>
    
    <item>
      <title>dataframerow</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframerow/</link>
      <pubDate>Tue, 25 Jan 2022 13:50:25 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframerow/</guid>
      
      <description>DataFrameRow Object –&amp;gt; DataFrameRow
A collection of values that represent a row in a DataFrame.
Properties Item(index) - Returns the value at index. Methods GetEnumerator() - Returns an enumerator of the values in this row. </description>
      
    </item>
    
    <item>
      <title>dataframecolumn</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframecolumn/</link>
      <pubDate>Tue, 25 Jan 2022 13:39:48 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframecolumn/</guid>
      
      <description>DataFrameColumn Object –&amp;gt; DataFrameColumn
A collection of values that represent a column in a DataFrame.
Properties DataType - The type of data this column holds. Item(length, startIndex) - Returns length number of values starting from startIndex. Item(rowIndex) - Get/set values at rowIndex. Length - The length of this column. Name - The name of this column. NullCount - The number of null values in this column. Methods AddDataViewColumn AddValueUsingCursor All - Boolean if all the elements are True.</description>
      
    </item>
    
    <item>
      <title>dataframe</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframe/</link>
      <pubDate>Tue, 25 Jan 2022 13:17:51 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/microsoft.data.analysis/dataframe/</guid>
      
      <description>DataFrame Object –&amp;gt; DataFrame
A data structure to support indexing, binary operations, sorting, selecting, and other APIs.
dotnet add package Microsoft.Data.Analysis Accessing Elements // Access the element at row, col: df[row, col] // or df.Rows[row, col] Rows // Access the nth row: df.Rows[n] Columns // Access a column by name: df[&amp;#34;column_name&amp;#34;] // Access the nth column: df.Columns[n] DataFrame // Filter the DataFrame: df.Filter(df.Columns[&amp;#34;column&amp;#34;].ElementwiseGreaterThan(50)) // All rows in column with values &amp;gt; 50.</description>
      
    </item>
    
    <item>
      <title>streams</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/streams/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/streams/</guid>
      
      <description>Overview [Documentation] A stream is a sequence of bytes that can be read from and written to.
Streams involve three fundamental operations:
Read – The transfer of data from a stream into a data structure. Write – The transfer or data from a data structure into a stream. Seek – Querying and modifying the current position within a stream. Depending on a stream&amp;rsquo;s underlying data source, a stream may only support some subset of these operations.</description>
      
    </item>
    
    <item>
      <title>draw.io</title>
      <link>http://localhost:1313/wieserpedia/tools/draw.io/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/tools/draw.io/</guid>
      
      <description>Canvas Action Keystrokes Grid (toggle) Ctrl + Shift + G Move drawing area Space + drag mouse Zoom Alt + scroll wheel Connectors Action Keystrokes Clone connectors Ctrl + Select connector&amp;rsquo;s endpoint + Drag Connect to a point within the shape Drag &amp;gt; hold Alt &amp;gt; Release mouse button at destination Add another Waypoint to connector Right-click connector &amp;gt; Add Waypoint Connections Floating connections connect to the frame of a shape.</description>
      
    </item>
    
    <item>
      <title>process</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/process/</link>
      <pubDate>Sun, 16 Jan 2022 15:08:53 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/process/</guid>
      
      <description>Process Class (System.Diagnostics) | Microsoft Docs Object –&amp;gt; MarshalByRefObject –&amp;gt; Component –&amp;gt; Process
Provides access to local and remote processes. Manages local processes.
Properties VirtualMemorySize64 // The amount of virtual memory, in bytes, allocated for the process WorkingSet64 // The amount of physical memory, in bytes, allocated for the process </description>
      
    </item>
    
    <item>
      <title>benchmarking</title>
      <link>http://localhost:1313/wieserpedia/_net/benchmarking/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/benchmarking/</guid>
      
      <description>Benchmarking dotnet add package BenchmarkDotNet
Program.cs
using BenchmarkDotNet.Running; public static void Main() { BenchmarkRunner.Run&amp;lt;SomeBenchmarks&amp;gt;(); } SomeBenchmarks.cs
using BenchmarkDotNet.Attributes; // [Benchmark] public class SomeBenchmarks { … public SomeBenchmarks() { … [Benchmark(Baseline = true)] public string SomeTest() { … } [Benchmark] public string SomeOtherTest() { … } } } Then:
dotnet run --configuration release</description>
      
    </item>
    
    <item>
      <title>index and range</title>
      <link>http://localhost:1313/wieserpedia/_net/index-and-range/</link>
      <pubDate>Sun, 09 Jan 2022 19:17:18 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/index-and-range/</guid>
      
      <description>Index Normally, the index is an integer passed to the indexer of an array:
int index = 3; Person p = people[index]; // The fourth Person in the array. The Index value type can identify position.
Creating This index counts from the start:
Index i1 = new(value: 3); or
Index i2 = 3; This index counts from the end:
Index i3 = new(value: 7, fromEnd: true); or
Index i4 = ^7 Range The Range value type uses Index values to indicate the start and end of its range.</description>
      
    </item>
    
    <item>
      <title>spans</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/spans/</link>
      <pubDate>Sun, 09 Jan 2022 18:14:15 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/spans/</guid>
      
      <description>Spans Spans are a window into the original array. Spans only work with arrays. Spans uses Index and Range types.
string name = &amp;#34;Samantha Jones&amp;#34;; int lengthOfFirst = name.indexOf(&amp;#39; &amp;#39;); // The length of the first name. int lengthOfLast = name.Length - lengthofFirst - 1; // The length of the last name. ReadOnlySpan&amp;lt;char&amp;gt; nameAsSpan = name.AsSpan(); // Convert the string to a span. ReadOnlySpan&amp;lt;char&amp;gt; firstNameSpan = nameAsSpan[0..lengthOfFirst]; ReadOnlySpan&amp;lt;char&amp;gt; lastNameSpan = nameAsSpan[^lengthOfLast.</description>
      
    </item>
    
    <item>
      <title>sets</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/sets/</link>
      <pubDate>Sun, 09 Jan 2022 17:34:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/sets/</guid>
      
      <description>Sets Sets are useful when performing set operations between two collections.
Other Sets SortedSet&amp;lt;T&amp;gt; A collection of unique objects that are maintained in sorted order.</description>
      
    </item>
    
    <item>
      <title>finalizers</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/finalizers/</link>
      <pubDate>Mon, 03 Jan 2022 21:10:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/finalizers/</guid>
      
      <description>Finalizers Each type can have a single finalizer that is called by the runtime when resources need to be released.
They release unmanaged resources like windows, files, network connections, or mutexes controlled by the OS.
They are also known as destructors (not deconstructors) because they destroy objects in memory.
Finalizers do not take modifiers and they do not have parameters.
They cannot be defined in structs. They cannot be inherited or overloaded.</description>
      
    </item>
    
    <item>
      <title>stack and heap</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/concepts/stack-and-heap/</link>
      <pubDate>Sun, 02 Jan 2022 21:54:37 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/concepts/stack-and-heap/</guid>
      
      <description>Heap and Stack The stack and heap can be anywhere in physical or virtual memory.
The heap is memory set aside for dynamic allocation:
Allocated when the application starts by the runtime. Managed by the Garbage Collector. Data stored on the heap is valid as long as it can be tracked back to a reference type variable on a stack. When no more pointers point to the data, it becomes garbage.</description>
      
    </item>
    
    <item>
      <title>delegates</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/delegates/</link>
      <pubDate>Sun, 02 Jan 2022 20:36:26 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/delegates/</guid>
      
      <description>Delegates Delegates represent references to methods with the same signature as the delegate.
Note: Unlike in overloading, for delegates, a method must have the same return type as the delegate.
They provide another way (instead of the dot operator) to call a method.
They are defined in namespace scope (like a class).
They support chaining (multiple methods can be called on a single event).
Delegates have built-in support for async operations that run on a different thread.</description>
      
    </item>
    
    <item>
      <title>local functions</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/local-functions/</link>
      <pubDate>Sun, 02 Jan 2022 20:27:50 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/local-functions/</guid>
      
      <description>Local Functions Methods that are only accessible from within the containing method in which they are defined.
They can be declared and called from methods (especially iterator and async methods), constructors, property accessors, event accessors, anonymous methods, lambda expressions, finalizers, and other local functions.
Modifiers Local functions support the following modifiers:
async unsafe static A static local function cannot capture local variables or instance state. extern An external local function must be static.</description>
      
    </item>
    
    <item>
      <title>assemblies</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/assemblies/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/assemblies/</guid>
      
      <description>Assemblies Assemblies are made up of 4 parts:
Assembly metadata and manifest: Name, assembly, file version, referenced assemblies, … Type metadata: Information about the type, their members, … IL code: Implementation of methods, properties, constructors, … Embedded resources (optional): Images, strings, JavaScript, … </description>
      
    </item>
    
    <item>
      <title>attributes</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/attributes/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/attributes/</guid>
      
      <description>Overview Object –&amp;gt; Attribute
Attributes associate metadata with code. Once associated, attributes can be queried at runtime using reflection. Attributes from the .NET library trigger certain behaviors in the compiler. User-defined attributes only act as metadata. Targets Attributes are generally declared above the code they are associated to. Attributes can be called with a target using this form:
[target : attribute1, attribute2, …]
Attributes can target:
assembly (place under the using directives) module (place under the using directives) field event method parameters property return type Associating to a parameter:</description>
      
    </item>
    
    <item>
      <title>casting and converting</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/casting-and-converting/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/casting-and-converting/</guid>
      
      <description>Conversions &amp;amp; Casting C# is statically typed at compile time. Once a variable is typed, it cannot hold a different type.
Implicit Conversions (Conversions) Implicit conversions happen automatically, always succeed, and no data is lost.
Example: converting from a long to an int.
Derived to Base Type A derived class always contains all members of a base class.
Explicit Conversions (Casting) Casting is required when data may be lost in the conversion, or if the conversion may otherwise fail:</description>
      
    </item>
    
    <item>
      <title>compilation statements</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/compilation-statements/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/compilation-statements/</guid>
      
      <description>Compilation Statements Compilation statements allow code to be written that only compiles if the conditional is true.
Modern .NET Symbols: NET6_0 NET6_0_ANDROID NET6_0_IOS NET6_0_WINDOWS
#if NET6_0_ANDROID // compile statements that only work on Android #elif NET6_0_IOS // compile statements that only work on iOS #else // compile statements that work everywhere else </description>
      
    </item>
    
    <item>
      <title>control flow</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/control-flow/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/control-flow/</guid>
      
      <description>if - else if - else if (condition) &amp;amp;&amp;amp; (condition2) || (condition3) { … } else if (condition) { … } else { … } Ternary Operator condition ? true-return : false-return while while (condition) { … } do … while Executes the code in the body, then checks the condition:
do { … } while (condition) for for (initializer; condition; iterator) { … } initializer: int x = 0</description>
      
    </item>
    
    <item>
      <title>csharp and dotnet</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/csharp-and-dotnet/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/csharp-and-dotnet/</guid>
      
      <description>.NET is&amp;hellip; https://github.com/dotnet/standard/blob/release/3.0/docs/metaphor.md
C# is&amp;hellip; Strongly-typed: Every variable and constant has a type. Every expression that evaluates to a value has a type. Every method declaration specifies a name, and a type and kind for each parameter and for the return value. Object-oriented (programmer defines types and their behavior) Encapsulation Inheritance Polymorphism Component-oriented Type-safe Garbage-collected (automatically reclaims memory from unreachable, unused objects) C# has support for&amp;hellip; Nullable types (guard against variables that don&amp;rsquo;t refer to allocated objects) Asynchronous operations Unified type system: All types inherit from a single root object type.</description>
      
    </item>
    
    <item>
      <title>inversion of control</title>
      <link>http://localhost:1313/wieserpedia/software-engineering/principles/inversion-of-control/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/software-engineering/principles/inversion-of-control/</guid>
      
      <description>Inversion of Control (Dependency Inversion) If class A calls a method of class B, and class B calls a method of class C, then, at compile time, class A will depend on class B, and class B will depend on class C:
Instead, class A can call methods on an abstraction that B implements. B depends on an interface controlled by A at compile time: This inverts the dependency.
Dependency inversion is what enables dependency injection.</description>
      
    </item>
    
    <item>
      <title>deconstructors</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/deconstructors/</link>
      <pubDate>Fri, 31 Dec 2021 10:31:57 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/deconstructors/</guid>
      
      <description>Deconstructors The special method Deconstruct() is used to deconstruct a type:
public class Person { private string last; private string first; public Person(string lastName, string firstName) { last = lastName; first = firstName; } public void Deconstruct(out string lname, out string fname) { lname = lastName; fname = firstName; } } Person bob = new() { &amp;#34;eli&amp;#34;, &amp;#34;smith&amp;#34; }; var (name1, name2) = eli; name1 // returns &amp;#34;eli&amp;#34; name2 // returns &amp;#34;smith&amp;#34; Overloaded Deconstructors Overload deconstructors to allow callers to discard certain fields of the type.</description>
      
    </item>
    
    <item>
      <title>fields</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/fields/</link>
      <pubDate>Thu, 30 Dec 2021 16:57:31 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/fields/</guid>
      
      <description>Fields Field – a variable of any type declared in a class or struct.
If a field is static, every instance points to the same copy of the field in the type. If a field is readonly, its value can only be assigned during initialization or in a constructor. A static readonly field is like a const, except that the compiler can only access its value at run time. Usually private or protected with public properties, methods, or indexers that get or set their values.</description>
      
    </item>
    
    <item>
      <title>stopwatch</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/stopwatch/</link>
      <pubDate>Fri, 24 Dec 2021 15:52:31 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/stopwatch/</guid>
      
      <description>Stopwatch Object –&amp;gt; Stopwatch
Example Stopwatch sw = new Stopwatch(); sw.Start(); // … sw.Stop(); TimeSpan ts = sw.Elapsed; // Calling sw.Start() again here resumes the stopwatch at the elapsed time it was stopped Methods StartNew() — Start a new stopwatch timer Reset() — Reset a timer Restart() — Reset a timer and start it
Properties Elapsed ElapsedMilliseconds ElapsedTicks — Ticks elapsed since stopwatch started/stopped Frequency — Ticks per second
Note: (1000L * 1000L * 1000L) / frequency = nanoseconds per tick IsHighResolution — If true, using system&amp;rsquo;s high-resolution performance counter.</description>
      
    </item>
    
    <item>
      <title>xml</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/xml/</link>
      <pubDate>Thu, 23 Dec 2021 16:29:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/xml/</guid>
      
      <description>Overview Namespace: System.Xml.Serialization Documentation: https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization?view=net-6.0 Serializing When serializing a type with XmlSerializer, only public fields and properties are included, and the type must have a parameterless constructor.
List&amp;lt;Person&amp;gt; people = … // Create an object graph of Person objects in a List of Persons. XmlSerializer xs = new(people.GetType()); // Create object that formats a List of Persons as XML. using (FileStream stream = File.Create(path)) { xs.Serialize(stream, people); // Serialize the object graph to the stream.</description>
      
    </item>
    
    <item>
      <title>concurrent</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/concurrent/</link>
      <pubDate>Thu, 23 Dec 2021 11:36:04 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/concurrent/</guid>
      
      <description>System.Collections.Concurrent Efficient, thread-safe operations for access collection items from multiple threads. Concurrent collection classes do not require user code to take any locks when accessing items.
BlockingCollection&amp;lt;T&amp;gt; — provides blocking &amp;amp; bounding capabilities; Producer threads block if not slots are available or if collection is full. Consumer threads block if collection is empty. Class can be used as backing store to provide blocking &amp;amp; bounding for any collection that implements IEnumerable&amp;lt;T&amp;gt;.</description>
      
    </item>
    
    <item>
      <title>troubleshooting</title>
      <link>http://localhost:1313/wieserpedia/cli/git/troubleshooting/</link>
      <pubDate>Tue, 21 Dec 2021 16:57:18 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/troubleshooting/</guid>
      
      <description>Git is not respecting .gitignore git rm -rf --cached . git add . Line endings (&amp;ldquo;LF will be replaced by CRLF&amp;rdquo;) Files with Unix-style (LF) line endings will be replaced by Windows-style (CRLF) line endings when running on Windows. This is likely because Git&amp;rsquo;s core.autocrlf setting is true.
To prevent this:
git config --system core.autocrlf false # per-system solution git config --global core.autocrlf false # per-user solution git config --local core.</description>
      
    </item>
    
    <item>
      <title>trace</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/trace/</link>
      <pubDate>Wed, 15 Dec 2021 14:59:09 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/trace/</guid>
      
      <description>Trace Object –&amp;gt; Debug
Prefer ILogger over System.Diagnostics.Debug and System.Diagnostics.Trace.
Methods and properties to debug code.
This class can be used for both DEBUG and RELEASE compilation modes.</description>
      
    </item>
    
    <item>
      <title>debug</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/debug/</link>
      <pubDate>Wed, 15 Dec 2021 14:32:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/debugging/debug/</guid>
      
      <description>Debug Object –&amp;gt; Debug
Prefer ILogger over System.Diagnostics.Debug and System.Diagnostics.Trace.
Methods and properties to debug code.
This class can only be used when the application is compiled in DEBUG mode.
Enabling Debugging Either:
Add #define DEBUG (or #define TRACE) to the top of the file, or; Add the /d:DEBUG or /d:TRACE flag when compiling. Adding Trace Listeners Trace Listeners are shared by both Debug and Trace and used to output debug/trace information:</description>
      
    </item>
    
    <item>
      <title>system.environment</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/system.environment/</link>
      <pubDate>Sun, 28 Nov 2021 12:31:13 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/system.environment/</guid>
      
      <description>System.Environment Object –&amp;gt; Environment
Information about and manipulation of the current environment and platform. Documentation: https://docs.microsoft.com/en-us/dotnet/api/system.environment?view=net-6.0 Properties CommandLine Returns the command line arguments as a string where the first term is the command itself Current DirectoryGets or sets the CWD ExitCode Is64BitOperatingSystem Boolean if OS is 64-bit Is64BitProcess Boolean if the current process if 64-bit MachineName Returns the system&amp;rsquo;s name NewLine Returns a platform-independent newline (\r\n for non-Unix platforms; \n for Unix platforms) OSVersion Returns an OperatingSystem OSVersion object.</description>
      
    </item>
    
    <item>
      <title>httputility</title>
      <link>http://localhost:1313/wieserpedia/_net/web/http/httputility/</link>
      <pubDate>Sun, 28 Nov 2021 09:17:19 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/http/httputility/</guid>
      
      <description>System.Web.HttpUtility Use to encode or decode URLs when building web applications.
To encode or decode values outside of a web application, use System.Net.WebUtility.</description>
      
    </item>
    
    <item>
      <title>uribuilder</title>
      <link>http://localhost:1313/wieserpedia/_net/web/uris/uribuilder/</link>
      <pubDate>Sun, 28 Nov 2021 09:03:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/uris/uribuilder/</guid>
      
      <description>System.UriBuilder Object –&amp;gt; UriBuilder
Construct and modify URIs for the Uri class.
Construction UriBuilder() — Returns a new UriBuilder instance. UriBuilder(string) — Returns a new UriBuilder instance from string. UriBuilder(Uri) — Returns a new UriBuilder instance from Uri. Properties Assuming a URI https://user:password@www.contoso.com:80/Home/Index.htm?q1=v1&amp;amp;q2=v2#FragmentName:
Fragment — #FragmentName Host — www.contoso.com Password — password Path — /Home/Index.htm Port — 80 Query — ?q1=v1&amp;amp;q2=v2 Scheme — https Uri — https://user:password@www.contoso.com:80/Home/Index.htm?q1=v1&amp;amp;q2=v2#FragmentName UserName — user </description>
      
    </item>
    
    <item>
      <title>uri</title>
      <link>http://localhost:1313/wieserpedia/_net/web/uris/uri/</link>
      <pubDate>Sun, 28 Nov 2021 08:30:06 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/uris/uri/</guid>
      
      <description>System.Uri Object –&amp;gt; Uri
An object representation of a URI.
Construction From String Uri uri = new Uri(&amp;#34;https://user:password@www.contoso.com:80/Home/Index.htm?q1=1&amp;amp;q2=v2#FragmentName&amp;#34;); Specify Base URI or Relative URI Uri uri = new Uri(string &amp;#34;s&amp;#34;, UriKind.Absolute); // or UriKind.Relative. // or Uri uri = new Uri(Uri baseUri, string &amp;#34;relativeUriString&amp;#34;); // or Uri uri = new Uri(Uri baseUri, Uri relativeUri); Fields Various fields are available for different URI schemes such as File, FTP, SSH, Telnet, etc.</description>
      
    </item>
    
    <item>
      <title>webutility</title>
      <link>http://localhost:1313/wieserpedia/_net/web/webutility/</link>
      <pubDate>Sat, 27 Nov 2021 16:34:18 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/webutility/</guid>
      
      <description>WebUtility Object –&amp;gt; WebUtility
Methods for encoding/decoding URLs when processing web requests.
Methods WebUtility.HtmlDecode(s) // Convert HTML-encoded string s into a string. WebUtility.HtmlEncode(s) // Convert string s into a HTML-encoded string. WebUtility.UrlDecode(s) // Convert URL-encoded string s into a string. WebUtility.UrlEncode(s) // Convert string s into a URL-encoded string. </description>
      
    </item>
    
    <item>
      <title>nullables</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/nullables/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/nullables/</guid>
      
      <description>Dereferencing Accessing a member of a variable through the dot operator.
Dereferencing a null variable whose value is null is a NullReferenceException. Checking for Null void FindRoot(Node node, Action&amp;lt;Node&amp;gt; processNode) { // If this wasn&amp;#39;t checked first… for ( var current = node; current is not null; current = current.Parent) { // …then this could be a NullReference… processNode(current); // …and so could this. } } Also:
if (message is not null) { … } Using Utility Methods to Check for Null If you have a private utility method like IsNotNull() to check for null, you must add an attribute to its signature to tell the compiler what it does:</description>
      
    </item>
    
    <item>
      <title>console</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/cli-apps/console/</link>
      <pubDate>Fri, 19 Nov 2021 15:50:28 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/cli-apps/console/</guid>
      
      <description>[System.Console] STDIN, STDOUT, STDERR streams.
Object –&amp;gt; Console
Documentation: https://docs.microsoft.com/en-us/dotnet/api/system.console?view=net-6.0 Properties BufferHeight - Get or set the buffer height BufferWidth CursorSize - Get or set the size of the console cursor. WindowHeight - Get or set the console window height WindowWidth WindowTop - Get or set the top position of the console window. WindowsLeft - Get or set the left position of the console window. Colors BackgroundColor = ConsoleColor.color ForegroundColor = ConsoleColor.</description>
      
    </item>
    
    <item>
      <title>iterators</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/iterators/</link>
      <pubDate>Fri, 19 Nov 2021 14:40:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/iterators/</guid>
      
      <description>Iterators Iterators are objects that traverse a container. They yield return each element one at a time.
Each time yield return is reached, the current location in code is remembered. The next time the iterator is called, execution restarts from that location. Iterators return IEnumerable, IEnumberable or IEnumerator, IEnumerator. In asynchronous operations, they return IAsyncEnumerable or IAsyncEnumerator. Iterators can be a method or a get accessor. Creating Iterator Methods public IEnumerable&amp;lt;int&amp;gt; EvenSequence(int firstnum, int lastnum) { for (var number = firstnum, number &amp;lt;= lastnum, number++) { if (number % 2 == 0) { yield return number; // When this statement is reached, an expression is returned, and the } // current location in code is remembered.</description>
      
    </item>
    
    <item>
      <title>pattern matching</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/pattern-matching/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/operators-and-expressions/pattern-matching/</guid>
      
      <description>Pattern Matching See also: C# 9.0: Pattern Matching in Switch Expressions – Thomas Claudius Huber
Declaration and Type Patterns if (o is int i) { … }	// If o matches the pattern of an integer, store it in variable i. Check if a value is null with a declaration pattern using is:
int? maybe = 12; if (maybe is int number) { // Combines test and assignment in single statement.</description>
      
    </item>
    
    <item>
      <title>trees</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/trees/</link>
      <pubDate>Tue, 16 Nov 2021 07:51:53 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/trees/</guid>
      
      <description>Trees A collection of nodes where each node can be linked to more nodes.
Nodes are collected by links.
Useful for nonlinear data. 2 is the parent (root) node. 3 and 4 are both parent and child nodes. Binary Trees A tree whose nodes have no more than 2 children.
Binary Search Trees A binary tree that is ordered.
Items to the left must be less than the parent. Items to the right must be greater than the parent.</description>
      
    </item>
    
    <item>
      <title>hashset</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/hashset/</link>
      <pubDate>Mon, 15 Nov 2021 20:30:01 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/hashset/</guid>
      
      <description>HashSet An unordered collection of unique items.
Namespace Systems.Collections.Generic Inheritance Object -&amp;gt; HashSet&amp;lt;T&amp;gt;
Construction var hs = new HashSet&amp;lt;type&amp;gt;(); Methods .Add(elem) // Add elem to the set. Returns boolean if element was not already in the set. .Contains(elem) // Return Boolean if elem is in the hashset. </description>
      
    </item>
    
    <item>
      <title>stacks</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/stacks/</link>
      <pubDate>Mon, 15 Nov 2021 16:42:50 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/stacks/</guid>
      
      <description>Stack A last-in, first-out collection of objects.
Namespace Systems.Collections.Generic
Inheritance Object –&amp;gt; Stack&amp;lt;T&amp;gt;
Construction var stk = new Stack&amp;lt;type&amp;gt;(); Methods .Peek() // Return, but do not remove, the element at the top of the stack. Throws exception on empty stack. .Pop() // Remove and return the element at the top of the stack. .Push(elem) // Push elem onto stack. .TryPeek(out var1) // Return, but do not remove, the element at the top of the stack and store it in var1.</description>
      
    </item>
    
    <item>
      <title>queues</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/queues/</link>
      <pubDate>Mon, 15 Nov 2021 16:23:15 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/queues/</guid>
      
      <description>Queue A first-in, first-out collection of objects.
Namespace Systems.Collections.Generic
Inheritance Object –&amp;gt; Queue&amp;lt;T&amp;gt;
Notes A queue contains elements in the order they were added. Queues are FIFO: Elements are inserted at the end (enqueue) and removed from the beginning (dequeue). Queues do not have indices. Other Queues PriorityQueue Items in a PriorityQueue have a priority value as well as a position value.
Construction var queue = new Queue&amp;lt;*type*&amp;gt;; Methods .Enqueue(*elem*) // Add *elem* to the end of the queue.</description>
      
    </item>
    
    <item>
      <title>linked lists</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/linked-lists/</link>
      <pubDate>Mon, 15 Nov 2021 14:18:34 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/linked-lists/</guid>
      
      <description>Linked Lists Namespace
Systems.Collections.Generic Inheritance
Object –&amp;gt; LinkedList&amp;lt;T&amp;gt;
A doubly-linked list. Each element is a node which has a reference to its previous and next items.
Nodes are ordered one after another. Nodes are not stored contiguously. Nodes are linked using pointers. Nodes do not have indices. The size of a linked list is dynamic. Linked Lists provide better performance compared to Lists when frequently inserting and removing items from the middle of the list.</description>
      
    </item>
    
    <item>
      <title>lists</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/lists/</link>
      <pubDate>Sat, 13 Nov 2021 11:21:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/lists/</guid>
      
      <description>Lists Lists are ordered collections that can hold any object. Implements IList&amp;lt;T&amp;gt;. Allows for duplicate items. Inherits from System.Collections.Generic implicitly.
List&amp;lt;T&amp;gt; is not thread safe. Use ImmutableList&amp;lt;T&amp;gt; instead.
For a heterogeneous collection of objects, use List&amp;lt;Object&amp;gt;.
Other Lists SortedList&amp;lt;TKey, TValue&amp;gt; A collection of key/value pairs that are sorted by key and accessible by key or index.
Creating Declare a new List of strings:
var names = new List&amp;lt;string&amp;gt;Angle brackets are used for Generics.</description>
      
    </item>
    
    <item>
      <title>dictionaries</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/generic/dictionaries/</link>
      <pubDate>Sat, 13 Nov 2021 11:20:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/generic/dictionaries/</guid>
      
      <description>Dictionary A series of key-value pairs. Object –&amp;gt; Dictionary&amp;lt;TKey, TValue&amp;gt;
Type safe. Invalid key throws exception. Namespace
System.Collections.Generic Implements
IDictionary&amp;lt;TKey, TValue&amp;gt;
Items in a dictionary are instances of a struct.
Other Dictionaries SortedDictionary&amp;lt;TKey, TValue&amp;gt; A collection of key/value pairs that are sorted by key.
Construction` Dictionary&amp;lt;key-type, value-type&amp;gt; d = new(); // or Dictionary&amp;lt;TKey, TValue&amp;gt; d = new() { { key1, value1 } … }; Accessing d[key]
Iterating foreach (KeyValuePair&amp;lt;TKey, TValue&amp;gt; item in d) { Console.</description>
      
    </item>
    
    <item>
      <title>timezoneinfo</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/timezoneinfo/</link>
      <pubDate>Thu, 11 Nov 2021 20:44:35 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/timezoneinfo/</guid>
      
      <description>TimeZoneInfo Object –&amp;gt; TimeZoneInfo
Represents any time zone in the world.
Uses Converting between time zones. Serialize and deserialize time zone information. Creating a new time zone. Construction Cannot be instantiated with new().</description>
      
    </item>
    
    <item>
      <title>timespan</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/timespan/</link>
      <pubDate>Thu, 11 Nov 2021 20:40:42 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/timespan/</guid>
      
      <description>TimeSpan Object –&amp;gt; ValueType –&amp;gt; TimeSpan
Represents a time interval.
Subtracting one DateTime from another results in a TimeSpan.
Uses Reflecting interval between two dates or times. Measuring elapsed time Construction TimeSpan interval = new TimeSpan(); // interval is TimeSpan.Zero. TimeSpan interval = TimeSpan.Zero; TimeSpan(hh, mm, ss); TimeSpan(dd, hh, mm, ss, ms); // ms is optional. TimeSpan(ticks); TimeSpan interval = datetime1, datetime2; </description>
      
    </item>
    
    <item>
      <title>datetime</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/datetime/</link>
      <pubDate>Thu, 11 Nov 2021 20:08:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/datetime/</guid>
      
      <description>DateTime Object –&amp;gt; ValueType –&amp;gt; DateTime
Represents an instant in time.
Note: Time values are measured in 100-nanosecond units called ticks.
Note: System.DateOnly is useful if working with dates only. This type maps to date columns in SQL server.
Note: System.TimeOnly is useful if working with times only. This type maps to time columns in SQL server.
Also: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings
Uses Work with dates only or times only Work with dates and times for which timezone information is missing Work with UTC dates and times only Retrieve date/time information from sources outside of .</description>
      
    </item>
    
    <item>
      <title>datetimeoffset</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/datetimeoffset/</link>
      <pubDate>Thu, 11 Nov 2021 20:08:41 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/datetimes/datetimeoffset/</guid>
      
      <description>DateTimeOffset Object –&amp;gt; ValueType –&amp;gt; DateTimeOffset
Represents a date and time with an offset against UTC.
Includes all functionality from DateTime as well as (some) time zone awareness.
Consider this the default date and time type.
See also: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings
Notes The time component is measured in ticks DateTimeOffset values can be created by assigning it a DateTime value (implicit conversion) Uses &amp;ldquo;Now&amp;rdquo; Date and time arithmetic, conversion, and comparisons Conversion: DateTimeOffset &amp;lt;–&amp;gt; DateTime Time manipulation and extraction Construction DateTimeOffset(DateTime, TimeSpan) // TimeSpan is optional.</description>
      
    </item>
    
    <item>
      <title>stringbuilder</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/stringbuilder/</link>
      <pubDate>Thu, 11 Nov 2021 16:38:01 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/stringbuilder/</guid>
      
      <description>StringBuilder Object –&amp;gt; StringBuilder
Construction var sb = new StringBuilder(&amp;#34;string&amp;#34;); // string is optional. var sb = new StringBuilder(&amp;#34;string&amp;#34;, initial_capacity); var sb = new StringBuilder(initial_capacity, max_capacity); Properties Chars[index] — Return or set the character at index. Length — Current number of characters in the StringBuilder. Capacity — Number of characters that the StringBuilder can currently hold. This is increased dynamically. MaxCapacity — By default, set to Int32.MaxValue. Can be overwritten. Methods Manipulating These methods accept a string, substring, character array, or the string representation of a primitive data type:</description>
      
    </item>
    
    <item>
      <title>jsonserializer</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsonserializer/</link>
      <pubDate>Thu, 11 Nov 2021 10:57:32 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/serialization/json/jsonserializer/</guid>
      
      <description>Overview [Documentation] A high-level, automatic serialization and deserialization API. JsonSerializer&amp;rsquo;s source generator eliminates use of reflection which is important for trimming and native AOT apps.
Serializing and Deserializing with JsonSerializer These examples use the following classes:
public class WeatherForecast { public DateTimeOffset Date { get; set; } public int TemperatureCelsius { get; set; } public string? Summary { get; set; } public string? SummaryField; public IList&amp;lt;DateTimeOffset&amp;gt;? DatesAvailable { get; set; } public Dictionary&amp;lt;string, HighLowTemps&amp;gt;?</description>
      
    </item>
    
    <item>
      <title>httpclient</title>
      <link>http://localhost:1313/wieserpedia/_net/web/http/httpclient/</link>
      <pubDate>Thu, 11 Nov 2021 09:41:47 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/web/http/httpclient/</guid>
      
      <description>HttpClient Object –&amp;gt; HttpMessageInvoker –&amp;gt; HttpClient
Sending HTTP requests and receiving HTTP responses via URI.
HttpClient is intended to be instantiated once per application. HttpClient works only on async methods for its long-running APIs. Every HttpClient instance uses its own connection pool. Thread Safety Warning: HttpClient is not thread safe. However, all HTTP verb methods, except Send(), are thread safe.
Flaw When the HttpClient object gets disposed of, the underlying socket is not immediately released, which can lead to a socket exhaustion problem.</description>
      
    </item>
    
    <item>
      <title>system.random</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/random-numbers/system.random/</link>
      <pubDate>Wed, 10 Nov 2021 18:43:00 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/random-numbers/system.random/</guid>
      
      <description>Overview Pseudo-random number generator.
Documentation: https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-7.0 Thread Safety Warning: System.Random is not thread safe.
For concurrent operations across multiple threads, use Random&amp;rsquo;s Shared property which returns a thread-safe Random instance.
Seeds In .NET Core, System.Random&amp;rsquo;s default parameterless constructor uses a seed value produced by the thread-static random number generator itself. It also has a constructor overload that accepts an int as a seed.
Use var bytes = new byte[5]; rand.NextBytes(bytes); // 5 random byte values.</description>
      
    </item>
    
    <item>
      <title>file io</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/file-io/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/io-operations/file-io/</guid>
      
      <description>Overview of Types for Files/Directories See here.
File &amp;amp; Directory IO All methods return void unless otherwise specified.
Files Goal Use Check for a file File.Exists (returns bool) Copy a file File.Copy FileInfo.CopyTo (returns FileInfo) Delete a file File.Delete, FileInfo.Delete Move/rename a file File.Move, FileInfo.MoveTo Retrieve a full path Path.GetFullPath Retrieve file name and extension Path.GetFileName Retrieve a file extension Path.GetExtension Change a file extension Path.ChangeExtension Text Files Goal Use Create a text file File.</description>
      
    </item>
    
    <item>
      <title>objects</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/objects/</link>
      <pubDate>Tue, 09 Nov 2021 20:44:08 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/objects/objects/</guid>
      
      <description>Objects Because all objects implicitly inherit from Object, they have these methods:
ToString() — Converts the class object to a string representation. GetHashCode() — Returns the unique hash code of the object. GetType() — Returns the Type of the object which represents its class. Creating new() allocates memory, invokes a constructor, and returns a reference to the instance:
SomeClass variable = new(); var variable = new Class(arg1, arg2, …); var p1 = new Point(0, 0); var p2 = new Point(10, 20); Checking the Type of an Object (is Keyword) Use the is keyword:</description>
      
    </item>
    
    <item>
      <title>exceptions</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/exceptions/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/exceptions/</guid>
      
      <description>Exceptions All exceptions derive from System.Exception.
#Catch Exceptions
try { … } catch (exception e) { // Catches a specific exception. Stores it in e. // e.StackTrace contains the current call stack, file name, and line number where the exception was thrown. // e.Message contains the string describing the exception. // e.GetType() contains the type of the exception. } catch { … }	// Catches any exception. catch { } // Use an empty catch block to catch errors, ignore them, and continue running.</description>
      
    </item>
    
    <item>
      <title>anonymous types</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/anonymous-types/</link>
      <pubDate>Sun, 07 Nov 2021 20:03:18 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/anonymous-types/</guid>
      
      <description>Anonymous Types Anonymous types are used to encapsulate a set of read-only properties into an object without having to define a type:
var v = new { Amount = 108, // Compiler infers Amount&amp;#39;s type as `int`. Message = &amp;#34;Hello&amp;#34; // Compiler infers Message&amp;#39;s type as `string`. }; When a variable is initialized with an anonymous type, it must be declared as var to access the properties of the object at a later point.</description>
      
    </item>
    
    <item>
      <title>records</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/records/</link>
      <pubDate>Sun, 07 Nov 2021 19:30:56 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/records/</guid>
      
      <description>Records Records can be record classes or record structs.
Use When You need a data model that depends on value equality You need a type whose objects are immutable Do Not Use As entity types in Entity Framework Core. Positional Syntax Positional syntax will automatically declare properties, a constructor, and a deconstructor:
public record Person(string FirstName, string LastName); public static void Main() { Person person = new(&amp;#34;Nancy&amp;#34;, &amp;#34;Davolio&amp;#34;); Console.WriteLine(person); // output: Person { FirstName = Nancy, LastName = Davolio } } Record Class Record classes, a reference type (defaults to record class if class or struct not specified):</description>
      
    </item>
    
    <item>
      <title>strings</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/strings/</link>
      <pubDate>Sat, 06 Nov 2021 16:38:02 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/strings/</guid>
      
      <description>Strings A sequence of UTF-16 code units.
Stored internally as a sequential read-only collection of Char objects.
Length property represents the number of Char objects contained, not the number of code units. To access the individual code points, use StringInfo The string keyword looks like a type but is actually an alias for the type String
Empty Strings Empty strings are represented as &amp;quot;&amp;quot;
However, to create empty strings, use the constant String.</description>
      
    </item>
    
    <item>
      <title>arrays</title>
      <link>http://localhost:1313/wieserpedia/_net/types/collections/arrays/</link>
      <pubDate>Sat, 06 Nov 2021 11:43:18 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/collections/arrays/</guid>
      
      <description>Arrays Use arrays when working with a fixed number of strongly typed items. Arrays are objects that have properties and methods in the System.Array class. An array&amp;rsquo;s length (the number of elements it has) and its dimensions are set when the array instance is created and cannot be changed. Arrays implement IList and IEnumerable. Single-dimensional arrays also implement IList and IEnumerable. Declaring Declare a single-dimensional array of 5 integers:
int[1] a1 = new int[5]; // Or declare an array variable without creating it… int[] a2; // …and then use the new operator when assigning a new array to this variable: a2 = new int[] { 1, 3, 5, 7, 9 }; Initializing Declare and initialize a single-dimensional array of 5 integers:</description>
      
    </item>
    
    <item>
      <title>events</title>
      <link>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/events/</link>
      <pubDate>Sat, 06 Nov 2021 11:28:28 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/reference-types/delegates/events/</guid>
      
      <description>Events Events in C# (tutorialsteacher.com)
Events in C# - Code Maze (code-maze.com)
Events in C# explained. Everyone that understands English knows… | by Dinesh Jethoe | Medium
Events are notifications sent by one class to another that some event has occurred. They are specialized delegates.
Events are commonly used in GUIs; you subscribe to events raised by controls such as buttons.
Events are encapsulated delegates.
The class that sends (raises) an event is the publisher; the class that receives (handles) the event is the subscriber.</description>
      
    </item>
    
    <item>
      <title>indexers</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/indexers/</link>
      <pubDate>Sat, 06 Nov 2021 11:26:41 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/indexers/</guid>
      
      <description>Indexers Indexers (indexed properties) are Properties that can be indexed into some collection of values.
They enable objects to be indexed like arrays.
The compiler generates an Item property and the appropriate accessor methods.
Creating The name of the member is this:
public class Person { // … public Person `this`[int index] { // The indexer. // Avoid auto-implemented properties with indexers: get { return Children[index]; } // The get and set accessors make this indexer read-write.</description>
      
    </item>
    
    <item>
      <title>properties</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/properties/</link>
      <pubDate>Sat, 06 Nov 2021 11:25:46 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/properties/</guid>
      
      <description>Properties Properties are methods that act like Fields that allow for getting and setting its value.
They are used in place of fields when the value they contain must be calculated or guarded. To the user of a property, they appear as a field. Unlike fields, they are implemented with get/set accessors that define the statements executed when the property is accessed or assigned. Properties cannot be passed as ref or out parameters.</description>
      
    </item>
    
    <item>
      <title>constructors</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/constructors/</link>
      <pubDate>Sat, 06 Nov 2021 11:25:27 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/constructors/</guid>
      
      <description>Constructors Whenever a Class or Struct is created, its constructor is called.
Instance Constructors public class Person { private string Last; private string First; // Instance constructors initialize an instance of a class and are not inherited in derived classes. // Constructors have the same name as the class and are usually at the bottom of the class: public Person(string lastName, string firstName) { Last = lastName; First = firstName; } } Constructors do not use return statements.</description>
      
    </item>
    
    <item>
      <title>methods</title>
      <link>http://localhost:1313/wieserpedia/_net/types/classes/methods/methods/</link>
      <pubDate>Sat, 06 Nov 2021 10:44:24 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/classes/methods/methods/</guid>
      
      <description>Methods Methods are functions that belong to a type that execute statements.
They are actions that an object can perform, either on itself or on related objects.
They can be declared in a class, record, or struct.
There are 4 specialized categories of methods:
Constructor Statements herein execute when new() is used to instantiate a class. Property Statements herein execute when data is set or get. Properties encapsulate (and protect) fields.</description>
      
    </item>
    
    <item>
      <title>variables</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/variables/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/variables/</guid>
      
      <description>Variables Every variable has a type that determines what values can be stored in it:
Non-nullable value type Nullable value type object Class type, Interface type, Array type, Delegate type Identifiers Identifiers are variable names.
Identifiers start with a letter or _ and use PascalCase.
@identifier allows for variables to be named with C# reserved words.
Creating C# is strongly typed, so all variables need to be typed:
type identifier; // Declare a variable.</description>
      
    </item>
    
    <item>
      <title>tuples</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/tuples/</link>
      <pubDate>Fri, 05 Nov 2021 21:38:53 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/tuples/</guid>
      
      <description>Tuples System.ValueTuple is modern; System.Tuple is legacy.
Tuple public (string, int) GetFruit() { return (&amp;#34;Apples&amp;#34;, 5) } var fruit = GetFruit(); The tuple&amp;rsquo;s fields are automatically named Item1 and Item2:
fruit.Item1 // returns &amp;#34;Apples&amp;#34; fruit.Item2 // returns 5 Tuple with Named Fields public (string Name, int Qty) GetNamedFruit() { return (Name: &amp;#34;Apples&amp;#34;, Qty: 5); } var namedFruit = GetNamedFruit(); namedFruit.Name // returns &amp;#34;Apples&amp;#34; namedFruit.Qty // returns 5 Tuple Deconstruction (type v1, type v2, …) = function(); // … or … var (v1, v2, …) = function(); // … or … type var1 = val1; type var2 = val2; (var1, var2) = function(); Example Store return value in a tuple with two named fields:</description>
      
    </item>
    
    <item>
      <title>enums</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/enums/</link>
      <pubDate>Fri, 05 Nov 2021 21:33:38 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/enums/</guid>
      
      <description>Enums System.ValueType –&amp;gt; System.Enum
Enums store choices that are optionally related to values.
Enums are thread safe.
Best Practices If there is no enum member with value 0, create a None constant. (The memory used for the enum is initialized to 0 by the CLR. If you do not define a constant whose value = 0, the enum will contain an illegal value when created.) When you define a method or property that takes an enum constant as a value, validate the value.</description>
      
    </item>
    
    <item>
      <title>structs</title>
      <link>http://localhost:1313/wieserpedia/_net/types/value-types/structs/</link>
      <pubDate>Fri, 05 Nov 2021 21:23:37 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/types/value-types/structs/</guid>
      
      <description>Structs A value type that encapsulates data and related functionality.
Characteristics Allocation: Stack Equality: Value (albeit inefficient) Semantics: Value (a variable of a struct type contains an instance of that type) Inheritance: None (sealed) Mutability: Mutable (but, recommended to be made immutable with readonly modifier) Use When You need a small, data-centric type with little or no behavior You need a type whose fields are only value types The total bytes used by all the fields in the type is 16 bytes or less .</description>
      
    </item>
    
    <item>
      <title>patterns</title>
      <link>http://localhost:1313/wieserpedia/cli/git/patterns/</link>
      <pubDate>Wed, 18 Aug 2021 10:28:58 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/patterns/</guid>
      
      <description>Overview Common patterns when using git.
Repositories Initializing a Repository Go to the project&amp;rsquo;s directory git init Go to GitHub and create repository git remote add &amp;lt;repository name&amp;gt; &amp;lt;GitHub URL&amp;gt; git add . git commit -m &amp;quot;Initial commit.&amp;quot; git pull &amp;lt;name&amp;gt; main – Only needed if anything was added to GitHub repository directly (like README). git push --set-upstream &amp;lt;name&amp;gt; main Renaming repositories git mv &amp;lt;old&amp;gt; &amp;lt;new&amp;gt; git commit git push git remote rename &amp;lt;old&amp;gt; &amp;lt;new&amp;gt; git remote set-url --add &amp;lt;new&amp;gt; &amp;lt;URL&amp;gt; git remote set-url --delete &amp;lt;new&amp;gt; &amp;lt;old URL&amp;gt; GitHub &amp;gt; repository &amp;gt; Settings &amp;gt; Rename Rename local directory Cleaning a Remote Repository git remote prune origin</description>
      
    </item>
    
    <item>
      <title>ppdac model</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/ppdac-model/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/ppdac-model/</guid>
      
      <description>Template for PPDAC Case Studies Problem: What question(s) were addressed? (Why? Why does it matter?) Does distribution of outcome Y depend significantly on variable(s) X? How? On what else does Y depend? Plan: How will we use data to address the question? Data: Describe the data obtained. What are its strengths and limitations? Variables, sample design and sample size, extent of missing data Limitations of data: missing variables, missing values, study design (e.</description>
      
    </item>
    
    <item>
      <title>bayesian networks</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/bayesian-networks/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/bayesian-networks/</guid>
      
      <description>Bayesian Networks (BNs) Regression models have one dependent variable and multiple independent variables. Bayesian networks allow networks of dependencies, both direct and indirect. Many interdependent variables are allowed. Each variable has a conditional distribution that depends on its parents&amp;rsquo; values. Conditioning on values of observed variables gives confiditional CDFs for an unobserved variable. </description>
      
    </item>
    
    <item>
      <title>maximum likelihood estimation and confidence intervals</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/maximum-likelihood-estimation-and-confidence-intervals/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/maximum-likelihood-estimation-and-confidence-intervals/</guid>
      
      <description>Maximum Likelihood Estimation Maximum likelihood estimation – a method of estimating the parameters of a probability distribution by maximizing a likelihood function. It finds the values of parameters (like mean and standard deviation for a normal distribution, or lambda for a Poisson distribution) that result in the curve that best fits the data. Likelihood function – measures the fit (support) of a statistical model to a sample of data for given values of the unknown parameters.</description>
      
    </item>
    
    <item>
      <title>central limit theorem</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/central-limit-theorem/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/central-limit-theorem/</guid>
      
      <description>Central Limit Theorem(s) Definition:
The sum of many independent RVs has an approximately normal distribution. Rule: 30 RVs is usually enough to justify a normal approximation for their sample mean (or for their sum). Checking CLT with repeated samples using sample() x = c(0, 0, 10, 50) set.seed(1) sample(x, 10, replace = TRUE) # randomly sample 10 times from x Practice Problem Q: Suppose that each of 1,000 members of an insurance pool independently has a 0.</description>
      
    </item>
    
    <item>
      <title>markov models</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/markov-models/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/markov-models/</guid>
      
      <description>Overview Markov models are dynamic; they model probabilistic events over time.
Dynamic transition models (like Markov) quantify probabilities of future states over time, for both individuals and populations.
Definition Markov models have a set of states with one-step transition probabilities (if discrete time steps) or transition rates (if continuous time). The probabilities of the transition intensity to the next state depend only on the current state, not how that state was achieved.</description>
      
    </item>
    
    <item>
      <title>poisson distribution and exponential distribution</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/poisson-distribution-and-exponential-distribution/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/poisson-distribution-and-exponential-distribution/</guid>
      
      <description>Poisson Distributions Poisson process A Poisson process models &amp;ldquo;purely random&amp;rdquo; counts with a known intensity or rate lambda.
lambda = average arrivals per unit of time Poisson distribution A Poisson distribution is determined by one parameter: lambda = expected number of counts (arrivals, events, etc.) per unit of time.
Used to make probabilistic predictions if correct probability models are known (or assumed).
ppois(x, lambda) # returns a CDF Sample Problems</description>
      
    </item>
    
    <item>
      <title>probability model statistics</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/probability-model-statistics/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/probability-model-statistics/</guid>
      
      <description>Means Definitions:
The mean of a random variable (rv) is its average value. The mean of a discrete random variable (rv) is the sum of all its possible values weighted (multiplied by) their probabilities: sum over x values of x * p(x) Bernoulli rv – single binomial trial The mean of a Bernoulli random variable having value 1 with probability p and otherwise value 0 with probability 1 - p: p * 1 + (1 - p) * 0 = 0 p The mean of a continuous random variable is the sum of all its possible values weighted by their probability densities E(X) = &amp;ldquo;expectation&amp;rdquo; of X = mean(X) Variance (Population) Definitions:</description>
      
    </item>
    
    <item>
      <title>empirical cumulative distribution function</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/empirical-cumulative-distribution-function/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/empirical-cumulative-distribution-function/</guid>
      
      <description>ECDF If we do not have a probability model (like pnorm()), we can use the data itself as a model with ECDF.
Prediction via simulation using rdist() and ecdf() ecdf(x)(y) returns a fraction of numbers in data vector x that are no greater than value y.
x is a data vector y is where we evaluate ecdf(x) rnorm(n, mean, sd) samples n times from a normal distribution with parameters mean and sd.</description>
      
    </item>
    
    <item>
      <title>binomial probability models</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/binomial-probability-models/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/binomial-probability-models/</guid>
      
      <description>Binomial Confidence Interval Definition:
Computes the mean (x/n) and the lower and upper confidence limits (default=95%) from inputs x and n. library(binom) binom.confint(x,	# number of successes n,	# number of trials conf.level = 0.95,	# confidence interval method = &amp;#34;all&amp;#34;)	# method to construct the interval Solves: Find an exact 95% confidence interval for the success probability p.
Interpretation:
95% statistical confidence that true value of population parameter p is between lower and upper.</description>
      
    </item>
    
    <item>
      <title>normal distribution probability models</title>
      <link>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/normal-distribution-probability-models/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/data-science/probability-and-statistics/probability-models/normal-distribution-probability-models/</guid>
      
      <description>Normal Distribution Notes:
Used for sums of random variables Characterized by 2 numbers: mean (mu) standard deviation (sigma-squared) They have continuous outcomes (weight, cost, time, etc) Example:
95% prediction interval for normal distribution: Problem: Each customer spends a random amount of money, mean = $25, SD = $5. What is a 95% PI for the amount spent by a randomly selected customer? Solution: mean +/- 2 * sd = 25 +/- 2 * 5, so 95% PI is [$15, $35] 95% of normal probability density function is within 1.</description>
      
    </item>
    
    <item>
      <title>branching</title>
      <link>http://localhost:1313/wieserpedia/cli/git/branching/</link>
      <pubDate>Sun, 30 May 2021 18:28:35 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/cli/git/branching/</guid>
      
      <description>Managing Branches git branch BRANCH – create a new branch named branch (but don&amp;rsquo;t switch to it) HEAD will still point to the current branch git branch – return current branches --merged BRANCH – return branches that have merged into current branch or branch --no-merged BRANCH – return branches that have not merged into current branch or branch --list – list all branches in the repo --all --delete BRANCH – delete BRANCH --move OLD-BRANCH-NAME NEW-BRANCH-NAME – rename branch from OLD-BRANCH-NAME to NEW-BRANCH-NAME --set-upstream-to REMOTE/BRANCH-NAME [LOCAL-BRANCH] – track remote branch at REMOTE/BRANCH-NAME to LOCAL-BRANCH -v – return current branches and last commit on each branch -vv – return current branches, last commit, tracking, and position of current branch Switching Branches Switching branches changes files in your working directory to match your last commit on this branch.</description>
      
    </item>
    
    <item>
      <title>cmd</title>
      <link>http://localhost:1313/wieserpedia/operating-systems/windows/cmd/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/operating-systems/windows/cmd/</guid>
      
      <description>Disk Management Recover flash drive diskpart list disk select disk *#* clean create partition primary --optional-- list volume select volume *#* format fs=ntfs quick Files &amp;amp; Directories dir /p wildcard search # Pause at each screen dir /s wildcard search # traverse through Subdirectories as well
Find Local Administrators net localgroup administrators
Mapping Drives net use # show list of mapped drives net use DRIVE: PATH # map PATH to DRIVE net use DRIVE: PATH /persistent:Yes # make this drive mapping persistent net use DRIVE: PATH /user:USER PASSWORD # make this mapping with USER PASSWORD credentials net use DRIVE: /delete # delete this drive mapping net use * /delete # delete all mapped drives</description>
      
    </item>
    
    <item>
      <title>parallel loops</title>
      <link>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/parallel-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/programming-models/parallel-programming/parallel-loops/</guid>
      
      <description>Parallel.For Note: Use Interlocked to execute atomic operations which will avoid multiple threads modifying a variable simultaneously.
Parallel.For
Returns a System.Threading.Tasks.ParallelLoopResult object that includes information such as last iteration completed Throws System.AggregateException if one or more exceptions occur on the threads. long totalSize = 0; string[] files = Directory.GetFiles(path); var result = Parallel.For(0, // The starting element index files.Length, // The ending element index // An `Action&amp;lt;int&amp;gt;` delegate that takes the current iteration (supplied by the runtime) as its value index =&amp;gt; { FileInfo fi = new(files[index]); long size = fi.</description>
      
    </item>
    
    <item>
      <title>verifying mocks</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/verifying-mocks/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/verifying-mocks/</guid>
      
      <description>Overview Credit: https://docs.educationsmediagroup.com/unit-testing-csharp/moq
Verifications are conducted after production code has been called. They verify that a certain method/property was called with specific arguments.
Test examples below use this interface:
public interface IService { void Send(string message); Task SendAsync(string message); event EventHandler&amp;lt;MessageEventArgs&amp;gt; Sent; string ContentType { get; set; } } Implicit Verification The implicit approach involves calling Verifiable() at the end of each configuration to mark the mock to be verified:</description>
      
    </item>
    
    <item>
      <title>setting return values</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/setting-return-values/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/setting-return-values/</guid>
      
      <description>Overview [Documentation] Return Values Assuming this interface:
public interface ICalculator { int Add(int a, int b); string Mode { get; set; } } And this substitute:
var calculator = Substitute.For&amp;lt;ICalculator&amp;gt;(); Use the following API to set return values:
For Methods calculator.Add(1, 2).Returns(3); Using Argument Matching // Return when first arg is anything and second arg is 5: calculator.Add(Arg.Any&amp;lt;int&amp;gt;(), 5).Returns(10); Assert.AreEqual(10, calculator.Add(123, 5)); Assert.AreEqual(10, calculator.Add(-9, 5)); Assert.AreNotEqual(10, calculator.Add(-9, -9)); // Return when first arg is 1 and second arg less than 0: calculator.</description>
      
    </item>
    
    <item>
      <title>quality 7 all</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-all/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-all/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Rules from &amp;#39;7.0&amp;#39; release with &amp;#39;All&amp;#39; analysis mode # Description: Rules with enabled-by-default state from &amp;#39;7.0&amp;#39; release with &amp;#39;All&amp;#39; analysis mode. Rules that are first released in a version later than &amp;#39;7.0&amp;#39; are disabled. is_global = true global_level = -100 # CA1000: Do not declare static members on generic types dotnet_diagnostic.CA1000.severity = warning # CA1001: Types that own disposable fields should be disposable dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>quality 7 minimum</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-minimum/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-minimum/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Rules from &amp;#39;7.0&amp;#39; release with &amp;#39;Minimum&amp;#39; analysis mode # Description: Rules with enabled-by-default state from &amp;#39;7.0&amp;#39; release with &amp;#39;Minimum&amp;#39; analysis mode. Rules that are first released in a version later than &amp;#39;7.0&amp;#39; are disabled. is_global = true global_level = -100 # CA1016: Mark assemblies with assembly version dotnet_diagnostic.CA1016.severity = warning # CA1018: Mark attributes with AttributeUsageAttribute dotnet_diagnostic.CA1018.severity = warning # CA1041: Provide ObsoleteAttribute message dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>quality 7 recommended</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-recommended/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/quality-7-recommended/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Rules from &amp;#39;7.0&amp;#39; release with &amp;#39;Recommended&amp;#39; analysis mode # Description: Rules with enabled-by-default state from &amp;#39;7.0&amp;#39; release with &amp;#39;Recommended&amp;#39; analysis mode. Rules that are first released in a version later than &amp;#39;7.0&amp;#39; are disabled. is_global = true global_level = -100 # CA1000: Do not declare static members on generic types dotnet_diagnostic.CA1000.severity = warning # CA1001: Types that own disposable fields should be disposable dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>style 7 all</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-all/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-all/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Style rules with &amp;#39;All&amp;#39; analysis mode is_global = true global_level = -99 # IDE0004: Remove Unnecessary Cast dotnet_diagnostic.IDE0004.severity = warning # IDE0005: Using directive is unnecessary. dotnet_diagnostic.IDE0005.severity = warning # IDE0007: Use implicit type dotnet_diagnostic.IDE0007.severity = warning # IDE0008: Use explicit type dotnet_diagnostic.IDE0008.severity = warning # IDE0010: Add missing cases dotnet_diagnostic.IDE0010.severity = warning # IDE0011: Add braces dotnet_diagnostic.IDE0011.severity = warning # IDE0016: Use &amp;#39;throw&amp;#39; expression dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>style 7 minimum</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-minimum/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-minimum/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Style rules with &amp;#39;Minimum&amp;#39; analysis mode is_global = true global_level = -99 # IDE0005: Using directive is unnecessary. dotnet_diagnostic.IDE0005.severity = warning # IDE0007: Use implicit type dotnet_diagnostic.IDE0007.severity = warning # IDE0008: Use explicit type dotnet_diagnostic.IDE0008.severity = warning # IDE0011: Add braces dotnet_diagnostic.IDE0011.severity = warning # IDE0036: Order modifiers dotnet_diagnostic.IDE0036.severity = warning # IDE0040: Add accessibility modifiers dotnet_diagnostic.IDE0040.severity = warning # IDE0043: Invalid format string dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>style 7 recommended</title>
      <link>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-recommended/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/tools-and-diagnostics/code-analysis/editorconfig-templates/style-7-recommended/</guid>
      
      <description># NOTE: Requires **VS2019 16.7** or later # Style rules with &amp;#39;Recommended&amp;#39; analysis mode is_global = true global_level = -99 # IDE0005: Using directive is unnecessary. dotnet_diagnostic.IDE0005.severity = warning # IDE0007: Use implicit type dotnet_diagnostic.IDE0007.severity = warning # IDE0008: Use explicit type dotnet_diagnostic.IDE0008.severity = warning # IDE0011: Add braces dotnet_diagnostic.IDE0011.severity = warning # IDE0016: Use &amp;#39;throw&amp;#39; expression dotnet_diagnostic.IDE0016.severity = warning # IDE0017: Simplify object initialization dotnet_diagnostic.IDE0017.severity = warning # IDE0018: Inline variable declaration dotnet_diagnostic.</description>
      
    </item>
    
    <item>
      <title>high performance logging</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/logging/high-performance-logging/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/logging/high-performance-logging/</guid>
      
      <description>Overview [Documentation] High-performance logging is achieved with LoggerMessage. This class exposes functionality to create delegates that can be cached. This approach requires fewer object allocations and reduced computational overhead vs. ILogger.
Create a logger message LoggerMessage.Define(LogLevel, EventId, String) configures an Action delegate that represents a log message. Each log message is stored in a static field created by Define.
private static readonly Action&amp;lt;ILogger, Exception&amp;gt; s_failedToProcessWorkItem; The delegate is assigned:
s_failedToProcessWorkItem = LoggerMessage.</description>
      
    </item>
    
    <item>
      <title>2. action return types</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/action-return-types/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/action-return-types/</guid>
      
      <description>Overview [Documentation] There are four options for return types for web API controller action methods:
Specific type IActionResult ActionResult&amp;lt;T&amp;gt; HttpResults Specific Type Use when there are no known conditions against which to safeguard.
Considerations for Specific Types IEnumerable&amp;lt;T&amp;gt; or IAsyncEnumerable&amp;lt;T&amp;gt; ASP.NET Core buffers the result of actions that return IEnumerable&amp;lt;T&amp;gt; before writing them to the response:
[HttpGet(&amp;#34;syncsale&amp;#34;)] public IEnumerable&amp;lt;Product&amp;gt; GetOnSaleProducts() { var products = _productContext.Products.OrderBy(p =&amp;gt; p.Name).ToList(); foreach (var product in products) if (product.</description>
      
    </item>
    
    <item>
      <title>navigation</title>
      <link>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/navigation/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/web-apps/blazor/fundamentals/routing-and-navigation/navigation/</guid>
      
      <description>NavigationManager Use NavigationManager to manage URIs and navigation in C# code. NavigationManager is added to the DI container by the framework (no registration required).
[Inject] // injects a NavigationManager instance public NavigationManager NavMan { get; set; } NavMan.NavigateTo($&amp;#34;/employeedetail/{selectedEmployee.EmployeeId}&amp;#34;); NavigationManager uses the browser&amp;rsquo;s history API to maintain navigation history.
Navigation Options NavigateManager&amp;rsquo;s NavigateTo method accepts NavigationOptions:
ForceLoad — bypass client-side routing and force the browser to load the new page from the server; default = false ReplaceHistoryEntry — replace teh current entry in the history stack; default = true; if false, append instead of replace HistoryEntryState — get or set the state to append to the history entry Location Changes NavigationManager&amp;rsquo;s LocationChanged event has LocationChangedEventArgs that provide information about navigation events including:</description>
      
    </item>
    
    <item>
      <title>grid</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/grid/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/grid/</guid>
      
      <description>Overview Bootstrap&amp;rsquo;s grid system uses a series of containers, rows and columns to layout and align content. Built with flexbox.
Documentation: https://getbootstrap.com/docs/5.3/layout/grid/ Containers center and horizontally pad content. Rows are wrappers for columns. Each column has horizontal padding (gutter). Gutters themselves are also customizable. Note: flexbox has known bugs.
Basic Usage &amp;lt;div class=&amp;#34;container text-center&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; Column &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; Column &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; Column &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Auto-layout columns Breakpoint-specific column classes for easy column sizing without explicit numbered classes (ie: .</description>
      
    </item>
    
    <item>
      <title>more features</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/more-features/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/more-features/</guid>
      
      <description>Overview These notes provide links to other features of Moq not covered in other notes.
Customizing Mock Behavior When instantiating a mock, pass the MockBehavior enum to customize the behavior:
var mock = new Mock&amp;lt;IService&amp;gt;(MockBehavior.Strict); Behaviors:
Strict — throw an exception whenever a method or property is invoked without a matching configuration Loose (default) — return a default value instead of throwing an exception Callbacks See https://docs.educationsmediagroup.com/unit-testing-csharp/moq/callbacks
Implicit Mocks When mocking interfaces that don&amp;rsquo;t need any configuration or verification, use implicit mocks:</description>
      
    </item>
    
    <item>
      <title>validating calls</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/validating-calls/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/nsubstitute/validating-calls/</guid>
      
      <description>Overview [Documentation] Validating Calls Assuming this code:
public interface ICommand { void Execute(); event EventHandler Executed; } public class SomethingThatNeedsACommand { ICommand command; public SomethingThatNeedsACommand(ICommand command) =&amp;gt; this.command = command; public void DoSomething() { command.Execute(); } public void DoNothing { } } To Methods Validate a Method was Called [Test] public void Should_execute_command() { var command = Substitute.For&amp;lt;ICommand&amp;gt;(); var something = new SomethingThatNeedsACommand(command); something.DoSomething(); // Assert command.Received().Execute(); // Successful because command received a call to its Execute method.</description>
      
    </item>
    
    <item>
      <title>very high performance logging (source generation)</title>
      <link>http://localhost:1313/wieserpedia/_net/fundamentals/logging/very-high-performance-logging/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/fundamentals/logging/very-high-performance-logging/</guid>
      
      <description>Overview Availability: .NET 6
Documentation: https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator
The LoggerMessageAttribute, part of Microsoft.Extensions.Logging, source-generates performant logging APIs. The auto-generated code relies on ILogger and LoggerMessage.Define.
This implementation is significantly faster than other approaches).
Usage Use LoggerMessageAttribute on partial logging methods:
public static partial class Log { [LoggerMessage( EventId = 0, Level = LogLevel.Critical, Message = &amp;#34;Could not open socket to `{hostName}`&amp;#34;)] public static partial void CouldNotOpenSocket(ILogger logger, string hostName); } The method does not have to be static.</description>
      
    </item>
    
    <item>
      <title>3. formatting responses</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/formatting-responses/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/formatting-responses/</guid>
      
      <description>Overview [Documentation] Some actions, like those that derive from ActionResult like JsonResult and ContentResult, return results in specific formats (JSON and plain text, respectively). Others, like actions that return objects that are not IActionResult types, are serialized with an IOutputFormatter.
By default, Ok returns JSON-formatted data:
[HttpGet] public IActionResult Get() =&amp;gt; Ok(_todoItemStore.GetList()); To return plain text, use ContentResult and Content:
[HttpGet(&amp;#34;Version&amp;#34;)] public ContentResult GetVersion() =&amp;gt; Content(&amp;#34;v1.0.0&amp;#34;); For actions with multiple return types, return IActionResult.</description>
      
    </item>
    
    <item>
      <title>containers</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/containers/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/containers/</guid>
      
      <description>Overview Documentation: https://getbootstrap.com/docs/5.3/layout/containers/ A build block that contains, pads, and aligns content within a given device or viewport. Required when using default grid system. Can be nested, but most layotus do not require this. 3 Containers .container — sets a max-width at each responsive breakpoint .container-&amp;lt;breakpoint&amp;gt; — uses width: 100% until the specified breakpoint .container-fluid — sets width: 100% at all breakpoints Comparison:
Extra small &amp;lt;576px Small ≥576px Medium ≥768px Large ≥992px X-Large ≥1200px XX-Large ≥1400px .</description>
      
    </item>
    
    <item>
      <title>end-to-end example</title>
      <link>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/end-to-end-example/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/testing/mocking-frameworks/moq/end-to-end-example/</guid>
      
      <description>Abstract Credit: https://methodpoet.com/unit-testing-with-moq/
These notes provide an end-to-end example of unit testing a system with Moq.
Assumptions Assume this system under test:
public interface IBookService { string GetISBNFor(string bookTitle); IEnumerable&amp;lt;string&amp;gt; GetBooksForCategory(string categoryId); } public interface IEmailSender { public void SendEmail(string to, string subject, string body); } public class AccountService { private IBookService _bookService; private IEmailSender _emailSender; public AccountService(IBookService bookService, IEmailSender emailSender) { _bookService = bookService; _emailSender = emailSender; } public IEnumerable&amp;lt;string&amp;gt; GetAllBooksForCategory(string categoryId) { var allBooks = _bookService.</description>
      
    </item>
    
    <item>
      <title>4. error handling</title>
      <link>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/error-handling/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/asp.net/api/controller-based-apis/error-handling/</guid>
      
      <description>Overview [Documentation] Notes on Error Handling in ASP.NET Core apply.
Exception Handling In non-development environments:
Call UseExceptionHandler to add exception handling middleware:
Program.cs var app = builder.Build(); app.UseHttpsRedirection(); if (!app.Environment.IsDevelopment()) app.UseExceptionHandler(&amp;#34;/error&amp;#34;); app.UseAuthorization(); app.MapControllers(); app.Run(); Configure a controller action to respond to the /error route: SomeController.cs [Route(&amp;#34;/error&amp;#34;)] // If using OpenAPI, mark this action with [ApiExplorerSettings(IgnoreApi = true)] to exclude this // error handler action from the app&amp;#39;s OpenAPI specification: public IActionResult HandleError() =&amp;gt; Problem(); If using exception handling middleware in both development and non-development environments:</description>
      
    </item>
    
    <item>
      <title>columns</title>
      <link>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/columns/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/web-development/bootstrap/layout/columns/</guid>
      
      <description>Overview How to modify columns with options for alignment, ordering, and offsetting. Using column classes to manage widths of non-grid elements.
When building grid layouts, all content goes into columns. Bootstrap has predefined classes for creating layouts. Alignment Vertical Alignment Change the align-items-* classes:
&amp;lt;div class=&amp;#34;container text-center&amp;#34;&amp;gt; &amp;lt;!-- also, align-items-center and align-items-end: --&amp;gt; &amp;lt;div class=&amp;#34;row align-items-start&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; One of three columns &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; One of three columns &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col&amp;#34;&amp;gt; One of three columns &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; Change the alignment on individual columns with align-self-*:</description>
      
    </item>
    
    <item>
      <title>#2 Multi-Player ELO Systems</title>
      <link>http://localhost:1313/blog/makig-a-hugo-blog-copy/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/makig-a-hugo-blog-copy/</guid>
      
      <description></description>
      
    </item>
    
    <item>
      <title>#1 Making A Hugo Blog</title>
      <link>http://localhost:1313/blog/makig-a-hugo-blog/</link>
      <pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/makig-a-hugo-blog/</guid>
      
      <description></description>
      
    </item>
    
    <item>
      <title>SECCON CTF 2023 Quals</title>
      <link>http://localhost:1313/competitions/seccon2023/</link>
      <pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/competitions/seccon2023/</guid>
      
      <description>Did not have time to go in hard with this CTF, but I did try to touch on the pwnable challenges as much as possible.
Click the heading of each challenges to get source files.
Pwnable This is how pwnable challenges should be made, just give the source code instead of making everyone turn on Ghidra.
ROP-2.35 For beginner this challenge has some annoying steps that will make you mentally ill.</description>
      
    </item>
    
    <item>
      <title>quotes</title>
      <link>http://localhost:1313/example-blog/quotes/</link>
      <pubDate>Tue, 22 Aug 2023 08:09:02 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/quotes/</guid>
      
      <description>abstract A collection of some of my favorite quotes.
Inspire Make visible what, without you, might perhaps never have been seen. —Robert Bresson
Whenever you find that you are on the side of the majority, it is time to pause and reflect. —Mark Twain
One person can make the difference between success and failure. —Unknown
I must create my own system or be enslaved by another man&amp;rsquo;s. —William Blake
There is no law of progress.</description>
      
    </item>
    
    <item>
      <title>the ios experiment</title>
      <link>http://localhost:1313/example-blog/the-ios-experiment/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/the-ios-experiment/</guid>
      
      <description>abstract First impressions of the iPhone 14 Pro from a long-time Google Android user (since the Nexus One!)
[✔] likes ✔ Display responsiveness. It&amp;rsquo;s faster than my most recent Android phone, a Google Pixel 6. At times, when typing fast, my Pixel would &amp;ldquo;miss&amp;rdquo; touches—this phone doesn&amp;rsquo;t.
✔ Display brightness. I can see the screen in sunlight while wearing sunglasses. I used to have to peer over my sunglasses to see my Pixel&amp;rsquo;s display in the sun.</description>
      
    </item>
    
    <item>
      <title>on the state of software in 2023</title>
      <link>http://localhost:1313/example-blog/on-the-state-of-software/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/example-blog/on-the-state-of-software/</guid>
      
      <description>In 2023, the majority of software on planet Earth is poorly constructed. This is true for everything from small mobile apps to mid-sized line of business applications to large distributed enterprise systems. It is true for application software, firmware, operating systems, embedded systems, and IoT systems. Low quality software exists in both open- and closed-source codebases. The software we use in our personal and professional lives every day is unreliable.</description>
      
    </item>
    
    <item>
      <title>troubleshooting cs0436 with shared projects in visual studio</title>
      <link>http://localhost:1313/example-blog/troubleshooting-cs0436-with-shared-projects-in-visual-studio/</link>
      <pubDate>Wed, 05 Apr 2023 19:06:48 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/troubleshooting-cs0436-with-shared-projects-in-visual-studio/</guid>
      
      <description>overview I recently ran into compiler warning cs0436 while working on a solution with a shared project in VS2022. If you run into the same, this might help you troubleshoot.
scenario You&amp;rsquo;re working on a solution that contains a project, alpha (which is also the name of its namspace). That project contains a project reference to another project, bravo:
alpha |--bravo Shared project, charlie, contains code that is used by alpha, bravo, and other projects.</description>
      
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>http://localhost:1313/posts/placeholder-text/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/placeholder-text/</guid>
      
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>plotly.net</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/plotly.net/</link>
      <pubDate>Wed, 20 Apr 2022 10:07:37 -0600</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/plotly.net/</guid>
      
      <description>Plotly.NET https://plotly.com/csharp/creating-and-updating-figures/
Pros:
Uses Plotly.JS Cons:
Documentation is mostly in F#. Poor IntelliSense. Getting Started dotnet add package plotly.net using Plotly.NET; using Microsoft.FSharp.Core; // less verbose and more helpful intellisense(?) Basics General design philosophy:
Initialize a generic chart Style the chart Display or save the chart Initialize a Chart A chart consists of:
data: a collection of traces, which represent the data and chart type. layout: controls the axis positions and styles.</description>
      
    </item>
    
    <item>
      <title>mailkit</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/mailkit/</link>
      <pubDate>Fri, 21 Jan 2022 14:22:06 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/mailkit/</guid>
      
      <description>MailKit A cross-platform mail client library built on top of MimeKit.
Package dotnet add package mailkit Creating Messages var message = new MimeMessage(); message.From.Add(new MailboxAddress(&amp;#34;Joey&amp;#34;, &amp;#34;joey@friends.com&amp;#34;)); message.To.Add(new MailboxAddress(&amp;#34;Alice&amp;#34;, &amp;#34;alice@wonderland.com&amp;#34;)); message.Subject = &amp;#34;How you doing?&amp;#34;; message.Body = new TextPart(&amp;#34;plain&amp;#34;) { Text = @&amp;#34;Hey Alice, What are you up to this weekend? Monica is throwing one of her parties on Saturday and I was hoping you could make it. }; Creating a text/html and text/plain Message var attachment = CreateImageAttachment (); var plain = CreateTextPlainPart (); var html = CreateTextHtmlPart (); // Note: it is important that the text/html part is added second, because it is the most expressive version and (probably) the most faithful to the sender&amp;#39;s WYSIWYG editor.</description>
      
    </item>
    
    <item>
      <title>on best practices</title>
      <link>http://localhost:1313/example-blog/on-best-practices/</link>
      <pubDate>Sun, 02 Jan 2022 09:41:25 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/on-best-practices/</guid>
      
      <description>Something that has always puzzled me about some organizations is their tendency to ignore best practices.
One particular industry has ignored best practices for decades, filling the gap with hastily developed, poorly vetted practices instead.
This tendency�phenomenon, even�holds true for organizations of various size, specialization, and maturity in this anonymous industry. It is pervasive and deep-rooted.
What is a best practice? Many definitions exist. Here is Merriam-Webster&amp;rsquo;s:
&amp;ldquo;a procedure that has been shown by research and experience to produce optimal results and that is established or proposed as a standard suitable for widespread adoption.</description>
      
    </item>
    
    <item>
      <title>serilog</title>
      <link>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/serilog/</link>
      <pubDate>Sat, 11 Dec 2021 13:17:43 -0700</pubDate>
      
      <guid>http://localhost:1313/wieserpedia/_net/3rd-party-libraries/serilog/</guid>
      
      <description>Serilog Structured event logging. Github: Getting Started · serilog/serilog Wiki (github.com)
dotnet add package serilog dotnet add package serilog.sinks.consolePretty print to console.
dotnet add package serilog.sinks.fileLog to file.
Other Sinks Available: https://github.com/serilog/serilog/wiki/Provided-Sinks
Creating Loggers Serilog.Core.Logger Serilog.Ilogger Serilog.Log Create Root Logger Create this on application startup and then use it across classes:
using var log = new LoggerConfiguration() .MinimumLevel.Debug() // The minimum log level. If not specified, Information is used. .WriteTo.Console( // The WriteTo object configures sinks.</description>
      
    </item>
    
    <item>
      <title>on silence</title>
      <link>http://localhost:1313/example-blog/on-silence/</link>
      <pubDate>Tue, 17 Aug 2021 09:33:47 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/on-silence/</guid>
      
      <description>For as long as I can remember, people have told me that I do not speak enough. The feedback has come from family, friends, and colleagues throughout my life. I regularly respond to questions such as �you didn�t say much in that meeting�is everything okay?� and �you sure don�t have much to say, do you?� to comments such as �you seem quiet today.� I�m an introvert, of course, so these comments are peculiar sometimes.</description>
      
    </item>
    
    <item>
      <title>on delegation</title>
      <link>http://localhost:1313/example-blog/on-delegation/</link>
      <pubDate>Fri, 30 Aug 2019 09:26:49 -0600</pubDate>
      
      <guid>http://localhost:1313/example-blog/on-delegation/</guid>
      
      <description>There may be many things you struggle with as a leader. Do not let delegation be one of them. Think of delegation not as something that you can do as a leader, but instead as something that you must do.
By delegating tasks, you are providing your team with an opportunity to deliver results (in their own way) and, hopefully, to learn new skills or sharpen existing ones. Consider that by not delegating a task, you are actively preventing the growth and development of your team.</description>
      
    </item>
    
    <item>
      <title>Works</title>
      <link>http://localhost:1313/whoami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/whoami/</guid>
      
      <description>DevOps </description>
      
    </item>
    
  </channel>
</rss>
