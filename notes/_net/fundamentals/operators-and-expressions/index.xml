<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operators and expressions on Fred Wieser</title>
    <link>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/</link>
    <description>Recent content in operators and expressions on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Oct 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/overview/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/overview/</guid>
      
      <description>Operators Unary operators work on a single operand:
int y = x++; Binary operators work on two operands:
int sum = x + y; Ternary operators (?:) work on three operands.
Built-in Operators nameof() nameof() returns the name of a variable, type or member as a string constant:
nameof(numbers) //returns numbers nameof(numbers.Count) //returns Count sizeof() sizeof() returns the number of bytes that an instance of a type uses in memory:</description>
      
    </item>
    
    <item>
      <title>collection expressions</title>
      <link>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/collection-expressions/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/collection-expressions/</guid>
      
      <description>Overview [Documentation] Availability: C# 12
Use collection expressions to create common collection values. This syntax can be assigned to many different collection types. It contains a sequence of elements between [ and ].
Usage Collection expressions can be used across many constructs:
// In a variable declaration: Span&amp;lt;string&amp;gt; weekDays = [ &amp;#34;Sun&amp;#34;, &amp;#34;Mon&amp;#34;, &amp;#34;Tue&amp;#34;, &amp;#34;Wed&amp;#34;, &amp;#34;Thu&amp;#34;, &amp;#34;Fri&amp;#34;, &amp;#34;Sat&amp;#34; ]; // To initialize a private field: private static readonly ImmutableArray&amp;lt;string&amp;gt; _months = [ &amp;#34;Jan&amp;#34;, &amp;#34;Feb&amp;#34;, &amp;#34;Mar&amp;#34;, &amp;#34;Apr&amp;#34;, &amp;#34;May&amp;#34;, &amp;#34;Jun&amp;#34;, &amp;#34;Jul&amp;#34;, &amp;#34;Aug&amp;#34;, &amp;#34;Sep&amp;#34;, &amp;#34;Oct&amp;#34;, &amp;#34;Nov&amp;#34;, &amp;#34;Dec&amp;#34; ]; // To initialize a property with an expression body: public IEnumerable&amp;lt;int&amp;gt; MaxDays =&amp;gt; [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ]; public int Sum(IEnumerable&amp;lt;int&amp;gt; values) =&amp;gt; values.</description>
      
    </item>
    
    <item>
      <title>lambda expressions</title>
      <link>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/lambda-expressions/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/lambda-expressions/</guid>
      
      <description>Lambda Expression Lambda expressions are anonymous functions.
The lambda operator =&amp;gt; (&amp;ldquo;returns&amp;rdquo;) separates a lambda&amp;rsquo;s parameter list from its body.
(x) =&amp;gt; x * x; // A lambda (anonymous method) with a parameter named x that returns x * x. Lambdas in Methods int MyFunc(int x) { return x; } …is equivalent to…
int MyFunc(int x) =&amp;gt; x; Lambdas in Anonymous Methods Func&amp;lt;int, int&amp;gt; = delegate (int x) { return x; }; …is equivalent to…</description>
      
    </item>
    
    <item>
      <title>pattern matching</title>
      <link>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/pattern-matching/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 -0600</pubDate>
      
      <guid>http://localhost:1313/notes/_net/fundamentals/operators-and-expressions/pattern-matching/</guid>
      
      <description>Pattern Matching See also: C# 9.0: Pattern Matching in Switch Expressions – Thomas Claudius Huber
Declaration and Type Patterns if (o is int i) { … }	// If o matches the pattern of an integer, store it in variable i. Check if a value is null with a declaration pattern using is:
int? maybe = 12; if (maybe is int number) { // Combines test and assignment in single statement.</description>
      
    </item>
    
  </channel>
</rss>
