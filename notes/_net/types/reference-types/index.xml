<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reference types on Fred Wieser</title>
    <link>http://localhost:1313/notes/_net/types/reference-types/</link>
    <description>Recent content in reference types on Fred Wieser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 May 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://localhost:1313/notes/_net/types/reference-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/overview/</link>
      <pubDate>Wed, 16 Feb 2022 16:13:51 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/overview/</guid>
      
      <description>Reference Types Reference types store on the heap. The default value for reference types is null. All reference types support inheritance. object (System.Object)
string (System.String)
dynamic (System.Object) Functions like Type object. At compile time, an element typed dynamic is assumed to support any operation.</description>
      
    </item>
    
    <item>
      <title>nested types</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/nested-types/</link>
      <pubDate>Sun, 06 Mar 2022 18:11:19 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/nested-types/</guid>
      
      <description>Nested Types A type defined within a class, struct, or interface is a nested type:
public class Outer { class Inner { Inner() { } } } Nested types default to private. They are only accessible from their containing type.
Accessing To access the outer type, pass it as an argument to the constructor fo the nested type:
public class Outer { public class Inner { private Outer parent; public Inner() { } public Inner(Outer parent) { this.</description>
      
    </item>
    
    <item>
      <title>dynamic</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/dynamic/</link>
      <pubDate>Thu, 17 Feb 2022 19:03:02 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/dynamic/</guid>
      
      <description>Dynamic Type Namespace: System.Dynamic
Type: DynamicObject
Characteristics:
Bypasses static type checking. Functions like it has type object. At compile time, an element typed dynamic is assumed to support any operation. Conversions Converting to Dynamic dynamic d1 = 7; dynamic d2 = &amp;#34;a string&amp;#34;; Converting From Dynamic int i = d1; string s = d2; Uses HTML DOM Use a dynamic object to reference the HTML DOM, which can contain any combination of valid HTML and attributes.</description>
      
    </item>
    
    <item>
      <title>stringbuilder</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/stringbuilder/</link>
      <pubDate>Thu, 11 Nov 2021 16:38:01 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/stringbuilder/</guid>
      
      <description>StringBuilder Object –&amp;gt; StringBuilder
Construction var sb = new StringBuilder(&amp;#34;string&amp;#34;); // string is optional. var sb = new StringBuilder(&amp;#34;string&amp;#34;, initial_capacity); var sb = new StringBuilder(initial_capacity, max_capacity); Properties Chars[index] — Return or set the character at index. Length — Current number of characters in the StringBuilder. Capacity — Number of characters that the StringBuilder can currently hold. This is increased dynamically. MaxCapacity — By default, set to Int32.MaxValue. Can be overwritten. Methods Manipulating These methods accept a string, substring, character array, or the string representation of a primitive data type:</description>
      
    </item>
    
    <item>
      <title>anonymous types</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/anonymous-types/</link>
      <pubDate>Sun, 07 Nov 2021 20:03:18 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/anonymous-types/</guid>
      
      <description>Anonymous Types Anonymous types are used to encapsulate a set of read-only properties into an object without having to define a type:
var v = new { Amount = 108, // Compiler infers Amount&amp;#39;s type as `int`. Message = &amp;#34;Hello&amp;#34; // Compiler infers Message&amp;#39;s type as `string`. }; When a variable is initialized with an anonymous type, it must be declared as var to access the properties of the object at a later point.</description>
      
    </item>
    
    <item>
      <title>records</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/records/</link>
      <pubDate>Sun, 07 Nov 2021 19:30:56 -0700</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/records/</guid>
      
      <description>Records Records can be record classes or record structs.
Use When You need a data model that depends on value equality You need a type whose objects are immutable Do Not Use As entity types in Entity Framework Core. Positional Syntax Positional syntax will automatically declare properties, a constructor, and a deconstructor:
public record Person(string FirstName, string LastName); public static void Main() { Person person = new(&amp;#34;Nancy&amp;#34;, &amp;#34;Davolio&amp;#34;); Console.WriteLine(person); // output: Person { FirstName = Nancy, LastName = Davolio } } Record Class Record classes, a reference type (defaults to record class if class or struct not specified):</description>
      
    </item>
    
    <item>
      <title>strings</title>
      <link>http://localhost:1313/notes/_net/types/reference-types/strings/</link>
      <pubDate>Sat, 06 Nov 2021 16:38:02 -0600</pubDate>
      
      <guid>http://localhost:1313/notes/_net/types/reference-types/strings/</guid>
      
      <description>Strings A sequence of UTF-16 code units.
Stored internally as a sequential read-only collection of Char objects.
Length property represents the number of Char objects contained, not the number of code units. To access the individual code points, use StringInfo The string keyword looks like a type but is actually an alias for the type String
Empty Strings Empty strings are represented as &amp;quot;&amp;quot;
However, to create empty strings, use the constant String.</description>
      
    </item>
    
  </channel>
</rss>
